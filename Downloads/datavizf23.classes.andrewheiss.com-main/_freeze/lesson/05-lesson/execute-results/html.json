{
  "hash": "624328bee8398d81f0a262e9407c220d",
  "result": {
    "markdown": "---\ntitle: \"Themes\"\ndate: \"2023-09-18\"\ndate_end: \"2023-09-22\"\n---\n\n\n\n::: {.cell layout-align=\"center\"}\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/iframe-resizer/3.5.16/iframeResizer.min.js\" type=\"text/javascript\"></script>\n:::\n\n\n## Complete ggplot themes\n\nThere are many built-in complete themes that have a good combination of all the different `theme()` options already set for you. By default, ggplot uses `theme_gray()` (also spelled `theme_grey()` for UK English; because the first developer of ggplot (Hadley Wickham) is from New Zealand, British spelling works throughout (e.g. you can use `colour` instead of `color`))\n\n::: {.callout-important}\n### Your turn\n\nAdd `theme_minimal()` to this plot:\n\n:::\n\n\n::: {.cell layout-align=\"center\"}\n<iframe style=\"margin: 0px auto; min-width: 100%; overflow: hidden; height: 801px;\" id=\"learnr-05-lesson-theme1\" class=\"interactive\" src=\"https://andrewheiss.shinyapps.io/datavizm20_05-themes-1/\" scrolling=\"no\" frameborder=\"no\" onload='iFrameResize({}, \"#learnr-05-lesson-theme1\")'></iframe>\n:::\n\n\nHopefully that was easy!\n\nIf you look at [the documentation for the different theme functions](https://ggplot2.tidyverse.org/reference/ggtheme.html), you'll notice that there are a few optional arguments, like `base_size` and `base_family`. The `base_size` argument changes the base font size for the text in the plot, and it is 11 by default. Changing it to something like 20 will not make all the text in the plot be sized at 20—functions like `theme_minimal()` set the size of plot elements based on the `base_size`. For instance, in `theme_minimal()`, the plot title is set to be 120% of `base_size`, while the caption is 80%. Changing `base_size` will resize all the different elements accordingly.\n\n::: {.callout-important}\n### Your turn\n\nModify this plot to use `theme_minimal()` with a base size of 16:\n\n:::\n\n\n::: {.cell layout-align=\"center\"}\n<iframe style=\"margin: 0px auto; min-width: 100%; overflow: hidden; height: 801px;\" id=\"learnr-05-lesson-theme2\" class=\"interactive\" src=\"https://andrewheiss.shinyapps.io/datavizm20_05-themes-2/\" scrolling=\"no\" frameborder=\"no\" onload='iFrameResize({}, \"#learnr-05-lesson-theme2\")'></iframe>\n:::\n\n\nHopefully that was also fairly straightforward!\n\n\n## Modifying plot elements with `theme()`\n\nUsing a complete theme like `theme_minimal()` or `theme_bw()` is a great starting point for getting a nice, clean, well designed plot. You'll often need to make adjustments to smaller, more specific parts of the plot though. To do this, you can use the `theme()` function.\n\n`theme()` is a massive function and has perhaps the most possible arguments of any function in R. It is impossible to remember everything it can possibly do. Fortunately its documentation is incredible. Run `?theme` in your R console to see the help page, or [go to this page online](https://ggplot2.tidyverse.org/reference/theme.html). \n\n### Deal with general plot elements\n\nA few arguments to `theme()` don't use any special function—you can just specify settings with text like `\"bottom\"` or `\"right\"`\n\n::: {.callout-important}\n### Your turn\n\nLook at the [documentation for `theme()` online](https://ggplot2.tidyverse.org/reference/theme.html). Make this plot's legend appear on the bottom instead of the left.\n\n:::\n\n\n::: {.cell layout-align=\"center\"}\n<iframe style=\"margin: 0px auto; min-width: 100%; overflow: hidden; height: 801px;\" id=\"learnr-05-lesson-theme3\" class=\"interactive\" src=\"https://andrewheiss.shinyapps.io/datavizm20_05-themes-3/\" scrolling=\"no\" frameborder=\"no\" onload='iFrameResize({}, \"#learnr-05-lesson-theme3\")'></iframe>\n:::\n\n\n### Disable elements completely with `element_blank()`\n\nAny plot element can be disabled by using `element_blank()`. For instance, if you want to remove the axis ticks, you can use `theme(axis.ticks = element_blank())`. \n\n::: {.callout-important}\n### Your turn\n\nLook at the [documentation for `theme()` online](https://ggplot2.tidyverse.org/reference/theme.html). Disable the panel grid in this plot.\n\n:::\n\n\n::: {.cell layout-align=\"center\"}\n<iframe style=\"margin: 0px auto; min-width: 100%; overflow: hidden; height: 801px;\" id=\"learnr-05-lesson-theme4\" class=\"interactive\" src=\"https://andrewheiss.shinyapps.io/datavizm20_05-themes-4/\" scrolling=\"no\" frameborder=\"no\" onload='iFrameResize({}, \"#learnr-05-lesson-theme4\")'></iframe>\n:::\n\n\nYou can also target more specific plot elements. You can specify something like `axis.text`, which applies to all axis text, or you can use `axis.text.y` to only target the text on the y-axis.\n\n::: {.callout-important}\n### Your turn\n\nLook at the [documentation for `theme()` online](https://ggplot2.tidyverse.org/reference/theme.html). Make the following changes to this plot:\n\n- Disable the major panel grid for the x-axis\n- Disable the minor panel grid for the x-axis\n- Disable the minor panel grid for the y-axis. \n\nYou should only have three horizontal lines for the grid.\n\n:::\n\n\n::: {.cell layout-align=\"center\"}\n<iframe style=\"margin: 0px auto; min-width: 100%; overflow: hidden; height: 801px;\" id=\"learnr-05-lesson-theme5\" class=\"interactive\" src=\"https://andrewheiss.shinyapps.io/datavizm20_05-themes-5/\" scrolling=\"no\" frameborder=\"no\" onload='iFrameResize({}, \"#learnr-05-lesson-theme5\")'></iframe>\n:::\n\n\n---\n\nAlmost every other plot element fits into one of three categories: a rectangle, a line, or text. Changing the settings on these elements requires specific functions that correspond to these categories.\n\n### Deal with borders and backgrounds with `element_rect()`\n\nThings like the plot background or the panel background or the legend background are rectangles and can be manipulated with `element_rect()`. If you want the legend box to be yellow with a thin black border, you would use `theme(legend.box.background = element_rect(fill = \"yellow\", color = \"black\", linewidth = 1)`.\n\n::: {.callout-important}\n### Your turn\n\nLook at the [documentation for `theme()`](https://ggplot2.tidyverse.org/reference/theme.html) and the [documentation for `element()`](https://ggplot2.tidyverse.org/reference/element.html) online. Make the following changes to this plot:\n\n- Fill the plot background with <span style=\"color: #F2D8CE\">#F2D8CE</span>\n- Fill the panel background with <span style=\"color: #608BA6\">#608BA6</span>, and make the border <span style=\"color: #184759\">#184759</span> with linewidth = 5\n\nThis will be a fairly ugly plot.\n\n:::\n\n\n::: {.cell layout-align=\"center\"}\n<iframe style=\"margin: 0px auto; min-width: 100%; overflow: hidden; height: 801px;\" id=\"learnr-05-lesson-theme6\" class=\"interactive\" src=\"https://andrewheiss.shinyapps.io/datavizm20_05-themes-6/\" scrolling=\"no\" frameborder=\"no\" onload='iFrameResize({}, \"#learnr-05-lesson-theme6\")'></iframe>\n:::\n\n\n### Deal with lines with `element_line()`\n\nThings like the panel grid, tick marks, and axis lines are all lines and can be manipulated with `element_line()`. If you want the x-axis line to be a dotted orange like, you would use `theme(axis.line.x = element_line(color = \"orange\", linetype = \"dotted\")`.\n\n::: {.callout-important}\n### Your turn\n\nLook at the [documentation for `theme()`](https://ggplot2.tidyverse.org/reference/theme.html) and the [documentation for `element()`](https://ggplot2.tidyverse.org/reference/element.html) online. Make the following changes to this plot:\n\n- Make the major panel gridlines blue and dashed with linewidth = 1\n\nThis will also be a fairly ugly plot.\n\n:::\n\n\n::: {.cell layout-align=\"center\"}\n<iframe style=\"margin: 0px auto; min-width: 100%; overflow: hidden; height: 801px;\" id=\"learnr-05-lesson-theme7\" class=\"interactive\" src=\"https://andrewheiss.shinyapps.io/datavizm20_05-themes-7/\" scrolling=\"no\" frameborder=\"no\" onload='iFrameResize({}, \"#learnr-05-lesson-theme7\")'></iframe>\n:::\n\n\n### Deal with text with `element_text()`\n\nFinally, anything with text can be manipulated with `element_text()`, and you can specify all sorts of things, including font family (`family`), font weight (`face`), color (`color`), horizontal justification (`hjust`), angle (`angle`), and a bunch of other options. If you want the x-axis text to be italicized and rotated at a 45º angle, you would use `theme(axis.text.x = element_text(face = \"italic\", angle = 45))`.\n\n::: {.callout-important}\n### Your turn\n\nLook at the [documentation for `theme()`](https://ggplot2.tidyverse.org/reference/theme.html) and the [documentation for `element()`](https://ggplot2.tidyverse.org/reference/element.html) online. Make the following changes to this plot:\n\n- Make the y-axis text italic\n- Make the plot title right aligned, bold, and colored with <span style=\"color: #8C7811\">#8C7811</span>\n- Make the plot subtitle right aligned\n\n:::\n\n\n::: {.cell layout-align=\"center\"}\n<iframe style=\"margin: 0px auto; min-width: 100%; overflow: hidden; height: 801px;\" id=\"learnr-05-lesson-theme8\" class=\"interactive\" src=\"https://andrewheiss.shinyapps.io/datavizm20_05-themes-8/\" scrolling=\"no\" frameborder=\"no\" onload='iFrameResize({}, \"#learnr-05-lesson-theme8\")'></iframe>\n:::\n\n\n## Important note about ordering\n\nThings like `theme_grey()` or `theme_minimal()` are really just collections of changes to `theme()`, so the order is important when using a complete theme. If you do something like this to turn off the gridlines in the plot panel:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(...) +\n  geom_point(...) +\n  theme(panel.grid = element_blank()) +\n  theme_bw()\n```\n:::\n\n\n…you'll still have panel gridlines! That's because `theme_bw()` turns them on, and you typed it after you turned it off. If you want to use both `theme_bw()` and remove the gridlines, you need to make sure any theme adjustments come after `theme_bw()`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(...) +\n  geom_point(...) +\n  theme_bw() +\n  theme(panel.grid = element_blank())\n```\n:::\n\n\n## Fonts\n\nYou can use `theme()` to change the fonts as well, though sometimes it's a little tricky to get R to see the fonts on your computer—especially if you use Windows. [This detailed blog post](https://www.andrewheiss.com/blog/2017/09/27/working-with-r-cairo-graphics-custom-fonts-and-ggplot/) explains how to work with custom fonts in ggplot and shows how to get it set up on Windows. It should Just Work™ on macOS.\n\nIn short, as long as you load the fonts correctly, you can specify different fonts either in a complete theme like `theme_minimal(base_family = \"Comic Sans MS\")` or in `theme()` like `theme(plot.title = element_text(family = \"Papyrus\"))`.\n\n\n## Reusing themes\n\nIf you want to repeat specific theme settings throughout a document, you can save yourself a ton of typing by storing the results of `theme()` to an object and reusing it. For instance, suppose you want your plots to be based on theme_minimal, have right aligned title and subtitle text, have the legend at the bottom, and have no minor gridlines. You can save all of that into an object named `my_neato_theme` or something, and then reuse it:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy_neato_theme <- theme_minimal() +\n  theme(plot.title = element_text(hjust = 1),\n        plot.subtitle = element_text(hjust = 1),\n        legend.position = \"bottom\",\n        panel.grid.minor = element_blank())\n\n# Make one plot\nggplot(data = mpg,\n       mapping = aes(x = displ, y = hwy, color = drv)) +\n  geom_point(size = 3) +\n  labs(title = \"Engine displacement and highway MPG\",\n       subtitle = \"Heavier cars get worse mileage\") +\n  my_neato_theme\n```\n\n::: {.cell-output-display}\n![](05-lesson_files/figure-html/saved-theme-1.png){fig-align='center' width=576}\n:::\n\n```{.r .cell-code}\n\n# Make another plot\nggplot(data = mpg,\n       mapping = aes(x = displ, y = hwy, color = cty)) +\n  geom_point(size = 3) +\n  labs(title = \"Engine displacement and highway MPG\",\n       subtitle = \"Points colored by city MPG\") +\n  my_neato_theme\n```\n\n::: {.cell-output-display}\n![](05-lesson_files/figure-html/saved-theme-2.png){fig-align='center' width=576}\n:::\n:::\n\n\n\n## Saving plots\n\nSo far, all your plots have ended up either in RStudio or in a knitted HTML, Word, or PDF document. But what if you want to save just the plot to your computer so you can send it out to the world?! You could take a screenshot, but that won't provide the highest resolution, and that will only save the plot as a bitmap-based PNG, not an infinitely resizable vector-based PDF!\n\nFortunately it's pretty easy to save a plot using the special `ggsave()` function. You can specify whatever dimensions you want and whatever file type you want and save the standalone plot to your computer. You should look at the [documentation for `ggsave()`](https://ggplot2.tidyverse.org/reference/ggsave.html) for complete details of all the different options and arguments it can take. Typically, you do something like this.\n\nFirst create a plot and store it as an object. We haven't done that yet in this lesson—so far we've just run `ggplot()` and seen the output immediately. If you save the output of `ggplot()` to an object, you actually won't see anything until you run the name of the object.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\na_cool_plot <- ggplot(data = mpg,\n                      mapping = aes(x = displ, y = hwy, color = drv)) +\n  geom_point(size = 3) +\n  labs(title = \"Engine displacement and highway MPG\",\n       subtitle = \"Heavier cars get worse mileage\")\n\n# Make sure you run this so you can see the plot\na_cool_plot\n```\n\n::: {.cell-output-display}\n![](05-lesson_files/figure-html/ggsave-example-1.png){fig-align='center' width=576}\n:::\n:::\n\n\nNext you can feed your saved plot to `ggsave()` to save it. It will automatically determine how to save it based on the filename you provide. If you tell it to be `something.png`, R will make a PNG; if you tell it to be `something.pdf`, R will make a PDF, and so on. Common types are PDF, PNG, JPEG (ew though), SVG, TIFF, and others.\n\nYou can also save the plot as multiple files. I typically make PNG and PDF versions of any plots I export like so:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggsave(filename = \"a_cool_plot.pdf\", plot = a_cool_plot,\n       width = 6, height = 4.5, units = \"in\")\n\nggsave(filename = \"a_cool_plot.png\", plot = a_cool_plot,\n       width = 6, height = 4.5, units = \"in\")\n```\n:::\n\n\nFrom a file management perspective, it often makes sense to store all your output in a separate folder in your project, like `output` or `figures` or something. If you want to put saved images in a subfolder, include the name in the file name:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggsave(filename = \"figures/a_cool_plot.png\", plot = a_cool_plot,\n       width = 6, height = 4.5, units = \"in\")\n```\n:::\n\n\nAnd finally, if you're using custom fonts, you need to add one bit of wizardry to get the fonts to embed correctly in PDFs. This is something you just have to memorize or copy and paste a lot—if you want to know the full details, [see this blog post](https://www.andrewheiss.com/blog/2017/09/27/working-with-r-cairo-graphics-custom-fonts-and-ggplot/). In short, R's default PDF writer doesn't know how to embed fonts and will panic if you make it try. R can use a different PDF-writing engine named Cairo that embeds fonts just fine, though, so you need to tell `ggsave()` to use it:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggsave(filename = \"figures/a_cool_plot.pdf\", plot = a_cool_plot,\n       width = 6, height = 4.5, units = \"in\", device = cairo_pdf)\n```\n:::\n\n\n",
    "supporting": [
      "05-lesson_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}