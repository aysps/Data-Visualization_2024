{
  "hash": "9933125fff2a0d46d7216507c26da75f",
  "result": {
    "markdown": "---\ntitle: \"Themes\"\ndate: \"2023-09-18\"\ndate_end: \"2023-09-22\"\n---\n\n\n\n\nThe [lesson for this week's session](/lesson/05-lesson.qmd) is a fairly comprehensive introduction to using the `theme()` function in ggplot, and [this page by Henry Wang](https://henrywang.nl/ggplot2-theme-elements-demonstration/) is a good cheat sheet for remembering which theme elements are which on a plot—and I like [this PDF cheatsheet by Clara Granell](https://github.com/claragranell/ggplot2/blob/main/ggplot_theme_system_cheatsheet.pdf) even better.\n\nFor [your exercise](/assignment/05-exercise.qmd), you're going to create the world's ugliest plot. For this example, we'll use the principles of CRAP to make a great theme. \n\nI'm going to build the theme semi-incrementally here. Instead of showing how the plot updates with each change in setting, I do most of the updates all at once, with tons of comments explaining what each line does. **Importantly**, I did *not* write this all at once. When you're tinkering with themes, you generally start with something like `theme_minimal()` or `theme_bw()` and then gradually add new things to `theme()`, like modifying `plot.title`, then `plot.subtitle`, etc. It's a very iterative process with lots of tinkering. Because of this, **there is no live-coding video for this example**—it would be incredibly long and boring. Instead, look through each of the lines and see what they're doing.\n\nFor this example, I'm going to use the `gapminder` dataset that we've been using throughout this week. Instead of using the CSV file like we did before, we'll load the data from the {gapminder} package. Once you run `library(gapminder)`, you'll automatically have access to a dataset named `gapminder`.\n\nI'm also going to use the [Roboto Condensed font](https://fonts.google.com/specimen/Roboto+Condensed) in the theme. Download and install it on your computer if you don't have it.\n\n\n## Basic plot\n\nWhen I'm creating a theme, I like to use a basic plot with everything that might show up, complete with a title, subtitle, caption, legend, facets, and other elements.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)  # For ggplot, dplyr, and friends\nlibrary(gapminder)  # For gapminder data\nlibrary(scales)     # For nice axis labels\n\ngapminder_filtered <- gapminder %>% \n  filter(year > 2000)\n\nbase_plot <- ggplot(data = gapminder_filtered,\n                    mapping = aes(x = gdpPercap, y = lifeExp, \n                                  color = continent, size = pop)) +\n  geom_point() +\n  # Use dollars, and get rid of the cents part (i.e. $300 instead of $300.00)\n  scale_x_log10(labels = label_dollar(accuracy = 1)) +\n  # Format with commas\n  scale_size_continuous(labels = label_comma()) +\n  # Use viridis\n  scale_color_viridis_d(option = \"plasma\", end = 0.9) +\n  labs(x = \"GDP per capita\", y = \"Life expectancy\",\n       color = \"Continent\", size = \"Population\",\n       title = \"Here's a cool title\",\n       subtitle = \"And here's a neat subtitle\",\n       caption = \"Source: The Gapminder Project\") +\n  facet_wrap(vars(year))\n\nbase_plot\n```\n\n::: {.cell-output-display}\n![](05-example_files/figure-html/basic-plot-1.png){fig-align='center' width=768}\n:::\n:::\n\n\nNow we have `base_plot` to work with. Here's what it looks like with `theme_minimal()` applied to it:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbase_plot +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](05-example_files/figure-html/base-minimal-1.png){fig-align='center' width=768}\n:::\n:::\n\n\nThat gets rid of the grey background and is a good start, but we can make lots of improvements. First let's deal with the gridlines. There are too many. We can get rid of the minor gridlines with by setting them to `element_blank()`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbase_plot +\n  theme_minimal() +\n  theme(panel.grid.minor = element_blank())\n```\n\n::: {.cell-output-display}\n![](05-example_files/figure-html/theme1-1.png){fig-align='center' width=768}\n:::\n:::\n\n\nNext let's add some typographic contrast. We'll use Roboto Condensed Regular as the base font. Before trying this, make sure you do the following:\n\n**On macOS**:\n\n- Run `capabilities()` in your console and verify that `TRUE` shows up under `cairo`\n- If not, download and install [XQuartz](https://www.xquartz.org/)\n\n**On Windows**:\n\n- Run `windowsFonts()` in your console and you'll see a list of all the fonts you can use with R. It's not a very big list.\n\n  ```default\n  #> $serif\n  #> [1] \"TT Times New Roman\"\n  #>\n  #> $sans\n  #> [1] \"TT Arial\"\n  #> \n  #> $mono\n  #> [1] \"TT Courier New\"\n  ```\n  \n  You can add Roboto Condensed to your current R session by running this in your console:\n\n\n  ::: {.cell layout-align=\"center\"}\n  \n  ```{.r .cell-code}\n  windowsFonts(`Roboto Condensed` = windowsFont(\"Roboto Condensed\"))\n  ```\n  :::\n\n\n  Now if you run `windowsFonts()`, you'll see it in the list:\n  \n  ```default\n  #> $serif\n  #> [1] \"TT Times New Roman\"\n  #>\n  #> $sans\n  #> [1] \"TT Arial\"\n  #> \n  #> $mono\n  #> [1] \"TT Courier New\"\n  #>\n  #> $`Roboto Condensed`\n  #> [1] \"Roboto Condensed\"\n  ```\n\n  This only takes effect for your current R session, so if you are knitting a document or if you ever plan on closing RStudio, you'll need to incorporate this font creation code into your script.\n\nWe'll use the font as the `base_family` argument. Note how I make it bold with `face` and change the size with `rel()`. Instead of manually setting some arbitrary size, I use `rel()` to resize the text in relation to the `base_size` argument. Using `rel(1.7)` means 1.7 × `base_size`, or 20.4 That will rescale according to whatever `base_size` is—if I shrink it to `base_size = 8`, the title will scale down accordingly.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_with_good_typography <- base_plot +\n  theme_minimal(base_family = \"Roboto Condensed\", base_size = 12) +\n  theme(panel.grid.minor = element_blank(),\n        # Bold, bigger title\n        plot.title = element_text(face = \"bold\", size = rel(1.7)),\n        # Plain, slightly bigger subtitle that is grey\n        plot.subtitle = element_text(face = \"plain\", size = rel(1.3), color = \"grey70\"),\n        # Italic, smaller, grey caption that is left-aligned\n        plot.caption = element_text(face = \"italic\", size = rel(0.7), \n                                    color = \"grey70\", hjust = 0),\n        # Bold legend titles\n        legend.title = element_text(face = \"bold\"),\n        # Bold, slightly larger facet titles that are left-aligned for the sake of repetition\n        strip.text = element_text(face = \"bold\", size = rel(1.1), hjust = 0),\n        # Bold axis titles\n        axis.title = element_text(face = \"bold\"),\n        # Add some space above the x-axis title and make it left-aligned\n        axis.title.x = element_text(margin = margin(t = 10), hjust = 0),\n        # Add some space to the right of the y-axis title and make it top-aligned\n        axis.title.y = element_text(margin = margin(r = 10), hjust = 1))\nplot_with_good_typography\n## Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n## not found in Windows font database\n\n## Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n## not found in Windows font database\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n## Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n## not found in Windows font database\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n## Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n## not found in Windows font database\n\n## Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n## not found in Windows font database\n\n## Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n## not found in Windows font database\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\n## font family not found in Windows font database\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\n## font family not found in Windows font database\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n```\n\n::: {.cell-output-display}\n![](05-example_files/figure-html/theme2-1.png){fig-align='center' width=768}\n:::\n:::\n\n\nWhoa. That gets us most of the way there! We have good contrast with the typography, with the strong bold and the lighter regular font (**✓ contrast**). Everything is aligned left (**✓ alignment** and **✓ repetition**). By moving the axis titles a little bit away from the labels, we've enhanced proximity, since they were too close together (**✓ proximity**). We repeat grey in both the caption and the subtitle (**✓ repetition**).\n\nThe only thing I don't like is that the 2002 isn't quite aligned with the title and subtitle. This is because the facet labels are in boxes along the top of each plot, and in some themes (like `theme_grey()` and `theme_bw()`) those facet labels have grey backgrounds. We can turn off the margin in those boxes, or we can add a background, which will then be perfectly aligned with the title and subtitle.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_with_good_typography +\n  # Add a light grey background to the facet titles, with no borders\n  theme(strip.background = element_rect(fill = \"grey90\", color = NA),\n        # Add a thin grey border around all the plots to tie in the facet titles\n        panel.border = element_rect(color = \"grey90\", fill = NA))\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\n## font family not found in Windows font database\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\n## font family not found in Windows font database\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n```\n\n::: {.cell-output-display}\n![](05-example_files/figure-html/theme3-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n👨‍🍳 💋! That looks great!\n\nTo save ourselves time in the future, we can store this whole thing as an object that we can then reuse on other plots:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy_pretty_theme <- theme_minimal(base_family = \"Roboto Condensed\", base_size = 12) +\n  theme(panel.grid.minor = element_blank(),\n        # Bold, bigger title\n        plot.title = element_text(face = \"bold\", size = rel(1.7)),\n        # Plain, slightly bigger subtitle that is grey\n        plot.subtitle = element_text(face = \"plain\", size = rel(1.3), color = \"grey70\"),\n        # Italic, smaller, grey caption that is left-aligned\n        plot.caption = element_text(face = \"italic\", size = rel(0.7), \n                                    color = \"grey70\", hjust = 0),\n        # Bold legend titles\n        legend.title = element_text(face = \"bold\"),\n        # Bold, slightly larger facet titles that are left-aligned for the sake of repetition\n        strip.text = element_text(face = \"bold\", size = rel(1.1), hjust = 0),\n        # Bold axis titles\n        axis.title = element_text(face = \"bold\"),\n        # Add some space above the x-axis title and make it left-aligned\n        axis.title.x = element_text(margin = margin(t = 10), hjust = 0),\n        # Add some space to the right of the y-axis title and make it top-aligned\n        axis.title.y = element_text(margin = margin(r = 10), hjust = 1),\n        # Add a light grey background to the facet titles, with no borders\n        strip.background = element_rect(fill = \"grey90\", color = NA),\n        # Add a thin grey border around all the plots to tie in the facet titles\n        panel.border = element_rect(color = \"grey90\", fill = NA))\n```\n:::\n\n\nNow we can use it on any plot. Remember that first plot you made in your exercise from session 1 with the `cars` dataset? Let's throw this theme on it! (only here the dataset is named `mpg` instead of `cars`; the `mpg` dataset is loaded invisibly whenever you load ggplot)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmpg_example <- ggplot(data = mpg, \n                      mapping = aes(x = displ, y = hwy, color = class)) +\n  geom_point(size = 3) + \n  scale_color_viridis_d() +\n  facet_wrap(vars(drv)) +\n  labs(x = \"Displacement\", y = \"Highway MPG\", color = \"Car class\",\n       title = \"Heavier cars get worse mileage\",\n       subtitle = \"Except two-seaters?\",\n       caption = \"Here's a caption\") +\n  my_pretty_theme\n\nmpg_example\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\n## font family not found in Windows font database\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\n## font family not found in Windows font database\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\n## family not found in Windows font database\n```\n\n::: {.cell-output-display}\n![](05-example_files/figure-html/mpg-example-1.png){fig-align='center' width=768}\n:::\n:::\n\n\nSuper neat!\n\n\n## Nice pre-built themes\n\nThis custom theme we just made is just one iteration of a theme. There are countless ways to tinker with a theme and have it meet the different CRAP principles. People have even published their own themes in different R packages. Check these out to see lots of different examples:\n\n- [{hrbrthemes}](https://github.com/hrbrmstr/hrbrthemes)\n- [{ggthemes}](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/)\n- [{ggthemr}](https://github.com/cttobin/ggthemr)\n- [{ggtech}](https://github.com/ricardo-bion/ggtech)\n- [{tvthemes}](https://ryo-n7.github.io/2019-05-16-introducing-tvthemes-package/)\n- [{ggpomological}](https://www.garrickadenbuie.com/project/ggpomological/) (this one is incredible!)\n\nCheck [this blog post](https://rfortherestofus.com/2019/08/themes-to-improve-your-ggplot-figures/) for examples of a bunch of others\n\n\n## Bonus: {ggthemeassist}\n\nIf you're intimidated by constantly referring to the documentation and figuring out what little line of code affects which part of the graph, install and check out the {ggthemeassist} package. It provides an interactive menu for manipulating different theme elements, and then generates all the corresponding code, which is really magical.\n\nHere's a brief example of how to use it.\n\n<div class=\"ratio ratio-16x9\">\n<iframe src=\"https://www.youtube.com/embed/9ldrTCUSReM\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"></iframe>\n</div>\n\n\n## Saving plots\n\nIf we want to save these plots, we can use `ggsave()`. For that to work, we need to store the plot as an object, which I already did in the examples above:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nname_of_plot_object <- ggplot(...)\n```\n:::\n\n\nWe then feed our saved plot object to `ggsave()` and specify the filename and dimensions we want to use. If we're using PNG, we don't need to worry about any extra options. If we're using PDF, [we need to tell R to use the Cairo PDF writing engine](https://www.andrewheiss.com/blog/2017/09/27/working-with-r-cairo-graphics-custom-fonts-and-ggplot/) instead of R's normal one, since R's normal one can't deal with custom fonts.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Add my_pretty_theme to the gapminder base_plot and save as an object\nfinal_gampinder_plot <- base_plot +\n  my_pretty_theme\n\n# Save as PNG and PDF\nggsave(\"fancy_gapminder.png\", final_gampinder_plot,\n       width = 8, height = 5, units = \"in\")\nggsave(\"fancy_gapminder.pdf\", final_gampinder_plot,\n       width = 8, height = 5, units = \"in\", device = cairo_pdf)\n\n# Save the mpg plot as PNG and PDF\nggsave(\"fancy_mpg.png\", mpg_example,\n       width = 8, height = 5, units = \"in\")\nggsave(\"fancy_mpg.pdf\", mpg_example,\n       width = 8, height = 5, units = \"in\", device = cairo_pdf)\n```\n:::\n",
    "supporting": [
      "05-example_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}