{
  "hash": "30153a6c13d8453c30ab8f309238f9e7",
  "result": {
    "markdown": "---\ntitle: \"Annotations\"\ndate: \"2023-10-16\"\ndate_end: \"2023-10-20\"\n---\n\n\n\n\nFor this example, we're again going to use cross-national data from the [World Bank's Open Data portal](https://data.worldbank.org/). We'll download the data with the [{WDI} package](https://cran.r-project.org/web/packages/WDI/index.html).\n\nIf you want to skip the data downloading, you can download the data below (you'll likely need to right click and choose \"Save Link As…\"):\n\n- [{{< fa file-csv >}} `wdi_annotations.csv`](/files/data/processed_data/wdi_annotations.csv)\n\n\n## Live coding example\n\n<div class=\"ratio ratio-16x9\">\n<iframe src=\"https://www.youtube.com/embed/gMSMsOy7KF0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"></iframe>\n</div>\n\n\n::: {.callout-important}\n### Slight differences from the video\n\nThis is a slightly cleaned up version of the code from the video.\n:::\n\n\n\n\n\n\n## Load data\n\nFirst, we load the libraries we'll be using:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)  # For ggplot, dplyr, and friends\nlibrary(WDI)        # Get data from the World Bank\nlibrary(ggrepel)    # For non-overlapping labels\nlibrary(ggtext)     # For fancier text handling\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nindicators <- c(population = \"SP.POP.TOTL\",  # Population\n                co2_emissions = \"EN.ATM.CO2E.PC\",  # CO2 emissions\n                gdp_per_cap = \"NY.GDP.PCAP.KD\")  # GDP per capita\n\nwdi_co2_raw <- WDI(country = \"all\", indicators, extra = TRUE, \n                   start = 1995, end = 2015)\n```\n:::\n\n\n\n\nThen we clean the data by removing non-country countries:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwdi_clean <- wdi_co2_raw %>% \n  filter(region != \"Aggregates\")\n```\n:::\n\n\n## Clean and reshape data\n\nNext we'll do some substantial filtering and reshaping so that we can end up with the rankings of CO~2~ emissions in 1995 and 2014. I annotate as much as possible below so you can see what's happening in each step.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nco2_rankings <- wdi_clean %>% \n  # Get rid of smaller countries\n  filter(population > 200000) %>% \n  # Only look at two years\n  filter(year %in% c(1995, 2014)) %>% \n  # Get rid of all the rows that have missing values in co2_emissions\n  drop_na(co2_emissions) %>% \n  # Look at each year individually and rank countries based on their emissions that year\n  group_by(year) %>% \n  mutate(ranking = rank(co2_emissions)) %>% \n  ungroup() %>% \n  # Only select a handful of columns, mostly just the newly created \"ranking\"\n  # column and some country identifiers\n  select(iso3c, country, year, region, income, ranking) %>% \n  # Right now the data is tidy and long, but we want to widen it and create\n  # separate columns for emissions in 1995 and in 2014. pivot_wider() will make\n  # new columns based on the existing \"year\" column (that's what `names_from`\n  # does), and it will add \"rank_\" as the prefix, so that the new columns will\n  # be \"rank_1995\" and \"rank_2014\". The values that go in those new columns will\n  # come from the existing \"ranking\" column\n  pivot_wider(names_from = year, names_prefix = \"rank_\", values_from = ranking) %>% \n  # Find the difference in ranking between 2014 and 1995\n  mutate(rank_diff = rank_2014 - rank_1995) %>% \n  # Remove all rows where there's a missing value in the rank_diff column\n  drop_na(rank_diff) %>% \n  # Make an indicator variable that is true of the absolute value of the\n  # difference in rankings is greater than 25. 25 is arbitrary here—that just\n  # felt like a big change in rankings\n  mutate(big_change = ifelse(abs(rank_diff) >= 25, TRUE, FALSE)) %>% \n  # Make another indicator variable that indicates if the rank improved by a\n  # lot, worsened by a lot, or didn't change much. We use the case_when()\n  # function, which is like a fancy version of ifelse() that takes multiple\n  # conditions. This is how it generally works:\n  #\n  # case_when(\n  #  some_test ~ value_if_true,\n  #  some_other_test ~ value_if_true,\n  #  TRUE ~ value_otherwise\n  #)\n  mutate(better_big_change = case_when(\n    rank_diff <= -25 ~ \"Rank improved\",\n    rank_diff >= 25 ~ \"Rank worsened\",\n    TRUE ~ \"Rank changed a little\"\n  ))\n```\n:::\n\n\nHere's what that reshaped data looked like before:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhead(wdi_clean)\n## # A tibble: 6 × 15\n##   country     iso2c iso3c  year status lastupdated population co2_emissions gdp_per_cap region     capital longitude latitude income     lending\n##   <chr>       <chr> <chr> <dbl> <lgl>  <date>           <dbl>         <dbl>       <dbl> <chr>      <chr>       <dbl>    <dbl> <chr>      <chr>  \n## 1 Afghanistan AF    AFG    1995 NA     2023-12-18    16418912        0.0888         NA  South Asia Kabul        69.2     34.5 Low income IDA    \n## 2 Afghanistan AF    AFG    2015 NA     2023-12-18    33753499        0.298         567. South Asia Kabul        69.2     34.5 Low income IDA    \n## 3 Afghanistan AF    AFG    2008 NA     2023-12-18    26427199        0.166         419. South Asia Kabul        69.2     34.5 Low income IDA    \n## 4 Afghanistan AF    AFG    1996 NA     2023-12-18    17106595        0.0823         NA  South Asia Kabul        69.2     34.5 Low income IDA    \n## 5 Afghanistan AF    AFG    2009 NA     2023-12-18    27385307        0.240         490. South Asia Kabul        69.2     34.5 Low income IDA    \n## 6 Afghanistan AF    AFG    2007 NA     2023-12-18    25903301        0.110         411. South Asia Kabul        69.2     34.5 Low income IDA\n```\n:::\n\n\nAnd here's what it looks like now:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhead(co2_rankings)\n## # A tibble: 6 × 9\n##   iso3c country     region                     income              rank_1995 rank_2014 rank_diff big_change better_big_change    \n##   <chr> <chr>       <chr>                      <chr>                   <dbl>     <dbl>     <dbl> <lgl>      <chr>                \n## 1 AFG   Afghanistan South Asia                 Low income                 18        26         8 FALSE      Rank changed a little\n## 2 ALB   Albania     Europe & Central Asia      Upper middle income        50        77        27 TRUE       Rank worsened        \n## 3 DZA   Algeria     Middle East & North Africa Lower middle income        94       106        12 FALSE      Rank changed a little\n## 4 AGO   Angola      Sub-Saharan Africa         Lower middle income        62        62         0 FALSE      Rank changed a little\n## 5 ARG   Argentina   Latin America & Caribbean  Upper middle income        99       112        13 FALSE      Rank changed a little\n## 6 ARM   Armenia     Europe & Central Asia      Upper middle income        67        79        12 FALSE      Rank changed a little\n```\n:::\n\n\n## Plot the data and annotate\n\nI use IBM Plex Sans in this plot. You can [download it from Google Fonts](https://fonts.google.com/specimen/IBM+Plex+Sans).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# These three functions make it so all geoms that use text, label, and\n# label_repel will use IBM Plex Sans as the font. Those layers are *not*\n# influenced by whatever you include in the base_family argument in something\n# like theme_bw(), so ordinarily you'd need to specify the font in each\n# individual annotate(geom = \"text\") layer or geom_label() layer, and that's\n# tedious! This removes that tediousness.\nupdate_geom_defaults(\"text\", list(family = \"IBM Plex Sans\"))\nupdate_geom_defaults(\"label\", list(family = \"IBM Plex Sans\"))\nupdate_geom_defaults(\"label_repel\", list(family = \"IBM Plex Sans\"))\n\nggplot(co2_rankings,\n       aes(x = rank_1995, y = rank_2014)) +\n  # Add a reference line that goes from the bottom corner to the top corner\n  annotate(geom = \"segment\", x = 0, xend = 175, y = 0, yend = 175) +\n  # Add points and color them by the type of change in rankings\n  geom_point(aes(color = better_big_change)) +\n  # Add repelled labels. Only use data where big_change is TRUE. Fill them by\n  # the type of change (so they match the color in geom_point() above) and use\n  # white text\n  geom_label_repel(data = filter(co2_rankings, big_change == TRUE),\n                   aes(label = country, fill = better_big_change),\n                   color = \"white\") +\n  # Add notes about what the outliers mean in the bottom left and top right\n  # corners. These are italicized and light grey. The text in the bottom corner\n  # is justified to the right with hjust = 1, and the text in the top corner is\n  # justified to the left with hjust = 0\n  annotate(geom = \"text\", x = 170, y = 6, label = \"Outliers improving\", \n           fontface = \"italic\", hjust = 1, color = \"grey50\") +\n  annotate(geom = \"text\", x = 2, y = 170, label = \"Outliers worsening\", \n           fontface = \"italic\", hjust = 0, color = \"grey50\") +\n  # Add mostly transparent rectangles in the bottom right and top left corners\n  annotate(geom = \"rect\", xmin = 0, xmax = 25, ymin = 0, ymax = 25, \n           fill = \"#2ECC40\", alpha = 0.25) +\n  annotate(geom = \"rect\", xmin = 150, xmax = 175, ymin = 150, ymax = 175, \n           fill = \"#FF851B\", alpha = 0.25) +\n  # Add text to define what the rectangles abovee actually mean. The \\n in\n  # \"highest\\nemitters\" will put a line break in the label\n  annotate(geom = \"text\", x = 40, y = 6, label = \"Lowest emitters\", \n           hjust = 0, color = \"#2ECC40\") +\n  annotate(geom = \"text\", x = 162.5, y = 135, label = \"Highest\\nemitters\", \n           hjust = 0.5, vjust = 1, lineheight = 1, color = \"#FF851B\") +\n  # Add arrows between the text and the rectangles. These use the segment geom,\n  # and the arrows are added with the arrow() function, which lets us define the\n  # angle of the arrowhead and the length of the arrowhead pieces. Here we use\n  # 0.5 lines, which is a unit of measurement that ggplot uses internally (think\n  # of how many lines of text fit in the plot). We could also use unit(1, \"cm\")\n  # or unit(0.25, \"in\") or anything else\n  annotate(geom = \"segment\", x = 38, xend = 20, y = 6, yend = 6, color = \"#2ECC40\", \n           arrow = arrow(angle = 15, length = unit(0.5, \"lines\"))) +\n  annotate(geom = \"segment\", x = 162.5, xend = 162.5, y = 140, yend = 155, color = \"#FF851B\", \n           arrow = arrow(angle = 15, length = unit(0.5, \"lines\"))) +\n  # Use three different colors for the points\n  scale_color_manual(values = c(\"grey50\", \"#0074D9\", \"#FF4136\")) +\n  # Use two different colors for the filled labels. There are no grey labels, so\n  # we don't have to specify that color\n  scale_fill_manual(values = c(\"#0074D9\", \"#FF4136\")) +\n  # Make the x and y axes expand all the way to the edges of the plot area and\n  # add breaks every 25 units from 0 to 175\n  scale_x_continuous(expand = c(0, 0), breaks = seq(0, 175, 25)) +\n  scale_y_continuous(expand = c(0, 0), breaks = seq(0, 175, 25)) +\n  # Add labels! There are a couple fancy things here.\n  # 1. In the title we wrap the 2 of CO2 in the HTML <sub></sub> tag so that the\n  #    number gets subscripted. The only way this will actually get parsed as \n  #    HTML is if we tell the plot.title to use element_markdown() in the \n  #    theme() function, and element_markdown() comes from the ggtext package.\n  # 2. In the subtitle we bold the two words **improved** and **worsened** using\n  #    Markdown asterisks. We also wrap these words with HTML span tags with \n  #    inline CSS to specify the color of the text. Like the title, this will \n  #    only be processed and parsed as HTML and Markdown if we tell the p\n  #    lot.subtitle to use element_markdown() in the theme() function.\n  labs(x = \"Rank in 1995\", y = \"Rank in 2014\",\n       title = \"Changes in CO<sub>2</sub> emission rankings between 1995 and 2014\",\n       subtitle = \"Countries that <span style='color: #0074D9'>**improved**</span> or <span style='color: #FF4136'>**worsened**</span> more than 25 positions in the rankings highlighted\",\n       caption = \"Source: The World Bank.\\nCountries with populations of less than 200,000 excluded.\") +\n  # Turn off the legends for color and fill, since the subtitle includes that\n  guides(color = \"none\", fill = \"none\") +\n  # Use theme_bw() with IBM Plex Sans\n  theme_bw(base_family = \"IBM Plex Sans\") +\n  # Tell the title and subtitle to be treated as Markdown/HTML, make the title\n  # 1.6x the size of the base font, and make the subtitle 1.3x the size of the\n  # base font. Also add a little larger margin on the right of the plot so that\n  # the 175 doesn't get cut off.\n  theme(plot.title = element_markdown(face = \"bold\", size = rel(1.6)),\n        plot.subtitle = element_markdown(size = rel(1.3)),\n        plot.margin = unit(c(0.5, 1, 0.5, 0.5), units = \"lines\"))\n## Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not found in Windows font database\n\n## Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not found in Windows font database\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n\n## Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font family not found in Windows font database\n```\n\n::: {.cell-output-display}\n![](09-example_files/figure-html/build-pretty-plot-1.png){fig-align='center' width=960}\n:::\n:::\n",
    "supporting": [
      "09-example_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}