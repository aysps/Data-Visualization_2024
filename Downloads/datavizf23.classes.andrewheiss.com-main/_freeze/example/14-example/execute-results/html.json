{
  "hash": "c9004f45e525236c34e90b4c13c2e458",
  "result": {
    "markdown": "---\ntitle: \"Enhancing graphics\"\ndate: \"2023-11-27\"\ndate_end: \"2023-12-01\"\n---\n\n\n## Why enhance graphics?\n\nThe content from this week isn't really code-based at all. Instead, you're learning about how to take a plot from R and make it *fancy* in a vector editing program like [Adobe Illustrator, Affinity Designer, or Inkscape](/resource/graphics-editors.qmd).\n\nThis concept comes from a common workflow in the real world, where organizations like news outlets, think tanks, research centers, or nonprofits will publish highly polished plots in annual reports, magazines, and other types of publications. These graphics often have to follow specific in-house style guidelines and use specific colors and fonts and other design elements. Even if you don't work for a place with in-house style guides, you'll often want to make some edits to your plots by hand after you create them.\n\nThe general workflow goes like this:\n\n1. Create a plot in R and ggplot\n2. Export that plot as a vector image (either a PDF or an SVG)\n3. Edit and enhance the vector image in a vector editor, like Adobe Illustrator\n4. Export the polished version from Illustrator as either a PDF or PNG (or both)\n\nBig data-focused organizations have been using a process like this for years. Nathan Yau describes this whole process in his 2011 book [*Visualize This*](http://book.flowingdata.com/) and the book contains a bunch of tutorials to help you learn how create something in R, export it, and edit it in Illustrator.\n\nFor instance, in his first chapter, he guides you through the process of creating the skeleton of this chart in R, exporting it as a PDF, and adding all the titles and annotations and arrows and extra lines in Illustrator ([original post from 2008](https://flowingdata.com/2008/07/03/nathans-annual-hot-dog-eating-contest-kobayashi-vs-chestnut/)):\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../../../../../files/img/assignments/hot-dogs.gif){width=100%}\n:::\n:::\n\n\n## Enhancing graphics in 2023\n\nIn 2011, that was the best possible workflow because ggplot couldn't deal with subtitles, captions, repelled labels, embedded fonts, and differently-styled text (like **bold** in the middle of a title). Illustrator was the only way to do this stuff.\n\nNowadays in 2023, though, you can do nearly all of this annotating and enhancing with packages like {ggtext} and {patchwork} and {ggrepel}. You can almost perfectly replicate in-house style guides with the `theme()` function and put text and arrows and labels and text boxes wherever you want with `annotate()`. It's a brave exciting new world.\n\nYou still can't do everything with R. ggplot can't create fancy font ligatures like \"Ô¨Å\" in words that have an \"f\" followed by an \"i\", and it can't handle automatic hyphenation and full text justification, among other limitations. But these are the minorest of graphic design issues (and [the ggplot team is working on them](https://www.tidyverse.org/blog/2020/05/updates-to-ragg-and-systemfonts/)!).\n\n*That all said*, it's still often faster and easier to make edits to your graphs in Illustrator rather than fight with a reluctant `annotate()` layer that just won't put an arrow exactly where you want. So it's still a good idea to understand how to follow the standard workflow of exporting from R and enhancing in Illustrator.\n\n\n## Abbreviated example\n\nIn this video I use the code for the hot dog plot that I provide in this week's assignment to create a plot, export it, and make edits to it both in Illustrator and [Gravit Designer](https://www.designer.io/en/) (which actually no longer exists; [see here for alternatives to Illustrator](/resource/graphics-editors.qmd)). It's not a complete example at all, but I show you the general process for adding text and lines and editing plot elements.\n\n<div class=\"ratio ratio-16x9\">\n<iframe src=\"https://www.youtube.com/embed/L-tUSEMWrgE\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"></iframe>\n</div>\n",
    "supporting": [
      "14-example_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}