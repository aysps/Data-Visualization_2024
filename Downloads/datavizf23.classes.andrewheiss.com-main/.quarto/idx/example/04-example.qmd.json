{"title":"Amounts and proportions","markdown":{"yaml":{"title":"Amounts and proportions","date":"2023-09-11","date_end":"2023-09-15"},"headingText":"Live coding example","containsRefs":false,"markdown":"\n\nFor this example, we're going to use real world data to demonstrate some different ways to visualize amounts and proportions. We'll use data from the CDC and the Social Security Administration about the number of daily births in the United States from 1994–2014. [FiveThirtyEight reported a story using this data in 2016](https://fivethirtyeight.com/features/some-people-are-too-superstitious-to-have-a-baby-on-friday-the-13th/) and they posted relatively CSV files [on GitHub](https://github.com/fivethirtyeight/data/tree/master/births), so we can download and use those.\n\nIf you want to follow along with this example, you can download the data directly from [GitHub](https://github.com/fivethirtyeight/data/tree/master/births) or by using these links (you'll likely need to right click on these and choose \"Save Link As…\"):\n\n- [{{< fa file-csv >}} `US_births_1994-2003_CDC_NCHS.csv`](https://raw.githubusercontent.com/fivethirtyeight/data/master/births/US_births_1994-2003_CDC_NCHS.csv)\n- [{{< fa file-csv >}} `US_births_2000-2014_SSA.csv`](https://raw.githubusercontent.com/fivethirtyeight/data/master/births/US_births_2000-2014_SSA.csv)\n\n\n\n<div class=\"ratio ratio-16x9\">\n<iframe src=\"https://www.youtube.com/embed/zrT-ThV6U6M\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"></iframe>\n</div>\n\n\n::: {.callout-important}\n### Slight differences from the video\n\nThis is a slightly cleaned up version of the code from the video.\n:::\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(fig.width = 6, fig.height = 3.6, fig.align = \"center\", collapse = TRUE)\nset.seed(1234)\noptions(dplyr.summarise.inform = FALSE)\n```\n\n## Load data\n\nThere are two CSV files:\n\n- `US_births_1994-2003_CDC_NCHS.csv` contains U.S. births data for the years 1994 to 2003, as provided by the Centers for Disease Control and Prevention’s National Center for Health Statistics.\n- `US_births_2000-2014_SSA.csv` contains U.S. births data for the years 2000 to 2014, as provided by the Social Security Administration.\n\nSince the two datasets overlap in 2000–2003, we use Social Security Administration data for those years.\n\nWe downloaded the data from GitHub and placed the CSV files in a folder named `data`. We'll then load them with `read_csv()` and combine them into one data frame.\n\n```{r load-libraries-data-fake, eval=FALSE}\nlibrary(tidyverse)\nlibrary(scales)   # For nice labels in charts\n\nbirths_1994_1999 <- read_csv(\"data/US_births_1994-2003_CDC_NCHS.csv\") %>% \n  # Ignore anything after 2000\n  filter(year < 2000)\n\nbirths_2000_2014 <- read_csv(\"data/US_births_2000-2014_SSA.csv\")\n\nbirths_combined <- bind_rows(births_1994_1999, births_2000_2014)\n```\n\n```{r load-libraries-data-real, include=FALSE, warning=FALSE, message=FALSE}\nlibrary(tidyverse)\nlibrary(scales)\n\nbirths_1994_1999 <- read_csv(here::here(\n  \"files\", \"data\", \"external_data\",\n  \"US_births_1994-2003_CDC_NCHS.csv\"\n)) %>%\n  # Ignore anything after 2000\n  filter(year < 2000)\n\nbirths_2000_2014 <- read_csv(here::here(\n  \"files\", \"data\", \"external_data\",\n  \"US_births_2000-2014_SSA.csv\"\n))\n\nbirths_combined <- bind_rows(births_1994_1999, births_2000_2014)\n```\n\n## Wrangle data\n\nLet's look at the first few rows of the data to see what we're working with:\n\n```{r head-data}\nhead(births_combined)\n```\n\nThe columns for year and births seem straightforward and ready to use. The columns for month and day of the week could be improved if we changed them to text (i.e. January instead of 1; Tuesday instead of 3). To fix this, we can convert these columns to categorical variables, or factors in R. We can also specify that these categories (or factors) are ordered, meaning that Feburary comes after January, etc. Without ordering, R will plot them alphabetically, which isn't very helpful.\n\nWe'll make a new dataset named `births` that's based on the combined births data, but with some new columns added:\n\n```{r wrangle-data}\n# The c() function lets us make a list of values\nmonth_names <- c(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n                 \"August\", \"September\", \"October\", \"November\", \"December\")\n\nday_names <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \n               \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\")\n\nbirths <- births_combined %>% \n  # Make month an ordered factor, using the month_name list as labels\n  mutate(month = factor(month, labels = month_names, ordered = TRUE)) %>% \n  mutate(day_of_week = factor(day_of_week, labels = day_names, ordered = TRUE),\n         date_of_month_categorical = factor(date_of_month)) %>% \n  # Add a column indicating if the day is on a weekend\n  mutate(weekend = ifelse(day_of_week %in% c(\"Saturday\", \"Sunday\"), TRUE, FALSE))\n\nhead(births)\n```\n\nIf you look at the data now, you can see the columns are changed and have different types. `year` and `date_of_month` are still numbers, but `month`, and `day_of_week` are ordered factors (`ord`) and `date_of_month_categorical` is a regular factor (`fct`). Technically it's also ordered, but because it's already alphabetical (i.e. 2 naturally comes after 1), we don't need to force it to be in the right order.\n\nOur `births` data is now clean and ready to go!\n\n## Bar plot\n\nFirst we can look at a bar chart showing the total number of births each day. We need to make a smaller summarized dataset and then we'll plot it:\n\n```{r plot-bar-chart}\ntotal_births_weekday <- births %>% \n  group_by(day_of_week) %>% \n  summarize(total = sum(births))\n\nggplot(data = total_births_weekday,\n       mapping = aes(x = day_of_week, y = total, fill = day_of_week)) +\n  geom_col() +\n  # Turn off the fill legend because it's redundant\n  guides(fill = \"none\")\n```\n\nIf we fill by day of the week, we get 7 different colors, which is fine (I guess), but doesn't really help tell a story. The main story here is that there are far fewer births during weekends. If we create a new column that flags if a row is Saturday or Sunday, we can fill by that column instead:\n\n```{r plot-bar-chart-weekend}\ntotal_births_weekday <- births %>% \n  group_by(day_of_week) %>% \n  summarize(total = sum(births)) %>% \n  mutate(weekend = ifelse(day_of_week %in% c(\"Saturday\", \"Sunday\"), TRUE, FALSE))\n\nggplot(data = total_births_weekday,\n       mapping = aes(x = day_of_week, y = total, fill = weekend)) +\n  geom_col()\n```\n\nNeat! Those default colors are kinda ugly, though, so let's use the principles of preattentive processing and contrast to highlight the weekend bars:\n\n```{r plot-bar-chart-weekend-better}\nggplot(data = total_births_weekday,\n       mapping = aes(x = day_of_week, y = total, fill = weekend)) +\n  geom_col() +\n  # Use grey and orange\n  scale_fill_manual(values = c(\"grey70\", \"#f2ad22\")) +\n  # Use commas instead of scientific notation\n  scale_y_continuous(labels = label_comma()) +\n  # Turn off the legend since the title shows what the orange is\n  guides(fill = \"none\") +\n  labs(title = \"Weekends are unpopular times for giving birth\",\n       x = NULL, y = \"Total births\")\n```\n\n## Lollipop chart\n\nSince the ends of the bars are often the most important part of the graph, we can use a lollipop chart to emphasize them. We'll keep all the same code from our bar chart and make a few changes:\n\n- Color by weekend instead of fill by weekend, since points and lines are colored in ggplot, not filled\n- Switch `scale_fill_manual()` to `scale_color_manual()` and turn off the `color` legend in the `guides()` layer \n- Switch `geom_col()` to `geom_pointrange()`. The `geom_pointrange()` layer requires two additional aesthetics: `ymin` and `ymax` for the ends of the lines that come out of the point. Here we'll set `ymin` to 0 so it starts at the x-axis, and we'll set `ymax` to `total` so it ends at the point.\n\n```{r plot-lollipop-chart-weekend-better}\nggplot(data = total_births_weekday,\n       mapping = aes(x = day_of_week, y = total, color = weekend)) +\n  geom_pointrange(aes(ymin = 0, ymax = total),\n                  # Make the lines a little thicker and the dots a little bigger\n                  fatten = 5, size = 1.5) +\n  # Use grey and orange\n  scale_color_manual(values = c(\"grey70\", \"#f2ad22\")) +\n  # Use commas instead of scientific notation\n  scale_y_continuous(labels = label_comma()) +\n  # Turn off the legend since the title shows what the orange is\n  guides(color = \"none\") +\n  labs(title = \"Weekends are unpopular times for giving birth\",\n       x = NULL, y = \"Total births\")\n```\n\n\n## Strip plot\n\nHowever, we want to \\#barbarplots! (Though they're arguably okay here, since they show totals and not averages). Let's show all the data with points. We'll use the full dataset now, map x to weekday, y to births, and change `geom_col()` to `geom_point()`. We'll tell `geom_point()` to jitter the points randomly.\n\n```{r strip-plot}\nggplot(data = births,\n       mapping = aes(x = day_of_week, y = births, color = weekend)) +\n  scale_color_manual(values = c(\"grey70\", \"#f2ad22\")) +\n  geom_point(size = 0.5, position = position_jitter(height = 0)) +\n  guides(color = \"none\")\n```\n\nThere are some interesting points in the low ends, likely because of holidays like Labor Day and Memorial Day (for the Mondays) and Thanksgiving (for the Thursday). If we had a column that indicated whether a day was a holiday, we could color by that and it would probably explain most of those low numbers. Unfortunately we don't have that column, and it'd be hard to make. Some holidays are constant (Halloween is always October 31), but some aren't (Thanksgiving is the fourth Thursday in November, so we'd need to find out which November 20-somethingth each year is the fourth Thursday, and good luck doing that at scale).\n\n## Beeswarm plot\n\nWe can add some structure to these points if we use the [{ggbeeswarm} package](https://github.com/eclarke/ggbeeswarm), with either `geom_beeswarm()` or `geom_quasirandom()`. `geom_quasirandom()` actually works better here since there are so many points—`geom_beeswarm()` makes the clusters of points way too wide.\n\n```{r beeswarm-plot}\nlibrary(ggbeeswarm)\n\nggplot(data = births,\n       mapping = aes(x = day_of_week, y = births, color = weekend)) +\n  scale_color_manual(values = c(\"grey70\", \"#f2ad22\")) +\n  # Make these points suuuper tiny\n  geom_quasirandom(size = 0.0001) +\n  guides(color = \"none\")\n```\n\n## Heatmap\n\nFinally, let's use something non-traditional to show the average births by day in a somewhat proportional way. We can calculate the average number of births every day and then make a heatmap that fills each square by that average, thus showing the relative differences in births per day.\n\nTo do this, we need to make a summarized data frame with `group_by() %>% summarize()` to calculate the average number of births by month and day of the month (i.e. average for January 1, January 2, etc.).\n\nWe'll then make a sort of calendar with date of the month on the x axis, month on the y axis, with heat map squares filled by the daily average. We'll use `geom_tile()` to add squares for each day, and then add some extra scale, coordinates, and theme layers to clean up the plot:\n\n```{r plot-heatmap, fig.width=10, fig.height=4}\navg_births_month_day <- births %>% \n  group_by(month, date_of_month_categorical) %>% \n  summarize(avg_births = mean(births))\n\nggplot(data = avg_births_month_day,\n       # By default, the y-axis will have December at the top, so use fct_rev() to reverse it\n       mapping = aes(x = date_of_month_categorical, y = fct_rev(month), fill = avg_births)) +\n  geom_tile() +\n  # Add viridis colors\n  scale_fill_viridis_c(option = \"inferno\", labels = label_comma()) + \n  # Add nice labels\n  labs(x = \"Day of the month\", y = NULL,\n       title = \"Average births per day\",\n       subtitle = \"1994-2014\",\n       fill = \"Average births\") +\n  # Force all the tiles to have equal widths and heights\n  coord_equal() +\n  # Use a cleaner theme\n  theme_minimal()\n```\n\nNeat! There are some really interesting trends here. Most obvious, probably, is that very few people are born on New Year's Day, July 4th, Halloween, Thanksgiving, and Christmas. \n\n```{r lowest-days}\navg_births_month_day %>% \n  arrange(avg_births)\n```\n\nThe days with the highest average are in mid-September (lol my birthday is #2), likely because that's about 9 months after the first week of January. July 7th at #7 is odd and I have no idea why it might be so popular `r emoji::emoji(\"shrug\")`.\n\n```{r highest-days}\navg_births_month_day %>% \n  arrange(desc(avg_births))\n```\n\nThe funniest trend is the very visible dark column for the 13th of every month. People *really* don't want to give birth on the 13th.\n","srcMarkdownNoYaml":"\n\nFor this example, we're going to use real world data to demonstrate some different ways to visualize amounts and proportions. We'll use data from the CDC and the Social Security Administration about the number of daily births in the United States from 1994–2014. [FiveThirtyEight reported a story using this data in 2016](https://fivethirtyeight.com/features/some-people-are-too-superstitious-to-have-a-baby-on-friday-the-13th/) and they posted relatively CSV files [on GitHub](https://github.com/fivethirtyeight/data/tree/master/births), so we can download and use those.\n\nIf you want to follow along with this example, you can download the data directly from [GitHub](https://github.com/fivethirtyeight/data/tree/master/births) or by using these links (you'll likely need to right click on these and choose \"Save Link As…\"):\n\n- [{{< fa file-csv >}} `US_births_1994-2003_CDC_NCHS.csv`](https://raw.githubusercontent.com/fivethirtyeight/data/master/births/US_births_1994-2003_CDC_NCHS.csv)\n- [{{< fa file-csv >}} `US_births_2000-2014_SSA.csv`](https://raw.githubusercontent.com/fivethirtyeight/data/master/births/US_births_2000-2014_SSA.csv)\n\n\n## Live coding example\n\n<div class=\"ratio ratio-16x9\">\n<iframe src=\"https://www.youtube.com/embed/zrT-ThV6U6M\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"></iframe>\n</div>\n\n\n::: {.callout-important}\n### Slight differences from the video\n\nThis is a slightly cleaned up version of the code from the video.\n:::\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(fig.width = 6, fig.height = 3.6, fig.align = \"center\", collapse = TRUE)\nset.seed(1234)\noptions(dplyr.summarise.inform = FALSE)\n```\n\n## Load data\n\nThere are two CSV files:\n\n- `US_births_1994-2003_CDC_NCHS.csv` contains U.S. births data for the years 1994 to 2003, as provided by the Centers for Disease Control and Prevention’s National Center for Health Statistics.\n- `US_births_2000-2014_SSA.csv` contains U.S. births data for the years 2000 to 2014, as provided by the Social Security Administration.\n\nSince the two datasets overlap in 2000–2003, we use Social Security Administration data for those years.\n\nWe downloaded the data from GitHub and placed the CSV files in a folder named `data`. We'll then load them with `read_csv()` and combine them into one data frame.\n\n```{r load-libraries-data-fake, eval=FALSE}\nlibrary(tidyverse)\nlibrary(scales)   # For nice labels in charts\n\nbirths_1994_1999 <- read_csv(\"data/US_births_1994-2003_CDC_NCHS.csv\") %>% \n  # Ignore anything after 2000\n  filter(year < 2000)\n\nbirths_2000_2014 <- read_csv(\"data/US_births_2000-2014_SSA.csv\")\n\nbirths_combined <- bind_rows(births_1994_1999, births_2000_2014)\n```\n\n```{r load-libraries-data-real, include=FALSE, warning=FALSE, message=FALSE}\nlibrary(tidyverse)\nlibrary(scales)\n\nbirths_1994_1999 <- read_csv(here::here(\n  \"files\", \"data\", \"external_data\",\n  \"US_births_1994-2003_CDC_NCHS.csv\"\n)) %>%\n  # Ignore anything after 2000\n  filter(year < 2000)\n\nbirths_2000_2014 <- read_csv(here::here(\n  \"files\", \"data\", \"external_data\",\n  \"US_births_2000-2014_SSA.csv\"\n))\n\nbirths_combined <- bind_rows(births_1994_1999, births_2000_2014)\n```\n\n## Wrangle data\n\nLet's look at the first few rows of the data to see what we're working with:\n\n```{r head-data}\nhead(births_combined)\n```\n\nThe columns for year and births seem straightforward and ready to use. The columns for month and day of the week could be improved if we changed them to text (i.e. January instead of 1; Tuesday instead of 3). To fix this, we can convert these columns to categorical variables, or factors in R. We can also specify that these categories (or factors) are ordered, meaning that Feburary comes after January, etc. Without ordering, R will plot them alphabetically, which isn't very helpful.\n\nWe'll make a new dataset named `births` that's based on the combined births data, but with some new columns added:\n\n```{r wrangle-data}\n# The c() function lets us make a list of values\nmonth_names <- c(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n                 \"August\", \"September\", \"October\", \"November\", \"December\")\n\nday_names <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \n               \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\")\n\nbirths <- births_combined %>% \n  # Make month an ordered factor, using the month_name list as labels\n  mutate(month = factor(month, labels = month_names, ordered = TRUE)) %>% \n  mutate(day_of_week = factor(day_of_week, labels = day_names, ordered = TRUE),\n         date_of_month_categorical = factor(date_of_month)) %>% \n  # Add a column indicating if the day is on a weekend\n  mutate(weekend = ifelse(day_of_week %in% c(\"Saturday\", \"Sunday\"), TRUE, FALSE))\n\nhead(births)\n```\n\nIf you look at the data now, you can see the columns are changed and have different types. `year` and `date_of_month` are still numbers, but `month`, and `day_of_week` are ordered factors (`ord`) and `date_of_month_categorical` is a regular factor (`fct`). Technically it's also ordered, but because it's already alphabetical (i.e. 2 naturally comes after 1), we don't need to force it to be in the right order.\n\nOur `births` data is now clean and ready to go!\n\n## Bar plot\n\nFirst we can look at a bar chart showing the total number of births each day. We need to make a smaller summarized dataset and then we'll plot it:\n\n```{r plot-bar-chart}\ntotal_births_weekday <- births %>% \n  group_by(day_of_week) %>% \n  summarize(total = sum(births))\n\nggplot(data = total_births_weekday,\n       mapping = aes(x = day_of_week, y = total, fill = day_of_week)) +\n  geom_col() +\n  # Turn off the fill legend because it's redundant\n  guides(fill = \"none\")\n```\n\nIf we fill by day of the week, we get 7 different colors, which is fine (I guess), but doesn't really help tell a story. The main story here is that there are far fewer births during weekends. If we create a new column that flags if a row is Saturday or Sunday, we can fill by that column instead:\n\n```{r plot-bar-chart-weekend}\ntotal_births_weekday <- births %>% \n  group_by(day_of_week) %>% \n  summarize(total = sum(births)) %>% \n  mutate(weekend = ifelse(day_of_week %in% c(\"Saturday\", \"Sunday\"), TRUE, FALSE))\n\nggplot(data = total_births_weekday,\n       mapping = aes(x = day_of_week, y = total, fill = weekend)) +\n  geom_col()\n```\n\nNeat! Those default colors are kinda ugly, though, so let's use the principles of preattentive processing and contrast to highlight the weekend bars:\n\n```{r plot-bar-chart-weekend-better}\nggplot(data = total_births_weekday,\n       mapping = aes(x = day_of_week, y = total, fill = weekend)) +\n  geom_col() +\n  # Use grey and orange\n  scale_fill_manual(values = c(\"grey70\", \"#f2ad22\")) +\n  # Use commas instead of scientific notation\n  scale_y_continuous(labels = label_comma()) +\n  # Turn off the legend since the title shows what the orange is\n  guides(fill = \"none\") +\n  labs(title = \"Weekends are unpopular times for giving birth\",\n       x = NULL, y = \"Total births\")\n```\n\n## Lollipop chart\n\nSince the ends of the bars are often the most important part of the graph, we can use a lollipop chart to emphasize them. We'll keep all the same code from our bar chart and make a few changes:\n\n- Color by weekend instead of fill by weekend, since points and lines are colored in ggplot, not filled\n- Switch `scale_fill_manual()` to `scale_color_manual()` and turn off the `color` legend in the `guides()` layer \n- Switch `geom_col()` to `geom_pointrange()`. The `geom_pointrange()` layer requires two additional aesthetics: `ymin` and `ymax` for the ends of the lines that come out of the point. Here we'll set `ymin` to 0 so it starts at the x-axis, and we'll set `ymax` to `total` so it ends at the point.\n\n```{r plot-lollipop-chart-weekend-better}\nggplot(data = total_births_weekday,\n       mapping = aes(x = day_of_week, y = total, color = weekend)) +\n  geom_pointrange(aes(ymin = 0, ymax = total),\n                  # Make the lines a little thicker and the dots a little bigger\n                  fatten = 5, size = 1.5) +\n  # Use grey and orange\n  scale_color_manual(values = c(\"grey70\", \"#f2ad22\")) +\n  # Use commas instead of scientific notation\n  scale_y_continuous(labels = label_comma()) +\n  # Turn off the legend since the title shows what the orange is\n  guides(color = \"none\") +\n  labs(title = \"Weekends are unpopular times for giving birth\",\n       x = NULL, y = \"Total births\")\n```\n\n\n## Strip plot\n\nHowever, we want to \\#barbarplots! (Though they're arguably okay here, since they show totals and not averages). Let's show all the data with points. We'll use the full dataset now, map x to weekday, y to births, and change `geom_col()` to `geom_point()`. We'll tell `geom_point()` to jitter the points randomly.\n\n```{r strip-plot}\nggplot(data = births,\n       mapping = aes(x = day_of_week, y = births, color = weekend)) +\n  scale_color_manual(values = c(\"grey70\", \"#f2ad22\")) +\n  geom_point(size = 0.5, position = position_jitter(height = 0)) +\n  guides(color = \"none\")\n```\n\nThere are some interesting points in the low ends, likely because of holidays like Labor Day and Memorial Day (for the Mondays) and Thanksgiving (for the Thursday). If we had a column that indicated whether a day was a holiday, we could color by that and it would probably explain most of those low numbers. Unfortunately we don't have that column, and it'd be hard to make. Some holidays are constant (Halloween is always October 31), but some aren't (Thanksgiving is the fourth Thursday in November, so we'd need to find out which November 20-somethingth each year is the fourth Thursday, and good luck doing that at scale).\n\n## Beeswarm plot\n\nWe can add some structure to these points if we use the [{ggbeeswarm} package](https://github.com/eclarke/ggbeeswarm), with either `geom_beeswarm()` or `geom_quasirandom()`. `geom_quasirandom()` actually works better here since there are so many points—`geom_beeswarm()` makes the clusters of points way too wide.\n\n```{r beeswarm-plot}\nlibrary(ggbeeswarm)\n\nggplot(data = births,\n       mapping = aes(x = day_of_week, y = births, color = weekend)) +\n  scale_color_manual(values = c(\"grey70\", \"#f2ad22\")) +\n  # Make these points suuuper tiny\n  geom_quasirandom(size = 0.0001) +\n  guides(color = \"none\")\n```\n\n## Heatmap\n\nFinally, let's use something non-traditional to show the average births by day in a somewhat proportional way. We can calculate the average number of births every day and then make a heatmap that fills each square by that average, thus showing the relative differences in births per day.\n\nTo do this, we need to make a summarized data frame with `group_by() %>% summarize()` to calculate the average number of births by month and day of the month (i.e. average for January 1, January 2, etc.).\n\nWe'll then make a sort of calendar with date of the month on the x axis, month on the y axis, with heat map squares filled by the daily average. We'll use `geom_tile()` to add squares for each day, and then add some extra scale, coordinates, and theme layers to clean up the plot:\n\n```{r plot-heatmap, fig.width=10, fig.height=4}\navg_births_month_day <- births %>% \n  group_by(month, date_of_month_categorical) %>% \n  summarize(avg_births = mean(births))\n\nggplot(data = avg_births_month_day,\n       # By default, the y-axis will have December at the top, so use fct_rev() to reverse it\n       mapping = aes(x = date_of_month_categorical, y = fct_rev(month), fill = avg_births)) +\n  geom_tile() +\n  # Add viridis colors\n  scale_fill_viridis_c(option = \"inferno\", labels = label_comma()) + \n  # Add nice labels\n  labs(x = \"Day of the month\", y = NULL,\n       title = \"Average births per day\",\n       subtitle = \"1994-2014\",\n       fill = \"Average births\") +\n  # Force all the tiles to have equal widths and heights\n  coord_equal() +\n  # Use a cleaner theme\n  theme_minimal()\n```\n\nNeat! There are some really interesting trends here. Most obvious, probably, is that very few people are born on New Year's Day, July 4th, Halloween, Thanksgiving, and Christmas. \n\n```{r lowest-days}\navg_births_month_day %>% \n  arrange(avg_births)\n```\n\nThe days with the highest average are in mid-September (lol my birthday is #2), likely because that's about 9 months after the first week of January. July 7th at #7 is odd and I have no idea why it might be so popular `r emoji::emoji(\"shrug\")`.\n\n```{r highest-days}\navg_births_month_day %>% \n  arrange(desc(avg_births))\n```\n\nThe funniest trend is the very visible dark column for the 13th of every month. People *really* don't want to give birth on the 13th.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"highlight-style":"monokai","toc-depth":4,"filters":["../filters/format_date_end.lua"],"output-file":"04-example.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["../files/bib/readings.bib"],"csl":"../files/bib/chicago-author-date.csl","_quarto-vars":{"author":"Andrew Heiss","instructor":{"name":"Dr. Andrew Heiss","name_no_title":"Andrew Heiss","email":"aheiss@gsu.edu","url":"https://www.andrewheiss.com","twitter":"andrewheiss","github":"andrewheiss","office":"55 Park Place SE, Room 464","contact_policy":"E-mail and Slack are the best ways to get in contact with me. I will try to respond to all course-related e-mails and Slack messages within 24 hours (*really*), but also remember that life can be busy and chaotic for everyone (including me!), so if I don't respond right away, don't worry!","appointment_url":"https://calendly.com/andrewheiss/"},"course":{"number":"PMAP 8551/4551","semester":"Fall 2023","days":"Any day","time":"Asynchronous","location":"Anywhere","dates":"August 12–December 11, 2023","github":"https://www.github.com/andrewheiss/datavizf23.classes.andrewheiss.com","url":"https://datavizf23.classes.andrewheiss.com","copyright_year":"2023","slack":"https://gsudatavizf2023.slack.com"},"university":{"name":"Georgia State University","url":"https://www.gsu.edu"},"school":{"name":"Andrew Young School of Policy Studies","url":"https://aysps.gsu.edu/"}},"theme":["litera","../html/custom.scss"],"date-heading":{"content":"Example for","class":"bg-example"},"date-format":"full","template-partials":["../html/title-block.html"],"title":"Amounts and proportions","date":"2023-09-11","date_end":"2023-09-15"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}