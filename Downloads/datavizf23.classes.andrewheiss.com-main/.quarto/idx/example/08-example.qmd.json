{"title":"Comparisons","markdown":{"yaml":{"title":"Comparisons","date":"2023-10-09","date_end":"2023-10-13"},"headingText":"Live coding example","containsRefs":false,"markdown":"\n\n```{r load-targets, include=FALSE}\nwithr::with_dir(here::here(), {\n  wdi_path <- targets::tar_read(data_wdi_comparisons)\n})\n```\n\nFor this example, we're going to use cross-national data, but instead of using the typical `gapminder` dataset, we're going to collect data directly from the [World Bank's Open Data portal](https://data.worldbank.org/)\n\nIf you want to skip the data downloading, you can download the data below (you'll likely need to right click and choose \"Save Link As…\"):\n\n- [{{< fa file-csv >}} `wdi_comparisons.csv`](/`r wdi_path`)\n\n\n\n<div class=\"ratio ratio-16x9\">\n<iframe src=\"https://www.youtube.com/embed/tCnfTLHtMs8\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"></iframe>\n</div>\n\n\n::: {.callout-important}\n### Slight differences from the video\n\nThis is a slightly cleaned up version of the code from the video.\n:::\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(fig.width = 6, fig.height = 3.6, fig.align = \"center\", collapse = TRUE)\nset.seed(1234)\noptions(\"digits\" = 2, \"width\" = 150)\n```\n\n## Load and clean data\n\nFirst, we load the libraries we'll be using:\n\n```{r load-libraries, message=FALSE, warning=FALSE}\nlibrary(tidyverse)  # For ggplot, dplyr, and friends\nlibrary(WDI)        # For getting data from the World Bank\nlibrary(geofacet)   # For map-shaped facets\nlibrary(scales)     # For helpful scale functions like label_dollar()\nlibrary(ggrepel)    # For non-overlapping labels\n```\n\nThe World Bank has a ton of country-level data at [data.worldbank.org](https://data.worldbank.org/). We can use [a package named {WDI}](https://cran.r-project.org/package=WDI) (**w**orld **d**evelopment **i**ndicators) to access their servers and download the data directly into R.\n\nTo do this, we need to find the special World Bank codes for specific variables we want to get. These codes come from the URLs of the World Bank's website. For instance, if you search for \"access to electricity\" at the World Bank's website, you'll find [this page](https://data.worldbank.org/indicator/EG.ELC.ACCS.ZS). If you look at the end of the URL, you'll see a cryptic code: `EG.ELC.ACCS.ZS`. That's the World Bank's ID code for the \"Access to electricity (% of population)\" indicator.\n\nWe can feed a list of ID codes to the `WDI()` function to download data for those specific indicators. We can feed it a list of just the codes (e.g., `c(\"SP.DYN.LE00.IN\", \"EG.ELC.ACCS.ZS\", ...)`), but then the columns will be named with those ugly inscrutable names. Alternatively, we can feed the `WDI()` function a *named* list (e.g. `c(life_expectancy = \"SP.DYN.LE00.IN\", ...)`), which will create columns using the names we specify there. This is much nicer.\n\nWe want data from 1995-2015, so we set the start and end years accordingly. The `extra=TRUE` argument means that it'll also include other helpful details like region, aid status, etc. Without it, it would only download the indicators we listed.\n\n```{r get-wdi-data, eval=FALSE}\nindicators <- c(life_expectancy = \"SP.DYN.LE00.IN\",  # Life expectancy\n                access_to_electricity = \"EG.ELC.ACCS.ZS\",  # Access to electricity\n                co2_emissions = \"EN.ATM.CO2E.PC\",  # CO2 emissions\n                gdp_per_cap = \"NY.GDP.PCAP.KD\")  # GDP per capita\n\nwdi_raw <- WDI(country = \"all\", indicators, extra = TRUE, \n               start = 1995, end = 2015)\n\nhead(wdi_raw)\n```\n\nDownloading data from the World Bank every time you knit will get tedious and take a long time (plus if their servers are temporarily down, you won't be able to get the data). It's good practice to save this raw data as a CSV file and then work with that.\n\n```{r write-csv, eval=FALSE}\nwrite_csv(wdi_raw, \"data/wdi_comparisons.csv\")\n```\n\nSince we care about reproducibility, we still want to include the code we used to get data from the World Bank, we just don't want it to actually run. You can include chunks but not run them by setting `eval=FALSE` in the chunk options. In this little example, we show the code for downloading the data, but we don't evaluate the chunk. We then include a chunk that loads the data from a CSV file with `read_csv()`, but we don't include it (`include=FALSE`). That way, in the knitted file we see the `WDI()` code, but in reality it's loading the data from CSV. Super tricky.\n\n````markdown\nI first download data from the World Bank:\n\n```{{r get-wdi-data, eval=FALSE}}\nwdi_raw <- WDI(...)\n\nwrite_csv(wdi_raw, \"data/wdi_comparisons.csv\")\n```\n\n```{{r load-wdi-data-real, include=FALSE}}\nwdi_raw <- read_csv(\"data/wdi_comparisons.csv\")\n```\n\n````\n\n```{r load-data-real, include=FALSE}\nwdi_raw <- read_csv(here::here(wdi_path))\n```\n\nThen we clean up the data a little by filtering out rows that aren't actually countries:\n\n```{r clean-wdi-data}\nwdi_clean <- wdi_raw %>% \n  filter(region != \"Aggregates\")\n\nhead(wdi_clean)\n```\n\n## Small multiples\n\nFirst we can make some small multiples plots and show life expectancy over time for a handful of countries. We'll make a list of some countries chosen at random while I scrolled through the data, and then filter our data to include only those rows. We then plot life expectancy, faceting by country.\n\n```{r life-expectancy-small}\nlife_expectancy_small <- wdi_clean %>%\n  filter(country %in% c(\"Argentina\", \"Bolivia\", \"Brazil\", \n                        \"Belize\", \"Canada\", \"Chile\"))\n\nggplot(data = life_expectancy_small, \n       mapping = aes(x = year, y = life_expectancy)) +\n  geom_line(linewidth = 1) +\n  facet_wrap(vars(country))\n```\n\nSmall multiples! That's all we need to do.\n\nWe can do some fancier things, though. We can make this plot hyper minimalist:\n\n```{r life-expectancy-small-minimalist}\nggplot(data = life_expectancy_small, \n       mapping = aes(x = year, y = life_expectancy)) +\n  geom_line(linewidth = 1) +\n  facet_wrap(vars(country), scales = \"free_y\") +\n  theme_void() +\n  theme(strip.text = element_text(face = \"bold\"))\n```\n\nWe can do a whole part of a continent (poor Iraq and Syria `r emoji::emoji(\"sad\")`)\n\n```{r life-expectancy-mena, fig.width=10, fig.height=3.5}\nlife_expectancy_mena <- wdi_clean %>% \n  filter(region == \"Middle East & North Africa\")\n\nggplot(data = life_expectancy_mena, \n       mapping = aes(x = year, y = life_expectancy)) +\n  geom_line(linewidth = 1) +\n  facet_wrap(vars(country), scales = \"free_y\", nrow = 3) +\n  theme_void() +\n  theme(strip.text = element_text(face = \"bold\"))\n```\n\nWe can use the [{geofacet} package](https://hafen.github.io/geofacet/) to arrange these facets by geography:\n\n```{r life-expectancy-eu, warning=FALSE, message=FALSE, fig.width=10, fig.height=8}\nlife_expectancy_eu <- wdi_clean %>% \n  filter(region == \"Europe & Central Asia\")\n\nggplot(life_expectancy_eu, aes(x = year, y = life_expectancy)) +\n  geom_line(linewidth = 1) +\n  facet_geo(vars(country), grid = \"eu_grid1\", scales = \"free_y\") +\n  labs(x = NULL, y = NULL, title = \"Life expectancy from 1995–2015\",\n       caption = \"Source: The World Bank (SP.DYN.LE00.IN)\") +\n  theme_minimal() +\n  theme(strip.text = element_text(face = \"bold\"),\n        plot.title = element_text(face = \"bold\"),\n        axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\nNeat!\n\n## Sparklines\n\nSparklines are just line charts (or bar charts) that are really really small.\n\n```{r india-spark, fig.width=1, fig.height=0.15, warning=FALSE}\nindia_co2 <- wdi_clean %>% \n  filter(country == \"India\")\n\nplot_india <- ggplot(india_co2, aes(x = year, y = co2_emissions)) +\n  geom_line() +\n  theme_void()\nplot_india\n```\n\n```{r save-india-fake, eval=FALSE}\nggsave(\"india_co2.pdf\", plot_india, width = 1, height = 0.15, units = \"in\")\nggsave(\"india_co2.png\", plot_india, width = 1, height = 0.15, units = \"in\")\n```\n\n```{r china-spark, fig.width=1, fig.height=0.15, warning=FALSE}\nchina_co2 <- wdi_clean %>% \n  filter(country == \"China\")\n\nplot_china <- ggplot(china_co2, aes(x = year, y = co2_emissions)) +\n  geom_line() +\n  theme_void()\nplot_china\n```\n\n```{r save-china-fake, eval=FALSE}\nggsave(\"china_co2.pdf\", plot_china, width = 1, heighlt = 0.15, units = \"in\")\nggsave(\"china_co2.png\", plot_china, width = 1, height = 0.15, units = \"in\")\n```\n\nYou can then use those saved tiny plots in your text.\n\n> Both India <img class=\"img-inline\" src=\"/example/08-example_files/figure-html/india-spark-1.png\" width = \"100\"/> and China <img class=\"img-inline\" src=\"/example/08-example_files/figure-html/china-spark-1.png\" width = \"100\"/> have seen increased CO<sub>2</sub> emissions over the past 20 years.\n\n\n## Slopegraphs\n\nWe can make a slopegraph to show changes in GDP per capita between two time periods. We need to first filter our WDI to include only the start and end years (here 1995 and 2015). Then, to make sure that we're using complete data, we'll get rid of any country that has missing data for either 1995 or 2015. The `group_by(...) %>% filter(...) %>% ungroup()` pipeline does this, with the `!any(is.na(gdp_per_cap))` test keeping any rows where any of the `gdp_per_cap` values are not missing for the whole country.\n\nWe then add a couple special columns for labels. The `paste0()` function concatenates strings and variables together, so that `paste0(\"2 + 2 = \", 2 + 2)` would show \"2 + 2 = 4\". Here we make labels that say either \"Country name: \\$GDP\" or \"\\$GDP\" depending on the year.\n\n```{r slopegraph-sa-data}\ngdp_south_asia <- wdi_clean %>% \n  filter(region == \"South Asia\") %>% \n  filter(year %in% c(1995, 2015)) %>% \n  # Look at each country individually\n  group_by(country) %>%\n  # Remove the country if any of its gdp_per_cap values are missing\n  filter(!any(is.na(gdp_per_cap))) %>%\n  ungroup() %>%\n  # Make year a factor\n  mutate(year = factor(year)) %>% \n  # Make some nice label columns\n  # If the year is 1995, format it like \"Country name: $GDP\". If the year is\n  # 2015, format it like \"$GDP\"\n  mutate(label_first = ifelse(year == 1995, paste0(country, \": \", label_dollar()(round(gdp_per_cap))), NA),\n         label_last = ifelse(year == 2015, label_dollar()(round(gdp_per_cap, 0)), NA))\n```\n\nWith the data filtered like this, we can plot it by mapping year to the x-axis, GDP per capita to the y-axis, and coloring by country. To make the lines go across the two categorical labels in the x-axis (since we made year a factor/category), we need to also specify the `group` aesthetic.\n\n```{r slopegraph-sa-simple}\nggplot(gdp_south_asia, aes(x = year, y = gdp_per_cap, group = country, color = country)) +\n  geom_line(linewidth = 1.5)\n```\n\nCool! We're getting closer. We can definitely see different slopes, but with 7 different colors, it's hard to see exactly which country is which. Instead, we can directly label each of these lines with `geom_text()`:\n\n```{r slopegraph-sa-simple-text}\nggplot(gdp_south_asia, aes(x = year, y = gdp_per_cap, group = country, color = country)) +\n  geom_line(linewidth = 1.5) +\n  geom_text(aes(label = country)) +\n  guides(color = \"none\")\n```\n\nThat gets us a *little* closer, but the country labels are hard to see, and we could include more information, like the actual values. Remember those `label_first` and `label_last` columns we made? Let's use those instead:\n\n```{r slopegraph-sa-simple-text-fancier, warning=FALSE}\nggplot(gdp_south_asia, aes(x = year, y = gdp_per_cap, group = country, color = country)) +\n  geom_line(linewidth = 1.5) +\n  geom_text(aes(label = label_first)) +\n  geom_text(aes(label = label_last)) +\n  guides(color = \"none\")\n```\n\nNow we have dollar amounts and country names, but the labels are still overlapping and really hard to read. To fix this, we can make the labels repel away from each other and randomly position in a way that makes them not overlap. The [{ggrepel} package](https://cran.r-project.org/web/packages/ggrepel/vignettes/ggrepel.html) lets us do this with `geom_text_repel()`\n\n```{r slopegraph-sa-getting-warmer, warning=FALSE}\nggplot(gdp_south_asia, aes(x = year, y = gdp_per_cap, group = country, color = country)) +\n  geom_line(linewidth = 1.5) +\n  geom_text_repel(aes(label = label_first)) +\n  geom_text_repel(aes(label = label_last)) +\n  guides(color = \"none\")\n```\n\nNow none of the labels are on top of each other, but the labels are still on top of the lines. Also, some of the labels moved inward and outward along the x-axis, but they don't need to do that—they just need to shift up and down. We can force the labels to only move up and down by setting the `direction = \"y\"` argument, and we can move all the labels to the left or right with the `nudge_x` argument. The `seed` argument makes sure that the random label placement is the same every time we run this. It can be whatever number you want—it just has to be a number.\n\n```{r slopegraph-sa-fancier, warning=FALSE}\nggplot(gdp_south_asia, aes(x = year, y = gdp_per_cap, group = country, color = country)) +\n  geom_line(linewidth = 1.5) +\n  geom_text_repel(aes(label = label_first), direction = \"y\", nudge_x = -1, seed = 1234) +\n  geom_text_repel(aes(label = label_last), direction = \"y\", nudge_x = 1, seed = 1234) +\n  guides(color = \"none\")\n```\n\nThat's it! Let's take the theme off completely, change the colors a little, and it should be perfect.\n\n```{r slopegraph-sa-done, warning=FALSE}\nggplot(gdp_south_asia, aes(x = year, y = gdp_per_cap, group = country, color = country)) +\n  geom_line(linewidth = 1.5) +\n  geom_text_repel(aes(label = label_first), direction = \"y\", nudge_x = -1, seed = 1234) +\n  geom_text_repel(aes(label = label_last), direction = \"y\", nudge_x = 1, seed = 1234) +\n  guides(color = \"none\") +\n  scale_color_viridis_d(option = \"magma\", end = 0.9) +\n  theme_void()\n```\n\n\n## Bump charts\n\nFinally, we can make a bump chart that shows changes in rankings over time. We'll look at CO<sub>2</sub> emissions in South Asia. First we need to calculate a new variable that shows the rank of each country within each year. We can do this if we group by year and then use the `rank()` function to rank countries by the `co2_emissions` column.\n\n```{r filter-bump-data}\nsa_co2 <- wdi_clean %>% \n  filter(region == \"South Asia\") %>% \n  filter(year >= 2004, year < 2015) %>% \n  group_by(year) %>% \n  mutate(rank = rank(co2_emissions))\n```\n\nWe then plot this with points and lines, reversing the y-axis so 1 is at the top:\n\n```{r make-bump-plot}\nggplot(sa_co2, aes(x = year, y = rank, color = country)) +\n  geom_line() +\n  geom_point() +\n  scale_y_reverse(breaks = 1:8)\n```\n\nAfghanistan and Nepal switched around for the number 1 spot, while India dropped from 4 to 6, switching places with Pakistan.\n\nAs with the slopegraph, there are 8 different colors in the legend and it's hard to line them all up with the different lines, so we can plot the text directly instead. We'll use `geom_text()` again. We don't need to repel anything, since the text should fit in each row just fine. We need to change the `data` argument in `geom_text()` though and filter the data to only include one year, otherwise we'll get labels on every point, which is excessive. We can also adjust the theme and colors to make it cleaner.\n\n```{r bump-plot-fancier, fig.width=7, fig.height=4.2}\nggplot(sa_co2, aes(x = year, y = rank, color = country)) +\n  geom_line(linewidth = 2) +\n  geom_point(size = 4) +\n  geom_text(data = filter(sa_co2, year == 2004),\n            aes(label = iso2c, x = 2003.25),\n            fontface = \"bold\") +\n  geom_text(data = filter(sa_co2, year == 2014),\n            aes(label = iso2c, x = 2014.75),\n            fontface = \"bold\") +\n  guides(color = \"none\") +\n  scale_y_reverse(breaks = 1:8) +\n  scale_x_continuous(breaks = 2004:2014) +\n  scale_color_viridis_d(option = \"magma\", begin = 0.2, end = 0.9) +\n  labs(x = NULL, y = \"Rank\") +\n  theme_minimal() +\n  theme(panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.minor.x = element_blank())\n```\n\nIf you want to be *super* fancy, you can use flags instead of country codes, but that's a little more complicated (you need to install the [{ggflags} package](https://github.com/rensa/ggflags). [See here for an example](https://dominikkoch.github.io/Bump-Chart/).\n","srcMarkdownNoYaml":"\n\n```{r load-targets, include=FALSE}\nwithr::with_dir(here::here(), {\n  wdi_path <- targets::tar_read(data_wdi_comparisons)\n})\n```\n\nFor this example, we're going to use cross-national data, but instead of using the typical `gapminder` dataset, we're going to collect data directly from the [World Bank's Open Data portal](https://data.worldbank.org/)\n\nIf you want to skip the data downloading, you can download the data below (you'll likely need to right click and choose \"Save Link As…\"):\n\n- [{{< fa file-csv >}} `wdi_comparisons.csv`](/`r wdi_path`)\n\n\n## Live coding example\n\n<div class=\"ratio ratio-16x9\">\n<iframe src=\"https://www.youtube.com/embed/tCnfTLHtMs8\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"></iframe>\n</div>\n\n\n::: {.callout-important}\n### Slight differences from the video\n\nThis is a slightly cleaned up version of the code from the video.\n:::\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(fig.width = 6, fig.height = 3.6, fig.align = \"center\", collapse = TRUE)\nset.seed(1234)\noptions(\"digits\" = 2, \"width\" = 150)\n```\n\n## Load and clean data\n\nFirst, we load the libraries we'll be using:\n\n```{r load-libraries, message=FALSE, warning=FALSE}\nlibrary(tidyverse)  # For ggplot, dplyr, and friends\nlibrary(WDI)        # For getting data from the World Bank\nlibrary(geofacet)   # For map-shaped facets\nlibrary(scales)     # For helpful scale functions like label_dollar()\nlibrary(ggrepel)    # For non-overlapping labels\n```\n\nThe World Bank has a ton of country-level data at [data.worldbank.org](https://data.worldbank.org/). We can use [a package named {WDI}](https://cran.r-project.org/package=WDI) (**w**orld **d**evelopment **i**ndicators) to access their servers and download the data directly into R.\n\nTo do this, we need to find the special World Bank codes for specific variables we want to get. These codes come from the URLs of the World Bank's website. For instance, if you search for \"access to electricity\" at the World Bank's website, you'll find [this page](https://data.worldbank.org/indicator/EG.ELC.ACCS.ZS). If you look at the end of the URL, you'll see a cryptic code: `EG.ELC.ACCS.ZS`. That's the World Bank's ID code for the \"Access to electricity (% of population)\" indicator.\n\nWe can feed a list of ID codes to the `WDI()` function to download data for those specific indicators. We can feed it a list of just the codes (e.g., `c(\"SP.DYN.LE00.IN\", \"EG.ELC.ACCS.ZS\", ...)`), but then the columns will be named with those ugly inscrutable names. Alternatively, we can feed the `WDI()` function a *named* list (e.g. `c(life_expectancy = \"SP.DYN.LE00.IN\", ...)`), which will create columns using the names we specify there. This is much nicer.\n\nWe want data from 1995-2015, so we set the start and end years accordingly. The `extra=TRUE` argument means that it'll also include other helpful details like region, aid status, etc. Without it, it would only download the indicators we listed.\n\n```{r get-wdi-data, eval=FALSE}\nindicators <- c(life_expectancy = \"SP.DYN.LE00.IN\",  # Life expectancy\n                access_to_electricity = \"EG.ELC.ACCS.ZS\",  # Access to electricity\n                co2_emissions = \"EN.ATM.CO2E.PC\",  # CO2 emissions\n                gdp_per_cap = \"NY.GDP.PCAP.KD\")  # GDP per capita\n\nwdi_raw <- WDI(country = \"all\", indicators, extra = TRUE, \n               start = 1995, end = 2015)\n\nhead(wdi_raw)\n```\n\nDownloading data from the World Bank every time you knit will get tedious and take a long time (plus if their servers are temporarily down, you won't be able to get the data). It's good practice to save this raw data as a CSV file and then work with that.\n\n```{r write-csv, eval=FALSE}\nwrite_csv(wdi_raw, \"data/wdi_comparisons.csv\")\n```\n\nSince we care about reproducibility, we still want to include the code we used to get data from the World Bank, we just don't want it to actually run. You can include chunks but not run them by setting `eval=FALSE` in the chunk options. In this little example, we show the code for downloading the data, but we don't evaluate the chunk. We then include a chunk that loads the data from a CSV file with `read_csv()`, but we don't include it (`include=FALSE`). That way, in the knitted file we see the `WDI()` code, but in reality it's loading the data from CSV. Super tricky.\n\n````markdown\nI first download data from the World Bank:\n\n```{{r get-wdi-data, eval=FALSE}}\nwdi_raw <- WDI(...)\n\nwrite_csv(wdi_raw, \"data/wdi_comparisons.csv\")\n```\n\n```{{r load-wdi-data-real, include=FALSE}}\nwdi_raw <- read_csv(\"data/wdi_comparisons.csv\")\n```\n\n````\n\n```{r load-data-real, include=FALSE}\nwdi_raw <- read_csv(here::here(wdi_path))\n```\n\nThen we clean up the data a little by filtering out rows that aren't actually countries:\n\n```{r clean-wdi-data}\nwdi_clean <- wdi_raw %>% \n  filter(region != \"Aggregates\")\n\nhead(wdi_clean)\n```\n\n## Small multiples\n\nFirst we can make some small multiples plots and show life expectancy over time for a handful of countries. We'll make a list of some countries chosen at random while I scrolled through the data, and then filter our data to include only those rows. We then plot life expectancy, faceting by country.\n\n```{r life-expectancy-small}\nlife_expectancy_small <- wdi_clean %>%\n  filter(country %in% c(\"Argentina\", \"Bolivia\", \"Brazil\", \n                        \"Belize\", \"Canada\", \"Chile\"))\n\nggplot(data = life_expectancy_small, \n       mapping = aes(x = year, y = life_expectancy)) +\n  geom_line(linewidth = 1) +\n  facet_wrap(vars(country))\n```\n\nSmall multiples! That's all we need to do.\n\nWe can do some fancier things, though. We can make this plot hyper minimalist:\n\n```{r life-expectancy-small-minimalist}\nggplot(data = life_expectancy_small, \n       mapping = aes(x = year, y = life_expectancy)) +\n  geom_line(linewidth = 1) +\n  facet_wrap(vars(country), scales = \"free_y\") +\n  theme_void() +\n  theme(strip.text = element_text(face = \"bold\"))\n```\n\nWe can do a whole part of a continent (poor Iraq and Syria `r emoji::emoji(\"sad\")`)\n\n```{r life-expectancy-mena, fig.width=10, fig.height=3.5}\nlife_expectancy_mena <- wdi_clean %>% \n  filter(region == \"Middle East & North Africa\")\n\nggplot(data = life_expectancy_mena, \n       mapping = aes(x = year, y = life_expectancy)) +\n  geom_line(linewidth = 1) +\n  facet_wrap(vars(country), scales = \"free_y\", nrow = 3) +\n  theme_void() +\n  theme(strip.text = element_text(face = \"bold\"))\n```\n\nWe can use the [{geofacet} package](https://hafen.github.io/geofacet/) to arrange these facets by geography:\n\n```{r life-expectancy-eu, warning=FALSE, message=FALSE, fig.width=10, fig.height=8}\nlife_expectancy_eu <- wdi_clean %>% \n  filter(region == \"Europe & Central Asia\")\n\nggplot(life_expectancy_eu, aes(x = year, y = life_expectancy)) +\n  geom_line(linewidth = 1) +\n  facet_geo(vars(country), grid = \"eu_grid1\", scales = \"free_y\") +\n  labs(x = NULL, y = NULL, title = \"Life expectancy from 1995–2015\",\n       caption = \"Source: The World Bank (SP.DYN.LE00.IN)\") +\n  theme_minimal() +\n  theme(strip.text = element_text(face = \"bold\"),\n        plot.title = element_text(face = \"bold\"),\n        axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\nNeat!\n\n## Sparklines\n\nSparklines are just line charts (or bar charts) that are really really small.\n\n```{r india-spark, fig.width=1, fig.height=0.15, warning=FALSE}\nindia_co2 <- wdi_clean %>% \n  filter(country == \"India\")\n\nplot_india <- ggplot(india_co2, aes(x = year, y = co2_emissions)) +\n  geom_line() +\n  theme_void()\nplot_india\n```\n\n```{r save-india-fake, eval=FALSE}\nggsave(\"india_co2.pdf\", plot_india, width = 1, height = 0.15, units = \"in\")\nggsave(\"india_co2.png\", plot_india, width = 1, height = 0.15, units = \"in\")\n```\n\n```{r china-spark, fig.width=1, fig.height=0.15, warning=FALSE}\nchina_co2 <- wdi_clean %>% \n  filter(country == \"China\")\n\nplot_china <- ggplot(china_co2, aes(x = year, y = co2_emissions)) +\n  geom_line() +\n  theme_void()\nplot_china\n```\n\n```{r save-china-fake, eval=FALSE}\nggsave(\"china_co2.pdf\", plot_china, width = 1, heighlt = 0.15, units = \"in\")\nggsave(\"china_co2.png\", plot_china, width = 1, height = 0.15, units = \"in\")\n```\n\nYou can then use those saved tiny plots in your text.\n\n> Both India <img class=\"img-inline\" src=\"/example/08-example_files/figure-html/india-spark-1.png\" width = \"100\"/> and China <img class=\"img-inline\" src=\"/example/08-example_files/figure-html/china-spark-1.png\" width = \"100\"/> have seen increased CO<sub>2</sub> emissions over the past 20 years.\n\n\n## Slopegraphs\n\nWe can make a slopegraph to show changes in GDP per capita between two time periods. We need to first filter our WDI to include only the start and end years (here 1995 and 2015). Then, to make sure that we're using complete data, we'll get rid of any country that has missing data for either 1995 or 2015. The `group_by(...) %>% filter(...) %>% ungroup()` pipeline does this, with the `!any(is.na(gdp_per_cap))` test keeping any rows where any of the `gdp_per_cap` values are not missing for the whole country.\n\nWe then add a couple special columns for labels. The `paste0()` function concatenates strings and variables together, so that `paste0(\"2 + 2 = \", 2 + 2)` would show \"2 + 2 = 4\". Here we make labels that say either \"Country name: \\$GDP\" or \"\\$GDP\" depending on the year.\n\n```{r slopegraph-sa-data}\ngdp_south_asia <- wdi_clean %>% \n  filter(region == \"South Asia\") %>% \n  filter(year %in% c(1995, 2015)) %>% \n  # Look at each country individually\n  group_by(country) %>%\n  # Remove the country if any of its gdp_per_cap values are missing\n  filter(!any(is.na(gdp_per_cap))) %>%\n  ungroup() %>%\n  # Make year a factor\n  mutate(year = factor(year)) %>% \n  # Make some nice label columns\n  # If the year is 1995, format it like \"Country name: $GDP\". If the year is\n  # 2015, format it like \"$GDP\"\n  mutate(label_first = ifelse(year == 1995, paste0(country, \": \", label_dollar()(round(gdp_per_cap))), NA),\n         label_last = ifelse(year == 2015, label_dollar()(round(gdp_per_cap, 0)), NA))\n```\n\nWith the data filtered like this, we can plot it by mapping year to the x-axis, GDP per capita to the y-axis, and coloring by country. To make the lines go across the two categorical labels in the x-axis (since we made year a factor/category), we need to also specify the `group` aesthetic.\n\n```{r slopegraph-sa-simple}\nggplot(gdp_south_asia, aes(x = year, y = gdp_per_cap, group = country, color = country)) +\n  geom_line(linewidth = 1.5)\n```\n\nCool! We're getting closer. We can definitely see different slopes, but with 7 different colors, it's hard to see exactly which country is which. Instead, we can directly label each of these lines with `geom_text()`:\n\n```{r slopegraph-sa-simple-text}\nggplot(gdp_south_asia, aes(x = year, y = gdp_per_cap, group = country, color = country)) +\n  geom_line(linewidth = 1.5) +\n  geom_text(aes(label = country)) +\n  guides(color = \"none\")\n```\n\nThat gets us a *little* closer, but the country labels are hard to see, and we could include more information, like the actual values. Remember those `label_first` and `label_last` columns we made? Let's use those instead:\n\n```{r slopegraph-sa-simple-text-fancier, warning=FALSE}\nggplot(gdp_south_asia, aes(x = year, y = gdp_per_cap, group = country, color = country)) +\n  geom_line(linewidth = 1.5) +\n  geom_text(aes(label = label_first)) +\n  geom_text(aes(label = label_last)) +\n  guides(color = \"none\")\n```\n\nNow we have dollar amounts and country names, but the labels are still overlapping and really hard to read. To fix this, we can make the labels repel away from each other and randomly position in a way that makes them not overlap. The [{ggrepel} package](https://cran.r-project.org/web/packages/ggrepel/vignettes/ggrepel.html) lets us do this with `geom_text_repel()`\n\n```{r slopegraph-sa-getting-warmer, warning=FALSE}\nggplot(gdp_south_asia, aes(x = year, y = gdp_per_cap, group = country, color = country)) +\n  geom_line(linewidth = 1.5) +\n  geom_text_repel(aes(label = label_first)) +\n  geom_text_repel(aes(label = label_last)) +\n  guides(color = \"none\")\n```\n\nNow none of the labels are on top of each other, but the labels are still on top of the lines. Also, some of the labels moved inward and outward along the x-axis, but they don't need to do that—they just need to shift up and down. We can force the labels to only move up and down by setting the `direction = \"y\"` argument, and we can move all the labels to the left or right with the `nudge_x` argument. The `seed` argument makes sure that the random label placement is the same every time we run this. It can be whatever number you want—it just has to be a number.\n\n```{r slopegraph-sa-fancier, warning=FALSE}\nggplot(gdp_south_asia, aes(x = year, y = gdp_per_cap, group = country, color = country)) +\n  geom_line(linewidth = 1.5) +\n  geom_text_repel(aes(label = label_first), direction = \"y\", nudge_x = -1, seed = 1234) +\n  geom_text_repel(aes(label = label_last), direction = \"y\", nudge_x = 1, seed = 1234) +\n  guides(color = \"none\")\n```\n\nThat's it! Let's take the theme off completely, change the colors a little, and it should be perfect.\n\n```{r slopegraph-sa-done, warning=FALSE}\nggplot(gdp_south_asia, aes(x = year, y = gdp_per_cap, group = country, color = country)) +\n  geom_line(linewidth = 1.5) +\n  geom_text_repel(aes(label = label_first), direction = \"y\", nudge_x = -1, seed = 1234) +\n  geom_text_repel(aes(label = label_last), direction = \"y\", nudge_x = 1, seed = 1234) +\n  guides(color = \"none\") +\n  scale_color_viridis_d(option = \"magma\", end = 0.9) +\n  theme_void()\n```\n\n\n## Bump charts\n\nFinally, we can make a bump chart that shows changes in rankings over time. We'll look at CO<sub>2</sub> emissions in South Asia. First we need to calculate a new variable that shows the rank of each country within each year. We can do this if we group by year and then use the `rank()` function to rank countries by the `co2_emissions` column.\n\n```{r filter-bump-data}\nsa_co2 <- wdi_clean %>% \n  filter(region == \"South Asia\") %>% \n  filter(year >= 2004, year < 2015) %>% \n  group_by(year) %>% \n  mutate(rank = rank(co2_emissions))\n```\n\nWe then plot this with points and lines, reversing the y-axis so 1 is at the top:\n\n```{r make-bump-plot}\nggplot(sa_co2, aes(x = year, y = rank, color = country)) +\n  geom_line() +\n  geom_point() +\n  scale_y_reverse(breaks = 1:8)\n```\n\nAfghanistan and Nepal switched around for the number 1 spot, while India dropped from 4 to 6, switching places with Pakistan.\n\nAs with the slopegraph, there are 8 different colors in the legend and it's hard to line them all up with the different lines, so we can plot the text directly instead. We'll use `geom_text()` again. We don't need to repel anything, since the text should fit in each row just fine. We need to change the `data` argument in `geom_text()` though and filter the data to only include one year, otherwise we'll get labels on every point, which is excessive. We can also adjust the theme and colors to make it cleaner.\n\n```{r bump-plot-fancier, fig.width=7, fig.height=4.2}\nggplot(sa_co2, aes(x = year, y = rank, color = country)) +\n  geom_line(linewidth = 2) +\n  geom_point(size = 4) +\n  geom_text(data = filter(sa_co2, year == 2004),\n            aes(label = iso2c, x = 2003.25),\n            fontface = \"bold\") +\n  geom_text(data = filter(sa_co2, year == 2014),\n            aes(label = iso2c, x = 2014.75),\n            fontface = \"bold\") +\n  guides(color = \"none\") +\n  scale_y_reverse(breaks = 1:8) +\n  scale_x_continuous(breaks = 2004:2014) +\n  scale_color_viridis_d(option = \"magma\", begin = 0.2, end = 0.9) +\n  labs(x = NULL, y = \"Rank\") +\n  theme_minimal() +\n  theme(panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.minor.x = element_blank())\n```\n\nIf you want to be *super* fancy, you can use flags instead of country codes, but that's a little more complicated (you need to install the [{ggflags} package](https://github.com/rensa/ggflags). [See here for an example](https://dominikkoch.github.io/Bump-Chart/).\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"highlight-style":"monokai","toc-depth":4,"filters":["../filters/format_date_end.lua"],"output-file":"08-example.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["../files/bib/readings.bib"],"csl":"../files/bib/chicago-author-date.csl","_quarto-vars":{"author":"Andrew Heiss","instructor":{"name":"Dr. Andrew Heiss","name_no_title":"Andrew Heiss","email":"aheiss@gsu.edu","url":"https://www.andrewheiss.com","twitter":"andrewheiss","github":"andrewheiss","office":"55 Park Place SE, Room 464","contact_policy":"E-mail and Slack are the best ways to get in contact with me. I will try to respond to all course-related e-mails and Slack messages within 24 hours (*really*), but also remember that life can be busy and chaotic for everyone (including me!), so if I don't respond right away, don't worry!","appointment_url":"https://calendly.com/andrewheiss/"},"course":{"number":"PMAP 8551/4551","semester":"Fall 2023","days":"Any day","time":"Asynchronous","location":"Anywhere","dates":"August 12–December 11, 2023","github":"https://www.github.com/andrewheiss/datavizf23.classes.andrewheiss.com","url":"https://datavizf23.classes.andrewheiss.com","copyright_year":"2023","slack":"https://gsudatavizf2023.slack.com"},"university":{"name":"Georgia State University","url":"https://www.gsu.edu"},"school":{"name":"Andrew Young School of Policy Studies","url":"https://aysps.gsu.edu/"}},"theme":["litera","../html/custom.scss"],"date-heading":{"content":"Example for","class":"bg-example"},"date-format":"full","template-partials":["../html/title-block.html"],"title":"Comparisons","date":"2023-10-09","date_end":"2023-10-13"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}