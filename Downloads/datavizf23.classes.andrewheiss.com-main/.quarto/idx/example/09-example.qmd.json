{"title":"Annotations","markdown":{"yaml":{"title":"Annotations","date":"2023-10-16","date_end":"2023-10-20"},"headingText":"Live coding example","containsRefs":false,"markdown":"\n\n```{r load-targets, include=FALSE}\nwithr::with_dir(here::here(), {\n  wdi_path <- targets::tar_read(data_wdi_annotations)\n})\n```\n\nFor this example, we're again going to use cross-national data from the [World Bank's Open Data portal](https://data.worldbank.org/). We'll download the data with the [{WDI} package](https://cran.r-project.org/web/packages/WDI/index.html).\n\nIf you want to skip the data downloading, you can download the data below (you'll likely need to right click and choose \"Save Link As…\"):\n\n- [{{< fa file-csv >}} `wdi_annotations.csv`](/`r wdi_path`)\n\n\n\n<div class=\"ratio ratio-16x9\">\n<iframe src=\"https://www.youtube.com/embed/gMSMsOy7KF0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"></iframe>\n</div>\n\n\n::: {.callout-important}\n### Slight differences from the video\n\nThis is a slightly cleaned up version of the code from the video.\n:::\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(fig.width = 6, fig.height = 3.6, fig.align = \"center\", collapse = TRUE)\nset.seed(1234)\noptions(\"digits\" = 2, \"width\" = 150)\n```\n\n\n## Load data\n\nFirst, we load the libraries we'll be using:\n\n```{r load-libraries, message=FALSE, warning=FALSE}\nlibrary(tidyverse)  # For ggplot, dplyr, and friends\nlibrary(WDI)        # Get data from the World Bank\nlibrary(ggrepel)    # For non-overlapping labels\nlibrary(ggtext)     # For fancier text handling\n```\n\n```{r get-wdi-fake, eval=FALSE}\nindicators <- c(population = \"SP.POP.TOTL\",  # Population\n                co2_emissions = \"EN.ATM.CO2E.PC\",  # CO2 emissions\n                gdp_per_cap = \"NY.GDP.PCAP.KD\")  # GDP per capita\n\nwdi_co2_raw <- WDI(country = \"all\", indicators, extra = TRUE, \n                   start = 1995, end = 2015)\n```\n\n```{r load-data-real, include=FALSE}\nwdi_co2_raw <- read_csv(here::here(wdi_path))\n```\n\nThen we clean the data by removing non-country countries:\n\n```{r clean-data}\nwdi_clean <- wdi_co2_raw %>% \n  filter(region != \"Aggregates\")\n```\n\n## Clean and reshape data\n\nNext we'll do some substantial filtering and reshaping so that we can end up with the rankings of CO~2~ emissions in 1995 and 2014. I annotate as much as possible below so you can see what's happening in each step.\n\n```{r rearrange-data}\nco2_rankings <- wdi_clean %>% \n  # Get rid of smaller countries\n  filter(population > 200000) %>% \n  # Only look at two years\n  filter(year %in% c(1995, 2014)) %>% \n  # Get rid of all the rows that have missing values in co2_emissions\n  drop_na(co2_emissions) %>% \n  # Look at each year individually and rank countries based on their emissions that year\n  group_by(year) %>% \n  mutate(ranking = rank(co2_emissions)) %>% \n  ungroup() %>% \n  # Only select a handful of columns, mostly just the newly created \"ranking\"\n  # column and some country identifiers\n  select(iso3c, country, year, region, income, ranking) %>% \n  # Right now the data is tidy and long, but we want to widen it and create\n  # separate columns for emissions in 1995 and in 2014. pivot_wider() will make\n  # new columns based on the existing \"year\" column (that's what `names_from`\n  # does), and it will add \"rank_\" as the prefix, so that the new columns will\n  # be \"rank_1995\" and \"rank_2014\". The values that go in those new columns will\n  # come from the existing \"ranking\" column\n  pivot_wider(names_from = year, names_prefix = \"rank_\", values_from = ranking) %>% \n  # Find the difference in ranking between 2014 and 1995\n  mutate(rank_diff = rank_2014 - rank_1995) %>% \n  # Remove all rows where there's a missing value in the rank_diff column\n  drop_na(rank_diff) %>% \n  # Make an indicator variable that is true of the absolute value of the\n  # difference in rankings is greater than 25. 25 is arbitrary here—that just\n  # felt like a big change in rankings\n  mutate(big_change = ifelse(abs(rank_diff) >= 25, TRUE, FALSE)) %>% \n  # Make another indicator variable that indicates if the rank improved by a\n  # lot, worsened by a lot, or didn't change much. We use the case_when()\n  # function, which is like a fancy version of ifelse() that takes multiple\n  # conditions. This is how it generally works:\n  #\n  # case_when(\n  #  some_test ~ value_if_true,\n  #  some_other_test ~ value_if_true,\n  #  TRUE ~ value_otherwise\n  #)\n  mutate(better_big_change = case_when(\n    rank_diff <= -25 ~ \"Rank improved\",\n    rank_diff >= 25 ~ \"Rank worsened\",\n    TRUE ~ \"Rank changed a little\"\n  ))\n```\n\nHere's what that reshaped data looked like before:\n\n```{r show-head-original}\nhead(wdi_clean)\n```\n\nAnd here's what it looks like now:\n\n```{r show-head-new}\nhead(co2_rankings)\n```\n\n## Plot the data and annotate\n\nI use IBM Plex Sans in this plot. You can [download it from Google Fonts](https://fonts.google.com/specimen/IBM+Plex+Sans).\n\n```{r build-pretty-plot, fig.width=10, fig.height=6}\n# These three functions make it so all geoms that use text, label, and\n# label_repel will use IBM Plex Sans as the font. Those layers are *not*\n# influenced by whatever you include in the base_family argument in something\n# like theme_bw(), so ordinarily you'd need to specify the font in each\n# individual annotate(geom = \"text\") layer or geom_label() layer, and that's\n# tedious! This removes that tediousness.\nupdate_geom_defaults(\"text\", list(family = \"IBM Plex Sans\"))\nupdate_geom_defaults(\"label\", list(family = \"IBM Plex Sans\"))\nupdate_geom_defaults(\"label_repel\", list(family = \"IBM Plex Sans\"))\n\nggplot(co2_rankings,\n       aes(x = rank_1995, y = rank_2014)) +\n  # Add a reference line that goes from the bottom corner to the top corner\n  annotate(geom = \"segment\", x = 0, xend = 175, y = 0, yend = 175) +\n  # Add points and color them by the type of change in rankings\n  geom_point(aes(color = better_big_change)) +\n  # Add repelled labels. Only use data where big_change is TRUE. Fill them by\n  # the type of change (so they match the color in geom_point() above) and use\n  # white text\n  geom_label_repel(data = filter(co2_rankings, big_change == TRUE),\n                   aes(label = country, fill = better_big_change),\n                   color = \"white\") +\n  # Add notes about what the outliers mean in the bottom left and top right\n  # corners. These are italicized and light grey. The text in the bottom corner\n  # is justified to the right with hjust = 1, and the text in the top corner is\n  # justified to the left with hjust = 0\n  annotate(geom = \"text\", x = 170, y = 6, label = \"Outliers improving\", \n           fontface = \"italic\", hjust = 1, color = \"grey50\") +\n  annotate(geom = \"text\", x = 2, y = 170, label = \"Outliers worsening\", \n           fontface = \"italic\", hjust = 0, color = \"grey50\") +\n  # Add mostly transparent rectangles in the bottom right and top left corners\n  annotate(geom = \"rect\", xmin = 0, xmax = 25, ymin = 0, ymax = 25, \n           fill = \"#2ECC40\", alpha = 0.25) +\n  annotate(geom = \"rect\", xmin = 150, xmax = 175, ymin = 150, ymax = 175, \n           fill = \"#FF851B\", alpha = 0.25) +\n  # Add text to define what the rectangles abovee actually mean. The \\n in\n  # \"highest\\nemitters\" will put a line break in the label\n  annotate(geom = \"text\", x = 40, y = 6, label = \"Lowest emitters\", \n           hjust = 0, color = \"#2ECC40\") +\n  annotate(geom = \"text\", x = 162.5, y = 135, label = \"Highest\\nemitters\", \n           hjust = 0.5, vjust = 1, lineheight = 1, color = \"#FF851B\") +\n  # Add arrows between the text and the rectangles. These use the segment geom,\n  # and the arrows are added with the arrow() function, which lets us define the\n  # angle of the arrowhead and the length of the arrowhead pieces. Here we use\n  # 0.5 lines, which is a unit of measurement that ggplot uses internally (think\n  # of how many lines of text fit in the plot). We could also use unit(1, \"cm\")\n  # or unit(0.25, \"in\") or anything else\n  annotate(geom = \"segment\", x = 38, xend = 20, y = 6, yend = 6, color = \"#2ECC40\", \n           arrow = arrow(angle = 15, length = unit(0.5, \"lines\"))) +\n  annotate(geom = \"segment\", x = 162.5, xend = 162.5, y = 140, yend = 155, color = \"#FF851B\", \n           arrow = arrow(angle = 15, length = unit(0.5, \"lines\"))) +\n  # Use three different colors for the points\n  scale_color_manual(values = c(\"grey50\", \"#0074D9\", \"#FF4136\")) +\n  # Use two different colors for the filled labels. There are no grey labels, so\n  # we don't have to specify that color\n  scale_fill_manual(values = c(\"#0074D9\", \"#FF4136\")) +\n  # Make the x and y axes expand all the way to the edges of the plot area and\n  # add breaks every 25 units from 0 to 175\n  scale_x_continuous(expand = c(0, 0), breaks = seq(0, 175, 25)) +\n  scale_y_continuous(expand = c(0, 0), breaks = seq(0, 175, 25)) +\n  # Add labels! There are a couple fancy things here.\n  # 1. In the title we wrap the 2 of CO2 in the HTML <sub></sub> tag so that the\n  #    number gets subscripted. The only way this will actually get parsed as \n  #    HTML is if we tell the plot.title to use element_markdown() in the \n  #    theme() function, and element_markdown() comes from the ggtext package.\n  # 2. In the subtitle we bold the two words **improved** and **worsened** using\n  #    Markdown asterisks. We also wrap these words with HTML span tags with \n  #    inline CSS to specify the color of the text. Like the title, this will \n  #    only be processed and parsed as HTML and Markdown if we tell the p\n  #    lot.subtitle to use element_markdown() in the theme() function.\n  labs(x = \"Rank in 1995\", y = \"Rank in 2014\",\n       title = \"Changes in CO<sub>2</sub> emission rankings between 1995 and 2014\",\n       subtitle = \"Countries that <span style='color: #0074D9'>**improved**</span> or <span style='color: #FF4136'>**worsened**</span> more than 25 positions in the rankings highlighted\",\n       caption = \"Source: The World Bank.\\nCountries with populations of less than 200,000 excluded.\") +\n  # Turn off the legends for color and fill, since the subtitle includes that\n  guides(color = \"none\", fill = \"none\") +\n  # Use theme_bw() with IBM Plex Sans\n  theme_bw(base_family = \"IBM Plex Sans\") +\n  # Tell the title and subtitle to be treated as Markdown/HTML, make the title\n  # 1.6x the size of the base font, and make the subtitle 1.3x the size of the\n  # base font. Also add a little larger margin on the right of the plot so that\n  # the 175 doesn't get cut off.\n  theme(plot.title = element_markdown(face = \"bold\", size = rel(1.6)),\n        plot.subtitle = element_markdown(size = rel(1.3)),\n        plot.margin = unit(c(0.5, 1, 0.5, 0.5), units = \"lines\"))\n```\n","srcMarkdownNoYaml":"\n\n```{r load-targets, include=FALSE}\nwithr::with_dir(here::here(), {\n  wdi_path <- targets::tar_read(data_wdi_annotations)\n})\n```\n\nFor this example, we're again going to use cross-national data from the [World Bank's Open Data portal](https://data.worldbank.org/). We'll download the data with the [{WDI} package](https://cran.r-project.org/web/packages/WDI/index.html).\n\nIf you want to skip the data downloading, you can download the data below (you'll likely need to right click and choose \"Save Link As…\"):\n\n- [{{< fa file-csv >}} `wdi_annotations.csv`](/`r wdi_path`)\n\n\n## Live coding example\n\n<div class=\"ratio ratio-16x9\">\n<iframe src=\"https://www.youtube.com/embed/gMSMsOy7KF0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"></iframe>\n</div>\n\n\n::: {.callout-important}\n### Slight differences from the video\n\nThis is a slightly cleaned up version of the code from the video.\n:::\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(fig.width = 6, fig.height = 3.6, fig.align = \"center\", collapse = TRUE)\nset.seed(1234)\noptions(\"digits\" = 2, \"width\" = 150)\n```\n\n\n## Load data\n\nFirst, we load the libraries we'll be using:\n\n```{r load-libraries, message=FALSE, warning=FALSE}\nlibrary(tidyverse)  # For ggplot, dplyr, and friends\nlibrary(WDI)        # Get data from the World Bank\nlibrary(ggrepel)    # For non-overlapping labels\nlibrary(ggtext)     # For fancier text handling\n```\n\n```{r get-wdi-fake, eval=FALSE}\nindicators <- c(population = \"SP.POP.TOTL\",  # Population\n                co2_emissions = \"EN.ATM.CO2E.PC\",  # CO2 emissions\n                gdp_per_cap = \"NY.GDP.PCAP.KD\")  # GDP per capita\n\nwdi_co2_raw <- WDI(country = \"all\", indicators, extra = TRUE, \n                   start = 1995, end = 2015)\n```\n\n```{r load-data-real, include=FALSE}\nwdi_co2_raw <- read_csv(here::here(wdi_path))\n```\n\nThen we clean the data by removing non-country countries:\n\n```{r clean-data}\nwdi_clean <- wdi_co2_raw %>% \n  filter(region != \"Aggregates\")\n```\n\n## Clean and reshape data\n\nNext we'll do some substantial filtering and reshaping so that we can end up with the rankings of CO~2~ emissions in 1995 and 2014. I annotate as much as possible below so you can see what's happening in each step.\n\n```{r rearrange-data}\nco2_rankings <- wdi_clean %>% \n  # Get rid of smaller countries\n  filter(population > 200000) %>% \n  # Only look at two years\n  filter(year %in% c(1995, 2014)) %>% \n  # Get rid of all the rows that have missing values in co2_emissions\n  drop_na(co2_emissions) %>% \n  # Look at each year individually and rank countries based on their emissions that year\n  group_by(year) %>% \n  mutate(ranking = rank(co2_emissions)) %>% \n  ungroup() %>% \n  # Only select a handful of columns, mostly just the newly created \"ranking\"\n  # column and some country identifiers\n  select(iso3c, country, year, region, income, ranking) %>% \n  # Right now the data is tidy and long, but we want to widen it and create\n  # separate columns for emissions in 1995 and in 2014. pivot_wider() will make\n  # new columns based on the existing \"year\" column (that's what `names_from`\n  # does), and it will add \"rank_\" as the prefix, so that the new columns will\n  # be \"rank_1995\" and \"rank_2014\". The values that go in those new columns will\n  # come from the existing \"ranking\" column\n  pivot_wider(names_from = year, names_prefix = \"rank_\", values_from = ranking) %>% \n  # Find the difference in ranking between 2014 and 1995\n  mutate(rank_diff = rank_2014 - rank_1995) %>% \n  # Remove all rows where there's a missing value in the rank_diff column\n  drop_na(rank_diff) %>% \n  # Make an indicator variable that is true of the absolute value of the\n  # difference in rankings is greater than 25. 25 is arbitrary here—that just\n  # felt like a big change in rankings\n  mutate(big_change = ifelse(abs(rank_diff) >= 25, TRUE, FALSE)) %>% \n  # Make another indicator variable that indicates if the rank improved by a\n  # lot, worsened by a lot, or didn't change much. We use the case_when()\n  # function, which is like a fancy version of ifelse() that takes multiple\n  # conditions. This is how it generally works:\n  #\n  # case_when(\n  #  some_test ~ value_if_true,\n  #  some_other_test ~ value_if_true,\n  #  TRUE ~ value_otherwise\n  #)\n  mutate(better_big_change = case_when(\n    rank_diff <= -25 ~ \"Rank improved\",\n    rank_diff >= 25 ~ \"Rank worsened\",\n    TRUE ~ \"Rank changed a little\"\n  ))\n```\n\nHere's what that reshaped data looked like before:\n\n```{r show-head-original}\nhead(wdi_clean)\n```\n\nAnd here's what it looks like now:\n\n```{r show-head-new}\nhead(co2_rankings)\n```\n\n## Plot the data and annotate\n\nI use IBM Plex Sans in this plot. You can [download it from Google Fonts](https://fonts.google.com/specimen/IBM+Plex+Sans).\n\n```{r build-pretty-plot, fig.width=10, fig.height=6}\n# These three functions make it so all geoms that use text, label, and\n# label_repel will use IBM Plex Sans as the font. Those layers are *not*\n# influenced by whatever you include in the base_family argument in something\n# like theme_bw(), so ordinarily you'd need to specify the font in each\n# individual annotate(geom = \"text\") layer or geom_label() layer, and that's\n# tedious! This removes that tediousness.\nupdate_geom_defaults(\"text\", list(family = \"IBM Plex Sans\"))\nupdate_geom_defaults(\"label\", list(family = \"IBM Plex Sans\"))\nupdate_geom_defaults(\"label_repel\", list(family = \"IBM Plex Sans\"))\n\nggplot(co2_rankings,\n       aes(x = rank_1995, y = rank_2014)) +\n  # Add a reference line that goes from the bottom corner to the top corner\n  annotate(geom = \"segment\", x = 0, xend = 175, y = 0, yend = 175) +\n  # Add points and color them by the type of change in rankings\n  geom_point(aes(color = better_big_change)) +\n  # Add repelled labels. Only use data where big_change is TRUE. Fill them by\n  # the type of change (so they match the color in geom_point() above) and use\n  # white text\n  geom_label_repel(data = filter(co2_rankings, big_change == TRUE),\n                   aes(label = country, fill = better_big_change),\n                   color = \"white\") +\n  # Add notes about what the outliers mean in the bottom left and top right\n  # corners. These are italicized and light grey. The text in the bottom corner\n  # is justified to the right with hjust = 1, and the text in the top corner is\n  # justified to the left with hjust = 0\n  annotate(geom = \"text\", x = 170, y = 6, label = \"Outliers improving\", \n           fontface = \"italic\", hjust = 1, color = \"grey50\") +\n  annotate(geom = \"text\", x = 2, y = 170, label = \"Outliers worsening\", \n           fontface = \"italic\", hjust = 0, color = \"grey50\") +\n  # Add mostly transparent rectangles in the bottom right and top left corners\n  annotate(geom = \"rect\", xmin = 0, xmax = 25, ymin = 0, ymax = 25, \n           fill = \"#2ECC40\", alpha = 0.25) +\n  annotate(geom = \"rect\", xmin = 150, xmax = 175, ymin = 150, ymax = 175, \n           fill = \"#FF851B\", alpha = 0.25) +\n  # Add text to define what the rectangles abovee actually mean. The \\n in\n  # \"highest\\nemitters\" will put a line break in the label\n  annotate(geom = \"text\", x = 40, y = 6, label = \"Lowest emitters\", \n           hjust = 0, color = \"#2ECC40\") +\n  annotate(geom = \"text\", x = 162.5, y = 135, label = \"Highest\\nemitters\", \n           hjust = 0.5, vjust = 1, lineheight = 1, color = \"#FF851B\") +\n  # Add arrows between the text and the rectangles. These use the segment geom,\n  # and the arrows are added with the arrow() function, which lets us define the\n  # angle of the arrowhead and the length of the arrowhead pieces. Here we use\n  # 0.5 lines, which is a unit of measurement that ggplot uses internally (think\n  # of how many lines of text fit in the plot). We could also use unit(1, \"cm\")\n  # or unit(0.25, \"in\") or anything else\n  annotate(geom = \"segment\", x = 38, xend = 20, y = 6, yend = 6, color = \"#2ECC40\", \n           arrow = arrow(angle = 15, length = unit(0.5, \"lines\"))) +\n  annotate(geom = \"segment\", x = 162.5, xend = 162.5, y = 140, yend = 155, color = \"#FF851B\", \n           arrow = arrow(angle = 15, length = unit(0.5, \"lines\"))) +\n  # Use three different colors for the points\n  scale_color_manual(values = c(\"grey50\", \"#0074D9\", \"#FF4136\")) +\n  # Use two different colors for the filled labels. There are no grey labels, so\n  # we don't have to specify that color\n  scale_fill_manual(values = c(\"#0074D9\", \"#FF4136\")) +\n  # Make the x and y axes expand all the way to the edges of the plot area and\n  # add breaks every 25 units from 0 to 175\n  scale_x_continuous(expand = c(0, 0), breaks = seq(0, 175, 25)) +\n  scale_y_continuous(expand = c(0, 0), breaks = seq(0, 175, 25)) +\n  # Add labels! There are a couple fancy things here.\n  # 1. In the title we wrap the 2 of CO2 in the HTML <sub></sub> tag so that the\n  #    number gets subscripted. The only way this will actually get parsed as \n  #    HTML is if we tell the plot.title to use element_markdown() in the \n  #    theme() function, and element_markdown() comes from the ggtext package.\n  # 2. In the subtitle we bold the two words **improved** and **worsened** using\n  #    Markdown asterisks. We also wrap these words with HTML span tags with \n  #    inline CSS to specify the color of the text. Like the title, this will \n  #    only be processed and parsed as HTML and Markdown if we tell the p\n  #    lot.subtitle to use element_markdown() in the theme() function.\n  labs(x = \"Rank in 1995\", y = \"Rank in 2014\",\n       title = \"Changes in CO<sub>2</sub> emission rankings between 1995 and 2014\",\n       subtitle = \"Countries that <span style='color: #0074D9'>**improved**</span> or <span style='color: #FF4136'>**worsened**</span> more than 25 positions in the rankings highlighted\",\n       caption = \"Source: The World Bank.\\nCountries with populations of less than 200,000 excluded.\") +\n  # Turn off the legends for color and fill, since the subtitle includes that\n  guides(color = \"none\", fill = \"none\") +\n  # Use theme_bw() with IBM Plex Sans\n  theme_bw(base_family = \"IBM Plex Sans\") +\n  # Tell the title and subtitle to be treated as Markdown/HTML, make the title\n  # 1.6x the size of the base font, and make the subtitle 1.3x the size of the\n  # base font. Also add a little larger margin on the right of the plot so that\n  # the 175 doesn't get cut off.\n  theme(plot.title = element_markdown(face = \"bold\", size = rel(1.6)),\n        plot.subtitle = element_markdown(size = rel(1.3)),\n        plot.margin = unit(c(0.5, 1, 0.5, 0.5), units = \"lines\"))\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"highlight-style":"monokai","toc-depth":4,"filters":["../filters/format_date_end.lua"],"output-file":"09-example.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["../files/bib/readings.bib"],"csl":"../files/bib/chicago-author-date.csl","_quarto-vars":{"author":"Andrew Heiss","instructor":{"name":"Dr. Andrew Heiss","name_no_title":"Andrew Heiss","email":"aheiss@gsu.edu","url":"https://www.andrewheiss.com","twitter":"andrewheiss","github":"andrewheiss","office":"55 Park Place SE, Room 464","contact_policy":"E-mail and Slack are the best ways to get in contact with me. I will try to respond to all course-related e-mails and Slack messages within 24 hours (*really*), but also remember that life can be busy and chaotic for everyone (including me!), so if I don't respond right away, don't worry!","appointment_url":"https://calendly.com/andrewheiss/"},"course":{"number":"PMAP 8551/4551","semester":"Fall 2023","days":"Any day","time":"Asynchronous","location":"Anywhere","dates":"August 12–December 11, 2023","github":"https://www.github.com/andrewheiss/datavizf23.classes.andrewheiss.com","url":"https://datavizf23.classes.andrewheiss.com","copyright_year":"2023","slack":"https://gsudatavizf2023.slack.com"},"university":{"name":"Georgia State University","url":"https://www.gsu.edu"},"school":{"name":"Andrew Young School of Policy Studies","url":"https://aysps.gsu.edu/"}},"theme":["litera","../html/custom.scss"],"date-heading":{"content":"Example for","class":"bg-example"},"date-format":"full","template-partials":["../html/title-block.html"],"title":"Annotations","date":"2023-10-16","date_end":"2023-10-20"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}