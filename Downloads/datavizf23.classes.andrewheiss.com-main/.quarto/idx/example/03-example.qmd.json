{"title":"Mapping data to graphics","markdown":{"yaml":{"title":"Mapping data to graphics","date":"2023-09-04","date_end":"2023-09-08"},"headingText":"Live coding example","containsRefs":false,"markdown":"\n\nFor this example, I'm going to use real world data to demonstrate the typical process for loading data, cleaning it up a bit, and mapping specific columns of the data onto the parts of a graph using the grammar of graphics and `ggplot()`. \n\nThe data I'll use comes from the BBC's corporate charity, [BBC Children in Need](https://www.bbcchildreninneed.co.uk/), which makes grants to smaller UK nonprofit organizations that work on issues related to childhood poverty. An organization in the UK named [360Giving](https://www.threesixtygiving.org/) helps nonprofits and foundations publish data about their grant giving activities in an open and standardized way, and (as of May 2020) [they list data from 126 different charities](http://data.threesixtygiving.org/), including BBC Children in Need.\n\nIf you want to follow along with this example (highly recommended!), you can download the data directly from [360Giving](http://data.threesixtygiving.org/) or by using this link:\n\n- [{{< fa file-excel >}} `360-giving-data.xlsx`](/files/data/external_data/360-giving-data.xlsx)\n\n\n\n::: {.callout-warning}\nI got carried away with this because I wanted to make it as comprehensive and detailed as possible, so it starts off with nothing and walks through the process of downloading data, creating a new project, and getting everything started. As such, it is ridiculously long (1 hour `r emoji::emoji(\"scream\")` `r emoji::emoji(\"scream\")`). Remember that there's no requirement that you watch these things—they're simply for your reference so you can see what doing this R stuff looks like in real time. The content all below the video is roughly the same (more polished even).\n\nThat said, it *is* a useful demonstration of how to get everything started and what it looks like to do an entire analysis, so there is value in it. Watch just the first part, or watch it on 2x or something.\n\nAnd I *promise* future examples will not be this long!\n:::\n\n<div class=\"ratio ratio-16x9\">\n<iframe src=\"https://www.youtube.com/embed/2N04T-3kZfw\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"></iframe>\n</div>\n\n\n::: {.callout-important}\n### Slight differences from the video\n\nThis is a slightly cleaned up version of the code from the video.\n:::\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  fig.width = 6, fig.height = 4, fig.align = \"center\", collapse = TRUE\n)\nset.seed(1234)\noptions(dplyr.summarise.inform = FALSE)\n```\n\n## Load and clean data\n\nFirst, we need to load a few libraries: {tidyverse} (as always) and {readxl} for reading Excel files:\n\n```{r load-libraries, warning=FALSE, message=FALSE}\n# Load libraries\nlibrary(tidyverse)  # For ggplot, dplyr, and friends\nlibrary(readxl)     # For reading Excel files\n```\n\nWe'll then load the original Excel file. I placed this file in a folder named `data` in my RStudio Project folder for this example. I like to read original data into an object named `whatever_raw` just in case it takes a long time to load (that way I don't have to keep reloading it every time I add a new column or do anything else with it). It's also good practice to keep a pristine, untouched copy of your data. \n\n```{r load-bbc-data-fake, eval=FALSE}\n# Load the original Excel file\nbbc_raw <- read_excel(\"data/360-giving-data.xlsx\")\n```\n\n```{r load-bbc-data, include=FALSE, warning=FALSE}\nbbc_raw <- read_excel(here::here(\"files\", \"data\", \"external_data\", \"360-giving-data.xlsx\"))\n```\n\nThere may be some errors reading the file—you can ignore those in this case.\n\nNext we'll add a couple columns and clean up the data a little. In the video I did this non-linearly—I came back to the top of the document to add columns when I needed them and then reran the chunk to create the data. \n\nWe'll extract the year from the Award Date column, rename some of the longer-named columns, and make a new column that shows the duration of grants. We'll also get rid of 2015 since there are so few observations then.\n\nNote the strange use of `` ` ``s around column names like `` `Award Date` ``. This is because R technically doesn't allow special characters like spaces in column names. If there are spaces, you have to wrap the column names in backticks. Because typing backticks all the time gets tedious, we'll use `rename()` to rename some of the columns: \n\n```{r clean-bbc-data}\nbbc <- bbc_raw %>% \n  # Extract the year from the award date\n  mutate(grant_year = year(`Award Date`)) %>% \n  # Rename some columns\n  rename(grant_amount = `Amount Awarded`,\n         grant_program = `Grant Programme:Title`,\n         grant_duration = `Planned Dates:Duration (months)`) %>% \n  # Make a new text-based version of the duration column, recoding months\n  # between 12-23, 23-35, and 36+. The case_when() function here lets us use\n  # multiple if/else conditions at the same time.\n  mutate(grant_duration_text = case_when(\n    grant_duration >= 12 & grant_duration < 24 ~ \"1 year\",\n    grant_duration >= 24 & grant_duration < 36 ~ \"2 years\",\n    grant_duration >= 36 ~ \"3 years\"\n  )) %>% \n  # Get rid of anything before 2016\n  filter(grant_year > 2015) %>% \n  # Make a categorical version of the year column\n  mutate(grant_year_category = factor(grant_year))\n```\n\n## Histograms\n\nFirst let's look at the distribution of grant amounts with a histogram. Map `grant_amount` to the x-axis and don't map anything to the y-axis, since `geom_histogram()` will calculate the y-axis values for us:\n\n```{r hist-basic}\nggplot(data = bbc, mapping = aes(x = grant_amount)) +\n  geom_histogram()\n```\n\nNotice that ggplot warns you about bin widths. By default it will divide the data into 30 equally spaced bins, which will most likely not be the best for your data. You should *always* set your own bin width to something more appropriate. There are no rules for correct bin widths. Just don't have them be too wide:\n\n```{r hist-wide-bin}\nggplot(data = bbc, mapping = aes(x = grant_amount)) +\n  geom_histogram(binwidth = 100000)\n```\n\nOr too small:\n\n```{r hist-tiny-bins}\nggplot(data = bbc, mapping = aes(x = grant_amount)) +\n  geom_histogram(binwidth = 500)\n```\n\n£10,000 seems to fit well. It's often helpful to add a white border to the histogram bars, too:\n\n```{r hist-good-bins}\nggplot(data = bbc, mapping = aes(x = grant_amount)) +\n  geom_histogram(binwidth = 10000, color = \"white\")\n```\n\nWe can map other variables onto the plot, like mapping `grant_year_category` to the fill aesthetic:\n\n```{r hist-bad-fill}\nggplot(bbc, aes(x = grant_amount, fill = grant_year_category)) +\n  geom_histogram(binwidth = 10000, color = \"white\")\n```\n\nThat gets really hard to interpret though, so we can facet by year with `facet_wrap()`:\n\n```{r hist-facet-fill}\nggplot(bbc, aes(x = grant_amount, fill = grant_year_category)) +\n  geom_histogram(binwidth = 10000, color = \"white\") +\n  facet_wrap(vars(grant_year))\n```\n\nNeat!\n\n## Points\n\nNext let's look at the data using points, mapping year to the x-axis and grant amount to the y-axis:\n\n```{r points-initial}\nggplot(bbc, aes(x = grant_year_category, y = grant_amount)) +\n  geom_point()\n```\n\nWe have some serious overplotting here, with dots so thick that it looks like lines. We can fix this a couple different ways. First, we can make the points semi-transparent using `alpha`, which ranges from 0 (completely invisible) to 1 (completely solid).\n\n```{r points-alpha}\nggplot(bbc, aes(x = grant_year_category, y = grant_amount)) +\n  geom_point(alpha = 0.1)\n```\n\nWe can also randomly space the points to spread them out using `position_jitter()`:\n\n```{r points-jitter-default}\nggplot(bbc, aes(x = grant_year_category, y = grant_amount)) +\n  geom_point(position = position_jitter())\n```\n\nOne issue with this, though, is that the points are jittered along the x-axis (which is fine, since they're all within the same year) *and* the y-axis (which is bad, since the amounts are actual numbers). We can tell ggplot to only jitter in one direction by specifying the `height` argument—we don't want any up-and-down jittering:\n\n```{r points-jitter-horizontal-only}\nggplot(bbc, aes(x = grant_year_category, y = grant_amount)) +\n  geom_point(position = position_jitter(height = 0))\n```\n\nThere are some weird clusters around £30,000 and below. Let's map `grant_program` to the color aesthetic, which has two categories—regular grants and small grants—and see if that helps explain why:\n\n```{r points-jitter-color}\nggplot(bbc, aes(x = grant_year_category, y = grant_amount, color = grant_program)) +\n  geom_point(position = position_jitter(height = 0))\n```\n\nIt does! We appear to have two different distributions of grants: small grants have a limit of £30,000, while regular grants have a much higher average amount.\n\n## Boxplots\n\nWe can add summary information to the plot by only changing the `geom` we're using. Switch from `geom_point()` to `geom_boxplot()`:\n\n```{r boxplot}\nggplot(bbc, aes(x = grant_year_category, y = grant_amount, color = grant_program)) +\n  geom_boxplot()\n```\n\n## Summaries\n\nWe can also make smaller summarized datasets with {dplyr} functions like `group_by()` and `summarize()` and plot those. First let's look at grant totals, averages, and counts over time:\n\n```{r make-data-year}\nbbc_by_year <- bbc %>% \n  group_by(grant_year) %>%  # Make invisible subgroups for each year\n  summarize(total = sum(grant_amount),  # Find the total awarded in each group\n            avg = mean(grant_amount),  # Find the average awarded in each group\n            number = n())  # n() is a special function that shows the number of rows in each group\n\n# Look at our summarized data\nbbc_by_year\n```\n\nBecause we used `summarize()`, R shrank our data down significantly. We now only have a row for each of the subgroups we made: one for each year. We can plot this smaller data. We'll use `geom_col()` for now (but in the next session you'll learn why this is actually bad for averages!)\n\n```{r plot-year-summaries}\n# Plot our summarized data\nggplot(bbc_by_year, aes(x = grant_year, y = avg)) +\n  geom_col()\nggplot(bbc_by_year, aes(x = grant_year, y = total)) +\n  geom_col()\nggplot(bbc_by_year, aes(x = grant_year, y = number)) +\n  geom_col()\n```\n\nBased on these charts, it looks like 2016 saw the largest average grant amount. In all other years, grants averaged around £60,000, but in 2016 it jumped up to £80,000. If we look at total grants, though, we can see that there were far fewer grants awarded in 2016—only 221! 2017 and 2018 were much bigger years with far more money awarded.\n\nWe can also use multiple aesthetics to reveal more information from the data. First we'll make a new small summary dataset and group by both year and grant program. With those groups, we'll again calculate the total, average, and number.\n\n```{r make-data-year-size}\nbbc_year_size <- bbc %>% \n  group_by(grant_year, grant_program) %>% \n  summarize(total = sum(grant_amount),\n            avg = mean(grant_amount),\n            number = n())\n\nbbc_year_size\n```\n\nNext we'll plot the data, mapping the `grant_program` column to the `fill` aesthetic:\n\n```{r plot-year-size}\nggplot(bbc_year_size, aes(x = grant_year, y = total, fill = grant_program)) +\n  geom_col()\n```\n\nBy default, ggplot will stack the different fill colors within the same bar, but this makes it a little hard to make comparisons. While we can see that the average small grant amount was a little bigger in 2017 than in 2019, it's harder to compare average main grant amount, since the bottoms of those sections don't align.\n\nTo fix this, we can use `position_dodge()` to tell the columns to fit side-by-side:\n\n```{r plot-year-size-dodge}\nggplot(bbc_year_size, aes(x = grant_year, y = total, fill = grant_program)) +\n  geom_col(position = position_dodge())\n```\n\nInstead of dodging, we can also facet by `grant_program` to separate the bars:\n\n```{r plot-year-size-facet}\nggplot(bbc_year_size, aes(x = grant_year, y = total, fill = grant_program)) +\n  geom_col() +\n  facet_wrap(vars(grant_program))\n```\n\nWe can put these in one column if we want:\n\n```{r plot-year-size-col}\nggplot(bbc_year_size, aes(x = grant_year, y = total, fill = grant_program)) +\n  geom_col() +\n  facet_wrap(vars(grant_program), ncol = 1)\n```\n\nFinally, we can include even more variables! We have a lot of aesthetics we can work with (`size`, `alpha`, `color`, `fill`, `linetype`, etc.), as well as facets, so let's add one more to show the duration of the awarded grant.\n\nFirst we'll make another smaller summarized dataset, grouping by year, program, and duration and summarizing the total, average, and number of awards.\n\n```{r make-data-year-size-duration}\nbbc_year_size_duration <- bbc %>% \n  group_by(grant_year, grant_program, grant_duration_text) %>% \n  summarize(total = sum(grant_amount),\n            avg = mean(grant_amount),\n            number = n())\n\nbbc_year_size_duration\n```\n\nNext, we'll fill by grant program and facet by duration and show the total number of grants awarded\n\n```{r plot-year-size-duration}\nggplot(bbc_year_size_duration, aes(x = grant_year, y = number, fill = grant_program)) +\n  geom_col(position = position_dodge(preserve = \"single\")) +\n  facet_wrap(vars(grant_duration_text), ncol = 1)\n```\n\nThe vast majority of BBC Children in Need's grants last for 3 years. Super neat.\n","srcMarkdownNoYaml":"\n\nFor this example, I'm going to use real world data to demonstrate the typical process for loading data, cleaning it up a bit, and mapping specific columns of the data onto the parts of a graph using the grammar of graphics and `ggplot()`. \n\nThe data I'll use comes from the BBC's corporate charity, [BBC Children in Need](https://www.bbcchildreninneed.co.uk/), which makes grants to smaller UK nonprofit organizations that work on issues related to childhood poverty. An organization in the UK named [360Giving](https://www.threesixtygiving.org/) helps nonprofits and foundations publish data about their grant giving activities in an open and standardized way, and (as of May 2020) [they list data from 126 different charities](http://data.threesixtygiving.org/), including BBC Children in Need.\n\nIf you want to follow along with this example (highly recommended!), you can download the data directly from [360Giving](http://data.threesixtygiving.org/) or by using this link:\n\n- [{{< fa file-excel >}} `360-giving-data.xlsx`](/files/data/external_data/360-giving-data.xlsx)\n\n\n## Live coding example\n\n::: {.callout-warning}\nI got carried away with this because I wanted to make it as comprehensive and detailed as possible, so it starts off with nothing and walks through the process of downloading data, creating a new project, and getting everything started. As such, it is ridiculously long (1 hour `r emoji::emoji(\"scream\")` `r emoji::emoji(\"scream\")`). Remember that there's no requirement that you watch these things—they're simply for your reference so you can see what doing this R stuff looks like in real time. The content all below the video is roughly the same (more polished even).\n\nThat said, it *is* a useful demonstration of how to get everything started and what it looks like to do an entire analysis, so there is value in it. Watch just the first part, or watch it on 2x or something.\n\nAnd I *promise* future examples will not be this long!\n:::\n\n<div class=\"ratio ratio-16x9\">\n<iframe src=\"https://www.youtube.com/embed/2N04T-3kZfw\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"></iframe>\n</div>\n\n\n::: {.callout-important}\n### Slight differences from the video\n\nThis is a slightly cleaned up version of the code from the video.\n:::\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  fig.width = 6, fig.height = 4, fig.align = \"center\", collapse = TRUE\n)\nset.seed(1234)\noptions(dplyr.summarise.inform = FALSE)\n```\n\n## Load and clean data\n\nFirst, we need to load a few libraries: {tidyverse} (as always) and {readxl} for reading Excel files:\n\n```{r load-libraries, warning=FALSE, message=FALSE}\n# Load libraries\nlibrary(tidyverse)  # For ggplot, dplyr, and friends\nlibrary(readxl)     # For reading Excel files\n```\n\nWe'll then load the original Excel file. I placed this file in a folder named `data` in my RStudio Project folder for this example. I like to read original data into an object named `whatever_raw` just in case it takes a long time to load (that way I don't have to keep reloading it every time I add a new column or do anything else with it). It's also good practice to keep a pristine, untouched copy of your data. \n\n```{r load-bbc-data-fake, eval=FALSE}\n# Load the original Excel file\nbbc_raw <- read_excel(\"data/360-giving-data.xlsx\")\n```\n\n```{r load-bbc-data, include=FALSE, warning=FALSE}\nbbc_raw <- read_excel(here::here(\"files\", \"data\", \"external_data\", \"360-giving-data.xlsx\"))\n```\n\nThere may be some errors reading the file—you can ignore those in this case.\n\nNext we'll add a couple columns and clean up the data a little. In the video I did this non-linearly—I came back to the top of the document to add columns when I needed them and then reran the chunk to create the data. \n\nWe'll extract the year from the Award Date column, rename some of the longer-named columns, and make a new column that shows the duration of grants. We'll also get rid of 2015 since there are so few observations then.\n\nNote the strange use of `` ` ``s around column names like `` `Award Date` ``. This is because R technically doesn't allow special characters like spaces in column names. If there are spaces, you have to wrap the column names in backticks. Because typing backticks all the time gets tedious, we'll use `rename()` to rename some of the columns: \n\n```{r clean-bbc-data}\nbbc <- bbc_raw %>% \n  # Extract the year from the award date\n  mutate(grant_year = year(`Award Date`)) %>% \n  # Rename some columns\n  rename(grant_amount = `Amount Awarded`,\n         grant_program = `Grant Programme:Title`,\n         grant_duration = `Planned Dates:Duration (months)`) %>% \n  # Make a new text-based version of the duration column, recoding months\n  # between 12-23, 23-35, and 36+. The case_when() function here lets us use\n  # multiple if/else conditions at the same time.\n  mutate(grant_duration_text = case_when(\n    grant_duration >= 12 & grant_duration < 24 ~ \"1 year\",\n    grant_duration >= 24 & grant_duration < 36 ~ \"2 years\",\n    grant_duration >= 36 ~ \"3 years\"\n  )) %>% \n  # Get rid of anything before 2016\n  filter(grant_year > 2015) %>% \n  # Make a categorical version of the year column\n  mutate(grant_year_category = factor(grant_year))\n```\n\n## Histograms\n\nFirst let's look at the distribution of grant amounts with a histogram. Map `grant_amount` to the x-axis and don't map anything to the y-axis, since `geom_histogram()` will calculate the y-axis values for us:\n\n```{r hist-basic}\nggplot(data = bbc, mapping = aes(x = grant_amount)) +\n  geom_histogram()\n```\n\nNotice that ggplot warns you about bin widths. By default it will divide the data into 30 equally spaced bins, which will most likely not be the best for your data. You should *always* set your own bin width to something more appropriate. There are no rules for correct bin widths. Just don't have them be too wide:\n\n```{r hist-wide-bin}\nggplot(data = bbc, mapping = aes(x = grant_amount)) +\n  geom_histogram(binwidth = 100000)\n```\n\nOr too small:\n\n```{r hist-tiny-bins}\nggplot(data = bbc, mapping = aes(x = grant_amount)) +\n  geom_histogram(binwidth = 500)\n```\n\n£10,000 seems to fit well. It's often helpful to add a white border to the histogram bars, too:\n\n```{r hist-good-bins}\nggplot(data = bbc, mapping = aes(x = grant_amount)) +\n  geom_histogram(binwidth = 10000, color = \"white\")\n```\n\nWe can map other variables onto the plot, like mapping `grant_year_category` to the fill aesthetic:\n\n```{r hist-bad-fill}\nggplot(bbc, aes(x = grant_amount, fill = grant_year_category)) +\n  geom_histogram(binwidth = 10000, color = \"white\")\n```\n\nThat gets really hard to interpret though, so we can facet by year with `facet_wrap()`:\n\n```{r hist-facet-fill}\nggplot(bbc, aes(x = grant_amount, fill = grant_year_category)) +\n  geom_histogram(binwidth = 10000, color = \"white\") +\n  facet_wrap(vars(grant_year))\n```\n\nNeat!\n\n## Points\n\nNext let's look at the data using points, mapping year to the x-axis and grant amount to the y-axis:\n\n```{r points-initial}\nggplot(bbc, aes(x = grant_year_category, y = grant_amount)) +\n  geom_point()\n```\n\nWe have some serious overplotting here, with dots so thick that it looks like lines. We can fix this a couple different ways. First, we can make the points semi-transparent using `alpha`, which ranges from 0 (completely invisible) to 1 (completely solid).\n\n```{r points-alpha}\nggplot(bbc, aes(x = grant_year_category, y = grant_amount)) +\n  geom_point(alpha = 0.1)\n```\n\nWe can also randomly space the points to spread them out using `position_jitter()`:\n\n```{r points-jitter-default}\nggplot(bbc, aes(x = grant_year_category, y = grant_amount)) +\n  geom_point(position = position_jitter())\n```\n\nOne issue with this, though, is that the points are jittered along the x-axis (which is fine, since they're all within the same year) *and* the y-axis (which is bad, since the amounts are actual numbers). We can tell ggplot to only jitter in one direction by specifying the `height` argument—we don't want any up-and-down jittering:\n\n```{r points-jitter-horizontal-only}\nggplot(bbc, aes(x = grant_year_category, y = grant_amount)) +\n  geom_point(position = position_jitter(height = 0))\n```\n\nThere are some weird clusters around £30,000 and below. Let's map `grant_program` to the color aesthetic, which has two categories—regular grants and small grants—and see if that helps explain why:\n\n```{r points-jitter-color}\nggplot(bbc, aes(x = grant_year_category, y = grant_amount, color = grant_program)) +\n  geom_point(position = position_jitter(height = 0))\n```\n\nIt does! We appear to have two different distributions of grants: small grants have a limit of £30,000, while regular grants have a much higher average amount.\n\n## Boxplots\n\nWe can add summary information to the plot by only changing the `geom` we're using. Switch from `geom_point()` to `geom_boxplot()`:\n\n```{r boxplot}\nggplot(bbc, aes(x = grant_year_category, y = grant_amount, color = grant_program)) +\n  geom_boxplot()\n```\n\n## Summaries\n\nWe can also make smaller summarized datasets with {dplyr} functions like `group_by()` and `summarize()` and plot those. First let's look at grant totals, averages, and counts over time:\n\n```{r make-data-year}\nbbc_by_year <- bbc %>% \n  group_by(grant_year) %>%  # Make invisible subgroups for each year\n  summarize(total = sum(grant_amount),  # Find the total awarded in each group\n            avg = mean(grant_amount),  # Find the average awarded in each group\n            number = n())  # n() is a special function that shows the number of rows in each group\n\n# Look at our summarized data\nbbc_by_year\n```\n\nBecause we used `summarize()`, R shrank our data down significantly. We now only have a row for each of the subgroups we made: one for each year. We can plot this smaller data. We'll use `geom_col()` for now (but in the next session you'll learn why this is actually bad for averages!)\n\n```{r plot-year-summaries}\n# Plot our summarized data\nggplot(bbc_by_year, aes(x = grant_year, y = avg)) +\n  geom_col()\nggplot(bbc_by_year, aes(x = grant_year, y = total)) +\n  geom_col()\nggplot(bbc_by_year, aes(x = grant_year, y = number)) +\n  geom_col()\n```\n\nBased on these charts, it looks like 2016 saw the largest average grant amount. In all other years, grants averaged around £60,000, but in 2016 it jumped up to £80,000. If we look at total grants, though, we can see that there were far fewer grants awarded in 2016—only 221! 2017 and 2018 were much bigger years with far more money awarded.\n\nWe can also use multiple aesthetics to reveal more information from the data. First we'll make a new small summary dataset and group by both year and grant program. With those groups, we'll again calculate the total, average, and number.\n\n```{r make-data-year-size}\nbbc_year_size <- bbc %>% \n  group_by(grant_year, grant_program) %>% \n  summarize(total = sum(grant_amount),\n            avg = mean(grant_amount),\n            number = n())\n\nbbc_year_size\n```\n\nNext we'll plot the data, mapping the `grant_program` column to the `fill` aesthetic:\n\n```{r plot-year-size}\nggplot(bbc_year_size, aes(x = grant_year, y = total, fill = grant_program)) +\n  geom_col()\n```\n\nBy default, ggplot will stack the different fill colors within the same bar, but this makes it a little hard to make comparisons. While we can see that the average small grant amount was a little bigger in 2017 than in 2019, it's harder to compare average main grant amount, since the bottoms of those sections don't align.\n\nTo fix this, we can use `position_dodge()` to tell the columns to fit side-by-side:\n\n```{r plot-year-size-dodge}\nggplot(bbc_year_size, aes(x = grant_year, y = total, fill = grant_program)) +\n  geom_col(position = position_dodge())\n```\n\nInstead of dodging, we can also facet by `grant_program` to separate the bars:\n\n```{r plot-year-size-facet}\nggplot(bbc_year_size, aes(x = grant_year, y = total, fill = grant_program)) +\n  geom_col() +\n  facet_wrap(vars(grant_program))\n```\n\nWe can put these in one column if we want:\n\n```{r plot-year-size-col}\nggplot(bbc_year_size, aes(x = grant_year, y = total, fill = grant_program)) +\n  geom_col() +\n  facet_wrap(vars(grant_program), ncol = 1)\n```\n\nFinally, we can include even more variables! We have a lot of aesthetics we can work with (`size`, `alpha`, `color`, `fill`, `linetype`, etc.), as well as facets, so let's add one more to show the duration of the awarded grant.\n\nFirst we'll make another smaller summarized dataset, grouping by year, program, and duration and summarizing the total, average, and number of awards.\n\n```{r make-data-year-size-duration}\nbbc_year_size_duration <- bbc %>% \n  group_by(grant_year, grant_program, grant_duration_text) %>% \n  summarize(total = sum(grant_amount),\n            avg = mean(grant_amount),\n            number = n())\n\nbbc_year_size_duration\n```\n\nNext, we'll fill by grant program and facet by duration and show the total number of grants awarded\n\n```{r plot-year-size-duration}\nggplot(bbc_year_size_duration, aes(x = grant_year, y = number, fill = grant_program)) +\n  geom_col(position = position_dodge(preserve = \"single\")) +\n  facet_wrap(vars(grant_duration_text), ncol = 1)\n```\n\nThe vast majority of BBC Children in Need's grants last for 3 years. Super neat.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"highlight-style":"monokai","toc-depth":4,"filters":["../filters/format_date_end.lua"],"output-file":"03-example.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["../files/bib/readings.bib"],"csl":"../files/bib/chicago-author-date.csl","_quarto-vars":{"author":"Andrew Heiss","instructor":{"name":"Dr. Andrew Heiss","name_no_title":"Andrew Heiss","email":"aheiss@gsu.edu","url":"https://www.andrewheiss.com","twitter":"andrewheiss","github":"andrewheiss","office":"55 Park Place SE, Room 464","contact_policy":"E-mail and Slack are the best ways to get in contact with me. I will try to respond to all course-related e-mails and Slack messages within 24 hours (*really*), but also remember that life can be busy and chaotic for everyone (including me!), so if I don't respond right away, don't worry!","appointment_url":"https://calendly.com/andrewheiss/"},"course":{"number":"PMAP 8551/4551","semester":"Fall 2023","days":"Any day","time":"Asynchronous","location":"Anywhere","dates":"August 12–December 11, 2023","github":"https://www.github.com/andrewheiss/datavizf23.classes.andrewheiss.com","url":"https://datavizf23.classes.andrewheiss.com","copyright_year":"2023","slack":"https://gsudatavizf2023.slack.com"},"university":{"name":"Georgia State University","url":"https://www.gsu.edu"},"school":{"name":"Andrew Young School of Policy Studies","url":"https://aysps.gsu.edu/"}},"theme":["litera","../html/custom.scss"],"date-heading":{"content":"Example for","class":"bg-example"},"date-format":"full","template-partials":["../html/title-block.html"],"title":"Mapping data to graphics","date":"2023-09-04","date_end":"2023-09-08"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}