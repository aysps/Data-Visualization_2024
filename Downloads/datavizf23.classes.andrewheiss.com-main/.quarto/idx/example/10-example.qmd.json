{"title":"Interactivity","markdown":{"yaml":{"title":"Interactivity","date":"2023-10-23","date_end":"2023-10-27"},"headingText":"Live coding example","containsRefs":false,"markdown":"\n\n```{r load-targets, include=FALSE}\nwithr::with_dir(here::here(), {\n  wdi_path <- targets::tar_read(data_wdi_parliament)\n})\n```\n\nFor this example we'll use data from the [World Bank](https://data.worldbank.org/) once again, which we download using the [{WDI} package](https://cran.r-project.org/web/packages/WDI/index.html).\n\nIf you want to skip the data downloading, you can download the data below (you'll likely need to right click and choose \"Save Link As…\"):\n\n- [{{< fa file-csv >}} `wdi_parliament.csv`](/`r wdi_path`)\n\n\n\nThere is no video for this one, since it really only involves feeding a few ggplot plots fed into `ggplotly()`.\n\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(fig.width = 6, fig.height = 3.6, fig.align = \"center\", collapse = TRUE)\nset.seed(1234)\noptions(\"digits\" = 2, \"width\" = 150)\n```\n\n## Get and clean data\n\nFirst, we load the libraries we'll be using:\n\n```{r load-libraries, message=FALSE, warning=FALSE}\nlibrary(tidyverse)  # For ggplot, dplyr, and friends\nlibrary(WDI)        # Get data from the World Bank\nlibrary(scales)     # For nicer label formatting\nlibrary(plotly)     # For easy interactive plots\n```\n\n```{r get-wdi-fake, eval=FALSE}\nindicators <- c(population = \"SP.POP.TOTL\",  # Population\n                prop_women_parl = \"SG.GEN.PARL.ZS\",  # Proportion of seats held by women in national parliaments (%)\n                gdp_per_cap = \"NY.GDP.PCAP.KD\")  # GDP per capita\n\nwdi_parl_raw <- WDI(country = \"all\", indicators, extra = TRUE, \n                    start = 2000, end = 2019)\n```\n\n```{r load-data-real, include=FALSE}\nwdi_parl_raw <- read_csv(here::here(wdi_path))\n```\n\nThen we clean the data by removing non-country countries:\n\n```{r clean-data}\nwdi_clean <- wdi_parl_raw %>% \n  filter(region != \"Aggregates\")\n```\n\n\n## Creating a basic interactive chart\n\nLet's make a chart that shows the distribution of the proportion of women in national parliaments in 2019, by continent. We'll use a strip plot with jittered points.\n\nFirst we need to make a regular static plot with ggplot:\n\n```{r strip-plot-basic}\nwdi_2019 <- wdi_clean %>% \n  filter(year == 2019) %>% \n  drop_na(prop_women_parl) %>% \n  # Scale this down from 0-100 to 0-1 so that scales::label_percent() can format\n  # it as an actual percent\n  mutate(prop_women_parl = prop_women_parl / 100)\n\nstatic_plot <- ggplot(wdi_2019, \n                      aes(y = fct_rev(region), x = prop_women_parl, color = region)) +\n  geom_point(position = position_jitter(width = 0, height = 0.15, seed = 1234)) +\n  guides(color = \"none\") +\n  scale_x_continuous(labels = label_percent()) +\n  # I used https://medialab.github.io/iwanthue/ to generate these colors\n  scale_color_manual(values = c(\"#425300\", \"#e680ff\", \"#01bd71\", \"#ff3aad\",\n                                \"#9f3e00\", \"#0146bf\", \"#671d56\")) +\n  labs(x = \"% women in parliament\", y = NULL, caption = \"Source: The World Bank\") +\n  theme_bw()\nstatic_plot\n```\n\nGreat! That looks pretty good.\n\nTo make it interactive, *all we have to do* is feed the `static_plot` object into `ggplotly()`. That's it.\n\n```{r strip-plot-basic-interactive}\nggplotly(static_plot)\n```\n\nNot *everything* translates over to JavaScript—the caption is gone now, and the legend is back (which is fine, I guess, since the legend is interactive). But still, this is magic.\n\n\n## Modifying the tooltip\n\nRight now, the default tooltip you see when you hover over the points includes the actual proportion of women in parliament for each point, along with the continent, which is neat, but it'd be great if we could see the country name too. The tooltip picks up the information to include from the variables we use in `aes()`, and we never map the `country` column to any aesthetic, so it doesn't show up.\n\nTo get around this, we can add a new aesthetic for country to the points. Instead of using one of the real ggplot aesthetics like `color` or `fill`, we'll use a fake one called `text` (we can call it whatever we want! `asdf` would also work). ggplot has no idea how to do anything with the `text` aesthetic, and it'll give you a warning, but that's okay. The static plot looks the same:\n\n```{r strip-plot-text-aes}\nstatic_plot_toolip <- ggplot(wdi_2019, \n                             aes(y = fct_rev(region), x = prop_women_parl, color = region)) +\n  geom_point(aes(text = country),\n             position = position_jitter(width = 0, height = 0.15, seed = 1234)) +\n  guides(color = \"none\") +\n  scale_x_continuous(labels = label_percent()) +\n  # I used https://medialab.github.io/iwanthue/ to generate these colors\n  scale_color_manual(values = c(\"#425300\", \"#e680ff\", \"#01bd71\", \"#ff3aad\",\n                                \"#9f3e00\", \"#0146bf\", \"#671d56\")) +\n  labs(x = \"% women in parliament\", y = NULL, caption = \"Source: The World Bank\") +\n  theme_bw()\nstatic_plot_toolip\n```\n\nNow we can tell plotly to use this fake `text` aesthetic for the tooltip:\n\n```{r strip-plot-text-interactive}\nggplotly(static_plot_toolip, tooltip = \"text\")\n```\n\nNow we should just see the country names in the tooltips!\n\n## Including more information in the tooltip\n\nWe have country names, but we lost the values in the x-axis. Rwanda has the highest proportion of women in parliament, but what's the exact number? It's somewhere above 60%, but that's all we can see now.\n\nTo fix this, we can make a new column in the data with all the text we want to include in the tooltip. We'll use `paste0()` to combine text and variable values to make the tooltip follow this format:\n\n```default\nName of country\nX% women in parliament\n```\n\nLet's add a new column with `mutate()`. A couple things to note here:\n\n- The `<br>` is HTML code for a line break\n\n- We use the `label_percent()` function to format numbers as percents. The `accuracy` argument tells R how many decimal points to use. If we used `1`, it would say 12%; if we used `0.01`, it would say 12.08%; etc.\n\n```{r nicer-tooltip}\nwdi_2019 <- wdi_clean %>% \n  filter(year == 2019) %>% \n  drop_na(prop_women_parl) %>% \n  # Scale this down from 0-100 to 0-1 so that scales::label_percent() can format\n  # it as an actual percent\n  mutate(prop_women_parl = prop_women_parl / 100) %>% \n  mutate(fancy_label = paste0(country, \"<br>\", \n                              label_percent(accuracy = 0.1)(prop_women_parl), \n                              \" women in parliament\"))\n```\n\nLet's check to see if it worked:\n\n```{r show-nicer-tooltip}\nwdi_2019 %>% select(country, prop_women_parl, fancy_label) %>% head()\n```\n\nNow instead of using `text = country` we'll use `text = fancy_label` to map that new column onto the plot. Again, this won't be visible in the static plot (and you'll get a warning), but it will show up in the interactive plot.\n\n```{r strip-plot-text-aes-fancy}\nstatic_plot_toolip_fancy <- ggplot(wdi_2019, \n                                   aes(y = fct_rev(region), \n                                       x = prop_women_parl, \n                                       color = region)) +\n  geom_point(aes(text = fancy_label),\n             position = position_jitter(width = 0, height = 0.15, seed = 1234)) +\n  guides(color = \"none\") +\n  scale_x_continuous(labels = label_percent()) +\n  # I used https://medialab.github.io/iwanthue/ to generate these colors\n  scale_color_manual(values = c(\"#425300\", \"#e680ff\", \"#01bd71\", \"#ff3aad\",\n                                \"#9f3e00\", \"#0146bf\", \"#671d56\")) +\n  labs(x = \"% women in parliament\", y = NULL, caption = \"Source: The World Bank\") +\n  theme_bw()\n```\n\n```{r strip-plot-text-interactive-fancy-fake}\nggplotly(static_plot_toolip_fancy, tooltip = \"text\")\n```\n\nPerfect!\n\nFinally, if we want to save this plot as a standalone self-contained HTML file, we can use the `saveWidget()` function from the {htmlwidgets} package.\n\n```{r save-widget, eval=FALSE}\n# This is like ggsave, but for interactive HTML plots\ninteractive_plot <- ggplotly(static_plot_toolip_fancy, tooltip = \"text\")\n\nhtmlwidgets::saveWidget(interactive_plot, \"fancy_plot.html\")\n```\n\n\n## Making a dashboard with {flexdashboard}\n\nThe [documentation for {flexdashboard} is so great and complete](https://rmarkdown.rstudio.com/flexdashboard/) that I'm not going to include a full example here. There is also a brief overview in [chapter 5 of the official R Markdown book](https://bookdown.org/yihui/rmarkdown/dashboards.html). You can also watch [this really quick video here](https://www.youtube.com/watch?v=_oDfBVr9wmQ). She uses a package called {dimple} instead of {plotly}, which doesn't work with ggplot like `ggplotly()`, so *ignore her code* about `dimple()` and use your `ggplotly()` skills instead. You can search YouTube for a bunch of other short tutorial videos, too.\n\nThe quickest and easiest way to get started is to install the {flexdashboard} package and then in RStudio go to File > New File… > R Markdown… > From Template > Flexdashboard:\n\n```{r flexdashboard-template, echo=FALSE, out.width=\"60%\"}\nknitr::include_graphics(\"/files/img/examples/flexdashboard-template.png\", error = FALSE)\n```\n\nThat will give you an empty dashboard with three chart areas spread across two columns. Put static or dynamic graphs in the different chart areas, knit, and you'll be good to go!\n\nIf you're interested in making the dashboard reactive with Shiny-like elements, [check out this tutorial](https://www.andrewheiss.com/blog/2020/01/01/flexdashboard-dynamic-data/).\n","srcMarkdownNoYaml":"\n\n```{r load-targets, include=FALSE}\nwithr::with_dir(here::here(), {\n  wdi_path <- targets::tar_read(data_wdi_parliament)\n})\n```\n\nFor this example we'll use data from the [World Bank](https://data.worldbank.org/) once again, which we download using the [{WDI} package](https://cran.r-project.org/web/packages/WDI/index.html).\n\nIf you want to skip the data downloading, you can download the data below (you'll likely need to right click and choose \"Save Link As…\"):\n\n- [{{< fa file-csv >}} `wdi_parliament.csv`](/`r wdi_path`)\n\n\n## Live coding example\n\nThere is no video for this one, since it really only involves feeding a few ggplot plots fed into `ggplotly()`.\n\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(fig.width = 6, fig.height = 3.6, fig.align = \"center\", collapse = TRUE)\nset.seed(1234)\noptions(\"digits\" = 2, \"width\" = 150)\n```\n\n## Get and clean data\n\nFirst, we load the libraries we'll be using:\n\n```{r load-libraries, message=FALSE, warning=FALSE}\nlibrary(tidyverse)  # For ggplot, dplyr, and friends\nlibrary(WDI)        # Get data from the World Bank\nlibrary(scales)     # For nicer label formatting\nlibrary(plotly)     # For easy interactive plots\n```\n\n```{r get-wdi-fake, eval=FALSE}\nindicators <- c(population = \"SP.POP.TOTL\",  # Population\n                prop_women_parl = \"SG.GEN.PARL.ZS\",  # Proportion of seats held by women in national parliaments (%)\n                gdp_per_cap = \"NY.GDP.PCAP.KD\")  # GDP per capita\n\nwdi_parl_raw <- WDI(country = \"all\", indicators, extra = TRUE, \n                    start = 2000, end = 2019)\n```\n\n```{r load-data-real, include=FALSE}\nwdi_parl_raw <- read_csv(here::here(wdi_path))\n```\n\nThen we clean the data by removing non-country countries:\n\n```{r clean-data}\nwdi_clean <- wdi_parl_raw %>% \n  filter(region != \"Aggregates\")\n```\n\n\n## Creating a basic interactive chart\n\nLet's make a chart that shows the distribution of the proportion of women in national parliaments in 2019, by continent. We'll use a strip plot with jittered points.\n\nFirst we need to make a regular static plot with ggplot:\n\n```{r strip-plot-basic}\nwdi_2019 <- wdi_clean %>% \n  filter(year == 2019) %>% \n  drop_na(prop_women_parl) %>% \n  # Scale this down from 0-100 to 0-1 so that scales::label_percent() can format\n  # it as an actual percent\n  mutate(prop_women_parl = prop_women_parl / 100)\n\nstatic_plot <- ggplot(wdi_2019, \n                      aes(y = fct_rev(region), x = prop_women_parl, color = region)) +\n  geom_point(position = position_jitter(width = 0, height = 0.15, seed = 1234)) +\n  guides(color = \"none\") +\n  scale_x_continuous(labels = label_percent()) +\n  # I used https://medialab.github.io/iwanthue/ to generate these colors\n  scale_color_manual(values = c(\"#425300\", \"#e680ff\", \"#01bd71\", \"#ff3aad\",\n                                \"#9f3e00\", \"#0146bf\", \"#671d56\")) +\n  labs(x = \"% women in parliament\", y = NULL, caption = \"Source: The World Bank\") +\n  theme_bw()\nstatic_plot\n```\n\nGreat! That looks pretty good.\n\nTo make it interactive, *all we have to do* is feed the `static_plot` object into `ggplotly()`. That's it.\n\n```{r strip-plot-basic-interactive}\nggplotly(static_plot)\n```\n\nNot *everything* translates over to JavaScript—the caption is gone now, and the legend is back (which is fine, I guess, since the legend is interactive). But still, this is magic.\n\n\n## Modifying the tooltip\n\nRight now, the default tooltip you see when you hover over the points includes the actual proportion of women in parliament for each point, along with the continent, which is neat, but it'd be great if we could see the country name too. The tooltip picks up the information to include from the variables we use in `aes()`, and we never map the `country` column to any aesthetic, so it doesn't show up.\n\nTo get around this, we can add a new aesthetic for country to the points. Instead of using one of the real ggplot aesthetics like `color` or `fill`, we'll use a fake one called `text` (we can call it whatever we want! `asdf` would also work). ggplot has no idea how to do anything with the `text` aesthetic, and it'll give you a warning, but that's okay. The static plot looks the same:\n\n```{r strip-plot-text-aes}\nstatic_plot_toolip <- ggplot(wdi_2019, \n                             aes(y = fct_rev(region), x = prop_women_parl, color = region)) +\n  geom_point(aes(text = country),\n             position = position_jitter(width = 0, height = 0.15, seed = 1234)) +\n  guides(color = \"none\") +\n  scale_x_continuous(labels = label_percent()) +\n  # I used https://medialab.github.io/iwanthue/ to generate these colors\n  scale_color_manual(values = c(\"#425300\", \"#e680ff\", \"#01bd71\", \"#ff3aad\",\n                                \"#9f3e00\", \"#0146bf\", \"#671d56\")) +\n  labs(x = \"% women in parliament\", y = NULL, caption = \"Source: The World Bank\") +\n  theme_bw()\nstatic_plot_toolip\n```\n\nNow we can tell plotly to use this fake `text` aesthetic for the tooltip:\n\n```{r strip-plot-text-interactive}\nggplotly(static_plot_toolip, tooltip = \"text\")\n```\n\nNow we should just see the country names in the tooltips!\n\n## Including more information in the tooltip\n\nWe have country names, but we lost the values in the x-axis. Rwanda has the highest proportion of women in parliament, but what's the exact number? It's somewhere above 60%, but that's all we can see now.\n\nTo fix this, we can make a new column in the data with all the text we want to include in the tooltip. We'll use `paste0()` to combine text and variable values to make the tooltip follow this format:\n\n```default\nName of country\nX% women in parliament\n```\n\nLet's add a new column with `mutate()`. A couple things to note here:\n\n- The `<br>` is HTML code for a line break\n\n- We use the `label_percent()` function to format numbers as percents. The `accuracy` argument tells R how many decimal points to use. If we used `1`, it would say 12%; if we used `0.01`, it would say 12.08%; etc.\n\n```{r nicer-tooltip}\nwdi_2019 <- wdi_clean %>% \n  filter(year == 2019) %>% \n  drop_na(prop_women_parl) %>% \n  # Scale this down from 0-100 to 0-1 so that scales::label_percent() can format\n  # it as an actual percent\n  mutate(prop_women_parl = prop_women_parl / 100) %>% \n  mutate(fancy_label = paste0(country, \"<br>\", \n                              label_percent(accuracy = 0.1)(prop_women_parl), \n                              \" women in parliament\"))\n```\n\nLet's check to see if it worked:\n\n```{r show-nicer-tooltip}\nwdi_2019 %>% select(country, prop_women_parl, fancy_label) %>% head()\n```\n\nNow instead of using `text = country` we'll use `text = fancy_label` to map that new column onto the plot. Again, this won't be visible in the static plot (and you'll get a warning), but it will show up in the interactive plot.\n\n```{r strip-plot-text-aes-fancy}\nstatic_plot_toolip_fancy <- ggplot(wdi_2019, \n                                   aes(y = fct_rev(region), \n                                       x = prop_women_parl, \n                                       color = region)) +\n  geom_point(aes(text = fancy_label),\n             position = position_jitter(width = 0, height = 0.15, seed = 1234)) +\n  guides(color = \"none\") +\n  scale_x_continuous(labels = label_percent()) +\n  # I used https://medialab.github.io/iwanthue/ to generate these colors\n  scale_color_manual(values = c(\"#425300\", \"#e680ff\", \"#01bd71\", \"#ff3aad\",\n                                \"#9f3e00\", \"#0146bf\", \"#671d56\")) +\n  labs(x = \"% women in parliament\", y = NULL, caption = \"Source: The World Bank\") +\n  theme_bw()\n```\n\n```{r strip-plot-text-interactive-fancy-fake}\nggplotly(static_plot_toolip_fancy, tooltip = \"text\")\n```\n\nPerfect!\n\nFinally, if we want to save this plot as a standalone self-contained HTML file, we can use the `saveWidget()` function from the {htmlwidgets} package.\n\n```{r save-widget, eval=FALSE}\n# This is like ggsave, but for interactive HTML plots\ninteractive_plot <- ggplotly(static_plot_toolip_fancy, tooltip = \"text\")\n\nhtmlwidgets::saveWidget(interactive_plot, \"fancy_plot.html\")\n```\n\n\n## Making a dashboard with {flexdashboard}\n\nThe [documentation for {flexdashboard} is so great and complete](https://rmarkdown.rstudio.com/flexdashboard/) that I'm not going to include a full example here. There is also a brief overview in [chapter 5 of the official R Markdown book](https://bookdown.org/yihui/rmarkdown/dashboards.html). You can also watch [this really quick video here](https://www.youtube.com/watch?v=_oDfBVr9wmQ). She uses a package called {dimple} instead of {plotly}, which doesn't work with ggplot like `ggplotly()`, so *ignore her code* about `dimple()` and use your `ggplotly()` skills instead. You can search YouTube for a bunch of other short tutorial videos, too.\n\nThe quickest and easiest way to get started is to install the {flexdashboard} package and then in RStudio go to File > New File… > R Markdown… > From Template > Flexdashboard:\n\n```{r flexdashboard-template, echo=FALSE, out.width=\"60%\"}\nknitr::include_graphics(\"/files/img/examples/flexdashboard-template.png\", error = FALSE)\n```\n\nThat will give you an empty dashboard with three chart areas spread across two columns. Put static or dynamic graphs in the different chart areas, knit, and you'll be good to go!\n\nIf you're interested in making the dashboard reactive with Shiny-like elements, [check out this tutorial](https://www.andrewheiss.com/blog/2020/01/01/flexdashboard-dynamic-data/).\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"highlight-style":"monokai","toc-depth":4,"filters":["../filters/format_date_end.lua"],"output-file":"10-example.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["../files/bib/readings.bib"],"csl":"../files/bib/chicago-author-date.csl","_quarto-vars":{"author":"Andrew Heiss","instructor":{"name":"Dr. Andrew Heiss","name_no_title":"Andrew Heiss","email":"aheiss@gsu.edu","url":"https://www.andrewheiss.com","twitter":"andrewheiss","github":"andrewheiss","office":"55 Park Place SE, Room 464","contact_policy":"E-mail and Slack are the best ways to get in contact with me. I will try to respond to all course-related e-mails and Slack messages within 24 hours (*really*), but also remember that life can be busy and chaotic for everyone (including me!), so if I don't respond right away, don't worry!","appointment_url":"https://calendly.com/andrewheiss/"},"course":{"number":"PMAP 8551/4551","semester":"Fall 2023","days":"Any day","time":"Asynchronous","location":"Anywhere","dates":"August 12–December 11, 2023","github":"https://www.github.com/andrewheiss/datavizf23.classes.andrewheiss.com","url":"https://datavizf23.classes.andrewheiss.com","copyright_year":"2023","slack":"https://gsudatavizf2023.slack.com"},"university":{"name":"Georgia State University","url":"https://www.gsu.edu"},"school":{"name":"Andrew Young School of Policy Studies","url":"https://aysps.gsu.edu/"}},"theme":["litera","../html/custom.scss"],"date-heading":{"content":"Example for","class":"bg-example"},"date-format":"full","template-partials":["../html/title-block.html"],"title":"Interactivity","date":"2023-10-23","date_end":"2023-10-27"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}