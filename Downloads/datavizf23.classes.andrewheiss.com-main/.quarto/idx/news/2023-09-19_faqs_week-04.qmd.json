{"title":"Week 4 FAQs","markdown":{"yaml":{"title":"Week 4 FAQs","date":"2023-09-19T09:22","categories":["FAQs"],"toc-depth":4},"headingText":"How can I make my R code more readable?","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  fig.width = 6, \n  fig.height = 6 * 0.618, \n  fig.align = \"center\", \n  out.width = \"90%\",\n  collapse = TRUE\n)\n\nlibrary(tidyverse)\n```\n\nHi everyone!\n\nGreat work this week with the essential construction data from exercise 4! It was a big dataset and you were able to show some interesting patterns with neat plots!\n\nJust a few FAQs this week—enjoy!\n\n\n\n*([This was a tip from last week](/news/2023-09-12_general-tips.qmd#code-style), but it's a good reminder.)*\n\nUnlike other programming langauges, R is pretty forgiving about code style. You can have lines of code that are indented however you want, that are as long as you want, and that have line breaks generally wherever you want.\n\nThere are some basic grammar-like guidelines you can follow to make your code more readable, more consistent, and easier for people to follow. [I've compiled a mini style guide here](/resource/style.qmd)—you should check it out and try implementing the suggestsions.\n\n\n### My axis labels are overlapping and ugly. How can I fix that?\n\n*([This was a question from last week too](/news/2023-09-12_faqs_week-03.qmd#why-are-my-axis-labels-all-crowded-and-on-top-of-each-other-how-do-i-fix-that), but lots of you asked about it again)*\n\nSometimes you'll have text that is too long to fit comfortably as axis labels and the labels will overlap and be gross:\n\n![Overlapping axis labels](https://www.andrewheiss.com/blog/2022/06/23/long-labels-ggplot/index_files/figure-html/plot-the-problem-1.png){width=70%}\n\n[Check out this blog post](https://www.andrewheiss.com/blog/2022/06/23/long-labels-ggplot/) for a bunch of different ways to fix this and make nicer labels, like this:\n\n![Non-overlapping axis labels](https://www.andrewheiss.com/blog/2022/06/23/long-labels-ggplot/index_files/figure-html/plot-auto-1.png){width=70%}\n\n\n### Why did we need to group a second time when calculating the proportions for the heatmap?\n\nAt the end of exercise 4, you created a heatmap showing the proportions of different types of construction projects across different boroughs. In the instructions, I said you’d need to use `group_by()` twice to get predictable proportions. Some of you have wondered what this means. Here's a quick illustration.\n\nWhen you group by a column, R splits your data into separate datasets behind the scenes, and when you use `summarize()`, it calculates summary statistics (averages, counts, medians, etc.) for each of those groups. So when you used `group_by(BOROUGH, CATEGORY)`, R made smaller datasets of Bronx Affordable Housing, Bronx Approved Work, Brooklyn Affordable Housing, Brooklyn Approved Work, and so on. Then when you used `summarize(total = n())`, you calculated the number of rows in each of those groups, thus giving you the number of projects per borough per category. That’s basic `group_by() %>% summarize()` stuff.\n\nOnce you have a count of projects per borough, you have to decide how you want to calculate proportions. In particular, you need to figure out what your denominator is. Do you want the proportion of all projects within each borough (e.g. X% of projects in the Bronx are affordable housing, Y% in the Bronx are approved work, and so on until 100% of the projects in the Bronx are accounted for), so that each borough constitutes 100%? Do you want the proportion of boroughs for each project (e.g. X% of affordable housing projects are in the Bronx, Y% of affordable housing projects are in Brooklyn, and so on until 100% of the affordable housing projects are accounted for). *This* is where the second `group_by()` matters.\n\nFor example, if you group by borough and then use mutate to calculate the proportion, the proportion in each borough will add up to 100%. Notice the denominator column here—it’s unique to each borough (1169 for the Bronx, 2231 for Brooklyn, etc.).\n\n```r\nessential %>%\n  group_by(BOROUGH, CATEGORY) %>%\n  summarize(totalprojects = n()) %>%\n  group_by(BOROUGH) %>%\n  mutate(denominator = sum(totalprojects),\n         proportion = totalprojects / denominator)\n#> # A tibble: 33 × 5\n#> # Groups:   BOROUGH [5]\n#>    BOROUGH  CATEGORY               totalprojects denominator proportion\n#>    <fct>    <fct>                          <int>       <int>      <dbl>\n#>  1 Bronx    Affordable Housing                80        1169   0.0684  \n#>  2 Bronx    Approved Work                    518        1169   0.443   \n#>  3 Bronx    Homeless Shelter                   1        1169   0.000855\n#>  4 Bronx    Hospital / Health Care            55        1169   0.0470  \n#>  5 Bronx    Public Housing                   276        1169   0.236   \n#>  6 Bronx    Schools                          229        1169   0.196   \n#>  7 Bronx    Utility                           10        1169   0.00855 \n#>  8 Brooklyn Affordable Housing               168        2231   0.0753  \n#>  9 Brooklyn Approved Work                   1223        2231   0.548   \n#> 10 Brooklyn Hospital / Health Care            66        2231   0.0296  \n#> # … with 23 more rows\n```\n\nIf you group by category instead, the proportion within each category will add to 100%. Notice how the denominator for affordable housing is 372, approved work is 4189, and so on. \n\n```r\nessential %>%\n  group_by(BOROUGH, CATEGORY) %>%\n  summarize(totalprojects = n()) %>%\n  group_by(CATEGORY) %>%\n  mutate(denominator = sum(totalprojects),\n         proportion = totalprojects / denominator)\n#> # A tibble: 33 × 5\n#> # Groups:   CATEGORY [7]\n#>    BOROUGH  CATEGORY               totalprojects denominator proportion\n#>    <fct>    <fct>                          <int>       <int>      <dbl>\n#>  1 Bronx    Affordable Housing                80         372      0.215\n#>  2 Bronx    Approved Work                    518        4189      0.124\n#>  3 Bronx    Homeless Shelter                   1           5      0.2  \n#>  4 Bronx    Hospital / Health Care            55         259      0.212\n#>  5 Bronx    Public Housing                   276        1014      0.272\n#>  6 Bronx    Schools                          229        1280      0.179\n#>  7 Bronx    Utility                           10          90      0.111\n#>  8 Brooklyn Affordable Housing               168         372      0.452\n#>  9 Brooklyn Approved Work                   1223        4189      0.292\n#> 10 Brooklyn Hospital / Health Care            66         259      0.255\n#> # … with 23 more rows\n```\n\nYou can also ungroup completely before calculating the proportion. This makes it so the entire proportion column adds to 100%:\n\n```r\nessential %>%\n  group_by(BOROUGH, CATEGORY) %>%\n  summarize(totalprojects = n()) %>%\n  ungroup() %>%\n  mutate(denominator = sum(totalprojects),\n         proportion = totalprojects / denominator)\n#> # A tibble: 33 × 5\n#>    BOROUGH  CATEGORY               totalprojects denominator proportion\n#>    <fct>    <fct>                          <int>       <int>      <dbl>\n#>  1 Bronx    Affordable Housing                80        7209   0.0111  \n#>  2 Bronx    Approved Work                    518        7209   0.0719  \n#>  3 Bronx    Homeless Shelter                   1        7209   0.000139\n#>  4 Bronx    Hospital / Health Care            55        7209   0.00763 \n#>  5 Bronx    Public Housing                   276        7209   0.0383  \n#>  6 Bronx    Schools                          229        7209   0.0318  \n#>  7 Bronx    Utility                           10        7209   0.00139 \n#>  8 Brooklyn Affordable Housing               168        7209   0.0233  \n#>  9 Brooklyn Approved Work                   1223        7209   0.170   \n#> 10 Brooklyn Hospital / Health Care            66        7209   0.00916 \n#> # … with 23 more rows\n```\n\nWhich one you do is up to you—it depends on the story you’re trying to tell.\n\n\n### Why isn't the example code using `data = whatever` and `mapping = aes()` in `ggplot()` anymore? Do we not have to use argument names?\n\nIn the first few sessions, you wrote code that looked like this:\n\n```{r example-with-args, eval=FALSE}\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +\n  geom_point()\n```\n\nIn R, you feed functions arguments like `data` and `mapping` and I was having you explicitly name the arguments, like `data = mpg` and `mapping = aes(...)`. \n\nIn general it's a good idea to use named arguments, since it's clearer what you mean. \n\nHowever, with really common functions like `ggplot()`, you can actually skip the names. If you look at the documentation for `ggplot()` (i.e. run `?ggplot` in your R console or search for \"ggplot\" in the Help panel in RStudio), you'll see that the first expected argument is `data` and the second is `mapping`. \n\n![The documentation for the ggplot() function](img/ggplot-help-arguments.png){width=90%}\n\nIf you don't name the arguments, like this…\n\n```{r example-without-args, eval=FALSE}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point()\n```\n\n…`ggplot()` will assume that the first argument (`mpg`) really means `data = mpg` and that the second really means `mapping = aes(...)`.\n\nIf you don't name the arguments, **the order matters**. This won't work because ggplot will think that the `aes(...)` stuff is really `data = aes(...)`:\n\n```{r example-without-args-bad-order, eval=FALSE}\nggplot(aes(x = displ, y = hwy), mpg) +\n  geom_point()\n```\n\nIf you do name the arguments, **the order *doesn't* matter**. This will work because it's clear that `data = mpg` (even though this feels backwards and wrong):\n\n```{r example-with-args-weird-order, eval=FALSE}\nggplot(mapping = aes(x = displ, y = hwy), data = mpg) +\n  geom_point()\n```\n\nThis works with all R functions. You can either name the arguments and put them in whatever order you want, or you can not name them and use them in the order that's listed in the documentation. \n\n**In general, you should name your arguments for the sake of clarity.** For instance, with `aes()`, the first argument is `x` and the second is `y`, so you can technically do this:\n\n```{r example-without-args-aes, eval=FALSE}\nggplot(mpg, aes(displ, hwy)) +\n  geom_point()\n```\n\nThat's nice and short, but you have to remember that `displ` is on the x-axis and `hwy` is on the y-axis. And it gets extra confusing once you start mapping other columns:\n\n```{r example-without-args-aes-bad, eval=FALSE}\nggplot(mpg, aes(displ, hwy, color = drv, size = hwy)) +\n  geom_point()\n```\n\nAll the other aesthetics like color and size are named, but x and y aren't, which just feels… off.\n\nSo use argument names except for super common things like `ggplot()` and the {dplyr} verbs like `mutate()`, `group_by()`, `filter()`, etc.\n\n\n### I have numbers like 20000 and want them formatted with commas like 20,000. Can I do that automatically?\n\nYes you can! There's an incredible package called [{scales}](https://scales.r-lib.org/). It lets you format numbers and axes and all sorts of things in magical ways. If you [look at the documentation](https://scales.r-lib.org/reference/index.html), you'll see a ton of `label_SOMETHING()` functions, like `label_comma()`, `label_dollar()`, and `label_percent()`.\n\nYou can use these different labeling functions inside `scale_AESTHETIC_WHATEVER()` layers in ggplot. \n\n`label_comma()` adds commas:\n\n```{r gapminder-comma, message=FALSE}\nlibrary(scales)\nlibrary(gapminder)\n\ngapminder_2007 <- gapminder %>% \n  filter(year == 2007)\n\nggplot(gapminder_2007, aes(x = gdpPercap)) +\n  geom_histogram(binwidth = 1000) +\n  scale_x_continuous(labels = label_comma())\n```\n\n`label_dollar()` adds commas and includes a \"$\" prefix:\n\n```{r gapminder-dollar}\nggplot(gapminder_2007, aes(x = gdpPercap)) +\n  geom_histogram(binwidth = 1000) +\n  scale_x_continuous(labels = label_dollar())\n```\n\n`label_percent()` multiplies values by 100 and formats them as percents:\n\n```{r gapminder-percent}\ngapminder_percents <- gapminder_2007 %>% \n  group_by(continent) %>% \n  summarize(n = n()) %>% \n  mutate(prop = n / sum(n))\n\nggplot(gapminder_percents, aes(x = continent, y = prop)) +\n  geom_col() +\n  scale_y_continuous(labels = label_percent())\n```\n\nYou can also change a ton of the settings for these different labeling functions. Want to format something as Euros and use periods as the number separators instead of commas, like Europeans? Change the appropriate arguments! You can check the documentation for each of the `label_WHATEVER()` functions to see what you can adjust ([like `label_dollar()` here](https://scales.r-lib.org/reference/label_dollar.html))\n\n```{r gapminder-euro, warning=FALSE}\nggplot(gapminder_2007, aes(x = gdpPercap)) +\n  geom_histogram(binwidth = 1000) +\n  scale_x_continuous(labels = label_dollar(prefix = \"€\", big.mark = \".\"))\n```\n\nAll the `label_WHATEVER()` functions actually create copies of themselves, so if you're using lots of custom settings, you can create your own label function, like `label_euro()` here:\n\n```{r gapminder-euro-custom, warning=FALSE}\n# Make a custom labeling function\nlabel_euro <- label_dollar(prefix = \"€\", big.mark = \".\")\n\n# Use it on the x-axis\nggplot(gapminder_2007, aes(x = gdpPercap)) +\n  geom_histogram(binwidth = 1000) +\n  scale_x_continuous(labels = label_euro)\n```\n\nThese labeling functions also work with other aesthetics, like fill and color and size. Use them in `scale_AESTHETIC_WHATEVER()`:\n\n```{r gapminder-scales-legends}\nggplot(\n  gapminder_2007, \n  aes(x = gdpPercap, y = lifeExp, size = pop, color = pop)\n) +\n  geom_point() +\n  scale_x_continuous(labels = label_dollar()) +\n  scale_size_continuous(labels = label_comma()) +\n  scale_color_viridis_c(labels = label_comma())\n```\n\nThere are also some really neat and fancy things you can do with scales, like formatting logged values, abbreviating long numbers, and many other things. [Check out this post](https://www.andrewheiss.com/blog/2022/12/08/log10-natural-log-scales-ggplot/) for an example of working with logged values.\n\n```{r gapminder-scatter-fancy}\nggplot(\n  gapminder_2007, \n  aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)\n) +\n  geom_point() +\n  scale_x_log10(breaks = 500 * 2^seq(0, 9, by = 1),\n                labels = label_dollar(scale = cut_short_scale())) +\n  scale_size_continuous(labels = label_comma(scale_cut = cut_short_scale()))\n```\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  fig.width = 6, \n  fig.height = 6 * 0.618, \n  fig.align = \"center\", \n  out.width = \"90%\",\n  collapse = TRUE\n)\n\nlibrary(tidyverse)\n```\n\nHi everyone!\n\nGreat work this week with the essential construction data from exercise 4! It was a big dataset and you were able to show some interesting patterns with neat plots!\n\nJust a few FAQs this week—enjoy!\n\n\n### How can I make my R code more readable?\n\n*([This was a tip from last week](/news/2023-09-12_general-tips.qmd#code-style), but it's a good reminder.)*\n\nUnlike other programming langauges, R is pretty forgiving about code style. You can have lines of code that are indented however you want, that are as long as you want, and that have line breaks generally wherever you want.\n\nThere are some basic grammar-like guidelines you can follow to make your code more readable, more consistent, and easier for people to follow. [I've compiled a mini style guide here](/resource/style.qmd)—you should check it out and try implementing the suggestsions.\n\n\n### My axis labels are overlapping and ugly. How can I fix that?\n\n*([This was a question from last week too](/news/2023-09-12_faqs_week-03.qmd#why-are-my-axis-labels-all-crowded-and-on-top-of-each-other-how-do-i-fix-that), but lots of you asked about it again)*\n\nSometimes you'll have text that is too long to fit comfortably as axis labels and the labels will overlap and be gross:\n\n![Overlapping axis labels](https://www.andrewheiss.com/blog/2022/06/23/long-labels-ggplot/index_files/figure-html/plot-the-problem-1.png){width=70%}\n\n[Check out this blog post](https://www.andrewheiss.com/blog/2022/06/23/long-labels-ggplot/) for a bunch of different ways to fix this and make nicer labels, like this:\n\n![Non-overlapping axis labels](https://www.andrewheiss.com/blog/2022/06/23/long-labels-ggplot/index_files/figure-html/plot-auto-1.png){width=70%}\n\n\n### Why did we need to group a second time when calculating the proportions for the heatmap?\n\nAt the end of exercise 4, you created a heatmap showing the proportions of different types of construction projects across different boroughs. In the instructions, I said you’d need to use `group_by()` twice to get predictable proportions. Some of you have wondered what this means. Here's a quick illustration.\n\nWhen you group by a column, R splits your data into separate datasets behind the scenes, and when you use `summarize()`, it calculates summary statistics (averages, counts, medians, etc.) for each of those groups. So when you used `group_by(BOROUGH, CATEGORY)`, R made smaller datasets of Bronx Affordable Housing, Bronx Approved Work, Brooklyn Affordable Housing, Brooklyn Approved Work, and so on. Then when you used `summarize(total = n())`, you calculated the number of rows in each of those groups, thus giving you the number of projects per borough per category. That’s basic `group_by() %>% summarize()` stuff.\n\nOnce you have a count of projects per borough, you have to decide how you want to calculate proportions. In particular, you need to figure out what your denominator is. Do you want the proportion of all projects within each borough (e.g. X% of projects in the Bronx are affordable housing, Y% in the Bronx are approved work, and so on until 100% of the projects in the Bronx are accounted for), so that each borough constitutes 100%? Do you want the proportion of boroughs for each project (e.g. X% of affordable housing projects are in the Bronx, Y% of affordable housing projects are in Brooklyn, and so on until 100% of the affordable housing projects are accounted for). *This* is where the second `group_by()` matters.\n\nFor example, if you group by borough and then use mutate to calculate the proportion, the proportion in each borough will add up to 100%. Notice the denominator column here—it’s unique to each borough (1169 for the Bronx, 2231 for Brooklyn, etc.).\n\n```r\nessential %>%\n  group_by(BOROUGH, CATEGORY) %>%\n  summarize(totalprojects = n()) %>%\n  group_by(BOROUGH) %>%\n  mutate(denominator = sum(totalprojects),\n         proportion = totalprojects / denominator)\n#> # A tibble: 33 × 5\n#> # Groups:   BOROUGH [5]\n#>    BOROUGH  CATEGORY               totalprojects denominator proportion\n#>    <fct>    <fct>                          <int>       <int>      <dbl>\n#>  1 Bronx    Affordable Housing                80        1169   0.0684  \n#>  2 Bronx    Approved Work                    518        1169   0.443   \n#>  3 Bronx    Homeless Shelter                   1        1169   0.000855\n#>  4 Bronx    Hospital / Health Care            55        1169   0.0470  \n#>  5 Bronx    Public Housing                   276        1169   0.236   \n#>  6 Bronx    Schools                          229        1169   0.196   \n#>  7 Bronx    Utility                           10        1169   0.00855 \n#>  8 Brooklyn Affordable Housing               168        2231   0.0753  \n#>  9 Brooklyn Approved Work                   1223        2231   0.548   \n#> 10 Brooklyn Hospital / Health Care            66        2231   0.0296  \n#> # … with 23 more rows\n```\n\nIf you group by category instead, the proportion within each category will add to 100%. Notice how the denominator for affordable housing is 372, approved work is 4189, and so on. \n\n```r\nessential %>%\n  group_by(BOROUGH, CATEGORY) %>%\n  summarize(totalprojects = n()) %>%\n  group_by(CATEGORY) %>%\n  mutate(denominator = sum(totalprojects),\n         proportion = totalprojects / denominator)\n#> # A tibble: 33 × 5\n#> # Groups:   CATEGORY [7]\n#>    BOROUGH  CATEGORY               totalprojects denominator proportion\n#>    <fct>    <fct>                          <int>       <int>      <dbl>\n#>  1 Bronx    Affordable Housing                80         372      0.215\n#>  2 Bronx    Approved Work                    518        4189      0.124\n#>  3 Bronx    Homeless Shelter                   1           5      0.2  \n#>  4 Bronx    Hospital / Health Care            55         259      0.212\n#>  5 Bronx    Public Housing                   276        1014      0.272\n#>  6 Bronx    Schools                          229        1280      0.179\n#>  7 Bronx    Utility                           10          90      0.111\n#>  8 Brooklyn Affordable Housing               168         372      0.452\n#>  9 Brooklyn Approved Work                   1223        4189      0.292\n#> 10 Brooklyn Hospital / Health Care            66         259      0.255\n#> # … with 23 more rows\n```\n\nYou can also ungroup completely before calculating the proportion. This makes it so the entire proportion column adds to 100%:\n\n```r\nessential %>%\n  group_by(BOROUGH, CATEGORY) %>%\n  summarize(totalprojects = n()) %>%\n  ungroup() %>%\n  mutate(denominator = sum(totalprojects),\n         proportion = totalprojects / denominator)\n#> # A tibble: 33 × 5\n#>    BOROUGH  CATEGORY               totalprojects denominator proportion\n#>    <fct>    <fct>                          <int>       <int>      <dbl>\n#>  1 Bronx    Affordable Housing                80        7209   0.0111  \n#>  2 Bronx    Approved Work                    518        7209   0.0719  \n#>  3 Bronx    Homeless Shelter                   1        7209   0.000139\n#>  4 Bronx    Hospital / Health Care            55        7209   0.00763 \n#>  5 Bronx    Public Housing                   276        7209   0.0383  \n#>  6 Bronx    Schools                          229        7209   0.0318  \n#>  7 Bronx    Utility                           10        7209   0.00139 \n#>  8 Brooklyn Affordable Housing               168        7209   0.0233  \n#>  9 Brooklyn Approved Work                   1223        7209   0.170   \n#> 10 Brooklyn Hospital / Health Care            66        7209   0.00916 \n#> # … with 23 more rows\n```\n\nWhich one you do is up to you—it depends on the story you’re trying to tell.\n\n\n### Why isn't the example code using `data = whatever` and `mapping = aes()` in `ggplot()` anymore? Do we not have to use argument names?\n\nIn the first few sessions, you wrote code that looked like this:\n\n```{r example-with-args, eval=FALSE}\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +\n  geom_point()\n```\n\nIn R, you feed functions arguments like `data` and `mapping` and I was having you explicitly name the arguments, like `data = mpg` and `mapping = aes(...)`. \n\nIn general it's a good idea to use named arguments, since it's clearer what you mean. \n\nHowever, with really common functions like `ggplot()`, you can actually skip the names. If you look at the documentation for `ggplot()` (i.e. run `?ggplot` in your R console or search for \"ggplot\" in the Help panel in RStudio), you'll see that the first expected argument is `data` and the second is `mapping`. \n\n![The documentation for the ggplot() function](img/ggplot-help-arguments.png){width=90%}\n\nIf you don't name the arguments, like this…\n\n```{r example-without-args, eval=FALSE}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point()\n```\n\n…`ggplot()` will assume that the first argument (`mpg`) really means `data = mpg` and that the second really means `mapping = aes(...)`.\n\nIf you don't name the arguments, **the order matters**. This won't work because ggplot will think that the `aes(...)` stuff is really `data = aes(...)`:\n\n```{r example-without-args-bad-order, eval=FALSE}\nggplot(aes(x = displ, y = hwy), mpg) +\n  geom_point()\n```\n\nIf you do name the arguments, **the order *doesn't* matter**. This will work because it's clear that `data = mpg` (even though this feels backwards and wrong):\n\n```{r example-with-args-weird-order, eval=FALSE}\nggplot(mapping = aes(x = displ, y = hwy), data = mpg) +\n  geom_point()\n```\n\nThis works with all R functions. You can either name the arguments and put them in whatever order you want, or you can not name them and use them in the order that's listed in the documentation. \n\n**In general, you should name your arguments for the sake of clarity.** For instance, with `aes()`, the first argument is `x` and the second is `y`, so you can technically do this:\n\n```{r example-without-args-aes, eval=FALSE}\nggplot(mpg, aes(displ, hwy)) +\n  geom_point()\n```\n\nThat's nice and short, but you have to remember that `displ` is on the x-axis and `hwy` is on the y-axis. And it gets extra confusing once you start mapping other columns:\n\n```{r example-without-args-aes-bad, eval=FALSE}\nggplot(mpg, aes(displ, hwy, color = drv, size = hwy)) +\n  geom_point()\n```\n\nAll the other aesthetics like color and size are named, but x and y aren't, which just feels… off.\n\nSo use argument names except for super common things like `ggplot()` and the {dplyr} verbs like `mutate()`, `group_by()`, `filter()`, etc.\n\n\n### I have numbers like 20000 and want them formatted with commas like 20,000. Can I do that automatically?\n\nYes you can! There's an incredible package called [{scales}](https://scales.r-lib.org/). It lets you format numbers and axes and all sorts of things in magical ways. If you [look at the documentation](https://scales.r-lib.org/reference/index.html), you'll see a ton of `label_SOMETHING()` functions, like `label_comma()`, `label_dollar()`, and `label_percent()`.\n\nYou can use these different labeling functions inside `scale_AESTHETIC_WHATEVER()` layers in ggplot. \n\n`label_comma()` adds commas:\n\n```{r gapminder-comma, message=FALSE}\nlibrary(scales)\nlibrary(gapminder)\n\ngapminder_2007 <- gapminder %>% \n  filter(year == 2007)\n\nggplot(gapminder_2007, aes(x = gdpPercap)) +\n  geom_histogram(binwidth = 1000) +\n  scale_x_continuous(labels = label_comma())\n```\n\n`label_dollar()` adds commas and includes a \"$\" prefix:\n\n```{r gapminder-dollar}\nggplot(gapminder_2007, aes(x = gdpPercap)) +\n  geom_histogram(binwidth = 1000) +\n  scale_x_continuous(labels = label_dollar())\n```\n\n`label_percent()` multiplies values by 100 and formats them as percents:\n\n```{r gapminder-percent}\ngapminder_percents <- gapminder_2007 %>% \n  group_by(continent) %>% \n  summarize(n = n()) %>% \n  mutate(prop = n / sum(n))\n\nggplot(gapminder_percents, aes(x = continent, y = prop)) +\n  geom_col() +\n  scale_y_continuous(labels = label_percent())\n```\n\nYou can also change a ton of the settings for these different labeling functions. Want to format something as Euros and use periods as the number separators instead of commas, like Europeans? Change the appropriate arguments! You can check the documentation for each of the `label_WHATEVER()` functions to see what you can adjust ([like `label_dollar()` here](https://scales.r-lib.org/reference/label_dollar.html))\n\n```{r gapminder-euro, warning=FALSE}\nggplot(gapminder_2007, aes(x = gdpPercap)) +\n  geom_histogram(binwidth = 1000) +\n  scale_x_continuous(labels = label_dollar(prefix = \"€\", big.mark = \".\"))\n```\n\nAll the `label_WHATEVER()` functions actually create copies of themselves, so if you're using lots of custom settings, you can create your own label function, like `label_euro()` here:\n\n```{r gapminder-euro-custom, warning=FALSE}\n# Make a custom labeling function\nlabel_euro <- label_dollar(prefix = \"€\", big.mark = \".\")\n\n# Use it on the x-axis\nggplot(gapminder_2007, aes(x = gdpPercap)) +\n  geom_histogram(binwidth = 1000) +\n  scale_x_continuous(labels = label_euro)\n```\n\nThese labeling functions also work with other aesthetics, like fill and color and size. Use them in `scale_AESTHETIC_WHATEVER()`:\n\n```{r gapminder-scales-legends}\nggplot(\n  gapminder_2007, \n  aes(x = gdpPercap, y = lifeExp, size = pop, color = pop)\n) +\n  geom_point() +\n  scale_x_continuous(labels = label_dollar()) +\n  scale_size_continuous(labels = label_comma()) +\n  scale_color_viridis_c(labels = label_comma())\n```\n\nThere are also some really neat and fancy things you can do with scales, like formatting logged values, abbreviating long numbers, and many other things. [Check out this post](https://www.andrewheiss.com/blog/2022/12/08/log10-natural-log-scales-ggplot/) for an example of working with logged values.\n\n```{r gapminder-scatter-fancy}\nggplot(\n  gapminder_2007, \n  aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)\n) +\n  geom_point() +\n  scale_x_log10(breaks = 500 * 2^seq(0, 9, by = 1),\n                labels = label_dollar(scale = cut_short_scale())) +\n  scale_size_continuous(labels = label_comma(scale_cut = cut_short_scale()))\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"highlight-style":"monokai","toc-depth":4,"output-file":"2023-09-19_faqs_week-04.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Posted","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["../files/bib/readings.bib"],"csl":"../files/bib/chicago-author-date.csl","_quarto-vars":{"author":"Andrew Heiss","instructor":{"name":"Dr. Andrew Heiss","name_no_title":"Andrew Heiss","email":"aheiss@gsu.edu","url":"https://www.andrewheiss.com","twitter":"andrewheiss","github":"andrewheiss","office":"55 Park Place SE, Room 464","contact_policy":"E-mail and Slack are the best ways to get in contact with me. I will try to respond to all course-related e-mails and Slack messages within 24 hours (*really*), but also remember that life can be busy and chaotic for everyone (including me!), so if I don't respond right away, don't worry!","appointment_url":"https://calendly.com/andrewheiss/"},"course":{"number":"PMAP 8551/4551","semester":"Fall 2023","days":"Any day","time":"Asynchronous","location":"Anywhere","dates":"August 12–December 11, 2023","github":"https://www.github.com/andrewheiss/datavizf23.classes.andrewheiss.com","url":"https://datavizf23.classes.andrewheiss.com","copyright_year":"2023","slack":"https://gsudatavizf2023.slack.com"},"university":{"name":"Georgia State University","url":"https://www.gsu.edu"},"school":{"name":"Andrew Young School of Policy Studies","url":"https://aysps.gsu.edu/"}},"theme":["litera","../html/custom.scss"],"date-format":"dddd MMMM D, YYYY [at] h:mm A","template-partials":["../html/news/title-block.html"],"title":"Week 4 FAQs","date":"2023-09-19T09:22","categories":["FAQs"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}