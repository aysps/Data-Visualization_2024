{"title":"Mini project 1 feedback","markdown":{"yaml":{"title":"Mini project 1 feedback","date":"2023-11-06T23:02","categories":["faq","feedback"],"toc-depth":4},"headingText":"Warnings and messages","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  fig.width = 6, \n  fig.height = 6 * 0.618, \n  fig.align = \"center\", \n  out.width = \"90%\",\n  collapse = TRUE\n)\n```\n\nHi everyone!\n\nGreat work with your first mini projects! You successfully took real world data, cleaned it up, made a plot with it, and told a story about rats in New York!\n\nI left some similar comments for a lot of you, so I figured I’d compile those here along with examples of how to address them.\n\nFirst, I'll load and clean the data so I can illustrate stuff below:\n\n```{r load-data-fake, eval=FALSE}\nlibrary(tidyverse)\n\nrats_raw <- read_csv(\n  \"https://datavizf23.classes.andrewheiss.com/files/data/external_data/Rat_Sightings.csv\", \n  na = c(\"\", \"NA\", \"N/A\")\n)\n\nrats_clean <- rats_raw %>%\n  rename(created_date = `Created Date`,\n         location_type = `Location Type`,\n         borough = Borough) %>%\n  mutate(created_date = mdy_hms(created_date)) %>%\n  mutate(sighting_year = year(created_date),\n         sighting_month = month(created_date),\n         sighting_day = day(created_date),\n         sighting_weekday = wday(created_date, label = TRUE, abbr = FALSE)) %>%\n  filter(borough != \"Unspecified\")\n```\n\n```{r load-data-real, include=FALSE, message=FALSE}\nlibrary(tidyverse)\n\nrats_raw <- read_csv(\n  here::here(\"files\", \"data\", \"external_data\", \"Rat_Sightings.csv\"), \n  na = c(\"\", \"NA\", \"N/A\")\n)\n\nrats_clean <- rats_raw %>%\n  rename(created_date = `Created Date`,\n         location_type = `Location Type`,\n         borough = Borough) %>%\n  mutate(created_date = mdy_hms(created_date)) %>%\n  mutate(sighting_year = year(created_date),\n         sighting_month = month(created_date),\n         sighting_day = day(created_date),\n         sighting_weekday = wday(created_date, label = TRUE, abbr = FALSE)) %>%\n  filter(borough != \"Unspecified\")\n```\n\n\n\n> Your knitted document has warnings and package loading messages.\n\nYou should turn off those warnings and messages. See [this](/news/2023-09-12_faqs_week-03.html#how-can-i-hide-warnings-and-messages) and  [this](/news/2023-10-03_cleaner-nicer-rmd-output.html#clean-up-warnings-and-messages) for more about how.\n\n### ALL CAPS\n\n> Consider converting the borough names to NOT ALL CAPS, since you don’t repeat all caps anywhere else\n\nIn the data, the borough names are all spelled with ALL CAPS:\n\n```{r show-all-caps}\nrats_clean %>% \n  select(created_date, borough)\n```\n\nYou can convert that to not all caps with one of two functions from the {stringr} package (which is one of the nine that R loads when you run `library(tidyverse)`): `str_to_title()` changes text to title case (where each word is capitalized) while `str_to_sentence()` changes text to sentence case (where the first letter in a sentence is capitalized):\n\n```{r str-case-examples}\nstr_to_title(\"OH NO! RATS IN NEW YORK\")\nstr_to_sentence(\"OH NO! RATS IN NEW YORK\")\n```\n\nYou can use it with `mutate()`:\n\n```{r show-fixed-capitalization}\nrats_clean <- rats_clean %>% \n  mutate(borough = str_to_title(borough))\n\nrats_clean %>% \n  select(created_date, borough)\n```\n\n(I'd use `str_to_title()` here since Staten Island is two words; if you use `str_to_sentence()` it'll turn into \"Staten island\".)\n\nNow your plots will have nicer borough names:\n\n```{r plot-with-better-capitalization}\nrats_summarized <- rats_clean %>% \n  group_by(borough) %>% \n  summarize(total = n())\n\nggplot(rats_summarized, aes(x = borough, y = total)) +\n  geom_col()\n```\n\n\n### Sorting and ordering\n\n> Consider sorting the locations by number of sightings instead of alphabetically\n\nIn the plot above, the boroughs on the x-axis are in alphabetic order. If we want to tell a better story, though, it's helpful to reorder them so that we can more easily see which boroughs have the most and least rats. [See here for more about reordering categories](/news/2023-10-10_faqs-week-07.html#i-want-my-bars-to-be-sorted-in-my-plot.-how-can-i-control-their-order). We can sort the data and then use `fct_inorder()` from the {forcats} package (also one of the nine that gets loaded with `library(tidyverse)`) to lock these borough names in the right order:\n\n```{r plot-better-order}\nrats_summarized <- rats_clean %>% \n  group_by(borough) %>% \n  summarize(total = n()) %>% \n  # Sort by total in descending order\n  arrange(desc(total)) %>% \n  # Lock bhe borough names in place\n  mutate(borough = fct_inorder(borough))\n\nggplot(rats_summarized, aes(x = borough, y = total)) +\n  geom_col()\n```\n\n### Unbalanced facets\n\n> The facets are a little unbalanced given that there are 8 panels. Consider adding… something?… to that empty panel, like explanatory text or information about the data source. Or make it use 4 columns and 2 rows, or 2 columns and 4 rows so there’s no empty space\n\nLots of you used facets to show trends over time. By default R tries to make the grid as square as possible, so here there are 3 rows and 3 columns, but that leaves an empty panel in the bottom right corner.\n\n```{r plot-facets-unbalanced}\nrats_by_year <- rats_clean %>% \n  group_by(borough, sighting_year) %>% \n  summarize(total = n())\n\nggplot(rats_by_year, aes(x = borough, y = total)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year))\n```\n\nFor the sake of balance, you can get rid of that panel by changing the layout. There are 8 panels here, so we could make a rectangle that's 4 wide and 2 tall (or 2 wide and 4 tall if you want a tall rectangle instead) using the `nrow` or `ncol` arguments to `facet_wrap()`:\n\n::: {.panel-tabset}\n### 4 columns\n\n```{r facet-4-cols}\nggplot(rats_by_year, aes(x = borough, y = total)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year), ncol = 4)\n```\n\n### 4 rows\n\n```{r facet-4-rows}\nggplot(rats_by_year, aes(x = borough, y = total)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year), nrow = 4)\n```\n:::\n\nAlternatively you can stick something in that empty panel like your legend (though in this example it's better to not even have a legend because [it's redundant with the x-axis](/news/2023-09-27_faqs_week-05.html#double-encoding-and-excessive-legends)). The `reposition_legend()` function from the {lemon} package makes this really easy:\n\n```{r plot-legend-corner, fig.width=8, fig.height=5, warning=FALSE, message=FALSE}\nlibrary(lemon)\n\np <- ggplot(rats_by_year, aes(x = borough, y = total, fill = borough)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year)) +\n  guides(fill = guide_legend(ncol = 2, title.position = \"top\"))\n\nreposition_legend(p, position = \"bottom left\", panel = \"panel-3-3\")\n```\n\nYou can even be fancy and add some explanatory text to that corner. It takes a big of extra work—you essentially have to create a fake text-only plot using `grid::textGrob()` and then use `inset_element()` from the {patchwork} to place it on top of the main plot:\n\n```{r plot-note-corner}\nlibrary(grid)  # For making custom grid grobs\nlibrary(patchwork)\n\n# Make a little text-only plot\nextra_note <- textGrob(\"Here's some text\\nabout rats. Neato.\", \n                       gp = gpar(fontface = \"bold\"))\n\n# Run this if you want to see it by itself:\n# grid.draw(extra_note)\n\np <- ggplot(rats_by_year, aes(x = borough, y = total)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year))\n\n# Add the text-only plot as an inset plot with patchwork\np + inset_element(extra_note, left = 0.7, bottom = 0.0, right = 1, top = 0.3)\n```\n\n\n### Overlapping text\n\n> The labels along the x-axis are unreadable and overlapping.\n\nThere are lots of ways to fix this—[see this whole blog post for some different options](https://www.andrewheiss.com/blog/2022/06/23/long-labels-ggplot/). Here are some quick examples (none of these are fabulous, but they're a start):\n\n::: {.panel-tabset}\n#### Swap x- and y-axes\n\n```{r overlap-swap}\nggplot(rats_by_year, aes(x = total, y = borough)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year), ncol = 4)\n```\n\n#### Rotate labels\n\n```{r overlap-rotate}\nggplot(rats_by_year, aes(x = borough, y = total)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year), ncol = 4) +\n  theme(axis.text.x = element_text(angle = 30, hjust = 0.5, vjust = 0.5))\n```\n\n#### Dodge labels\n\n```{r overlap-dodge}\nggplot(rats_by_year, aes(x = borough, y = total)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year), ncol = 4) +\n  scale_x_discrete(guide = guide_axis(n.dodge = 3))\n```\n\n:::\n\n\n### Commas\n\n> Consider adding automatic commas to the x-axis by including `library(scales)` and adding `scale_x_continuous(labels = label_comma())`\n\nYou can make nicer labels by formatting them with `label_comma()` (or any of the other `label_*()` functions) from the {scales} package. [See here for a lot more details](/news/2023-09-19_faqs_week-04.html#i-have-numbers-like-20000-and-want-them-formatted-with-commas-like-20000.-can-i-do-that-automatically).\n\n```{r comma-example, message=FALSE, warning=FALSE}\nlibrary(scales)\n\nggplot(rats_summarized, aes(x = borough, y = total)) +\n  geom_col() +\n  scale_y_continuous(labels = label_comma())\n```\n\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  fig.width = 6, \n  fig.height = 6 * 0.618, \n  fig.align = \"center\", \n  out.width = \"90%\",\n  collapse = TRUE\n)\n```\n\nHi everyone!\n\nGreat work with your first mini projects! You successfully took real world data, cleaned it up, made a plot with it, and told a story about rats in New York!\n\nI left some similar comments for a lot of you, so I figured I’d compile those here along with examples of how to address them.\n\nFirst, I'll load and clean the data so I can illustrate stuff below:\n\n```{r load-data-fake, eval=FALSE}\nlibrary(tidyverse)\n\nrats_raw <- read_csv(\n  \"https://datavizf23.classes.andrewheiss.com/files/data/external_data/Rat_Sightings.csv\", \n  na = c(\"\", \"NA\", \"N/A\")\n)\n\nrats_clean <- rats_raw %>%\n  rename(created_date = `Created Date`,\n         location_type = `Location Type`,\n         borough = Borough) %>%\n  mutate(created_date = mdy_hms(created_date)) %>%\n  mutate(sighting_year = year(created_date),\n         sighting_month = month(created_date),\n         sighting_day = day(created_date),\n         sighting_weekday = wday(created_date, label = TRUE, abbr = FALSE)) %>%\n  filter(borough != \"Unspecified\")\n```\n\n```{r load-data-real, include=FALSE, message=FALSE}\nlibrary(tidyverse)\n\nrats_raw <- read_csv(\n  here::here(\"files\", \"data\", \"external_data\", \"Rat_Sightings.csv\"), \n  na = c(\"\", \"NA\", \"N/A\")\n)\n\nrats_clean <- rats_raw %>%\n  rename(created_date = `Created Date`,\n         location_type = `Location Type`,\n         borough = Borough) %>%\n  mutate(created_date = mdy_hms(created_date)) %>%\n  mutate(sighting_year = year(created_date),\n         sighting_month = month(created_date),\n         sighting_day = day(created_date),\n         sighting_weekday = wday(created_date, label = TRUE, abbr = FALSE)) %>%\n  filter(borough != \"Unspecified\")\n```\n\n\n### Warnings and messages\n\n> Your knitted document has warnings and package loading messages.\n\nYou should turn off those warnings and messages. See [this](/news/2023-09-12_faqs_week-03.html#how-can-i-hide-warnings-and-messages) and  [this](/news/2023-10-03_cleaner-nicer-rmd-output.html#clean-up-warnings-and-messages) for more about how.\n\n### ALL CAPS\n\n> Consider converting the borough names to NOT ALL CAPS, since you don’t repeat all caps anywhere else\n\nIn the data, the borough names are all spelled with ALL CAPS:\n\n```{r show-all-caps}\nrats_clean %>% \n  select(created_date, borough)\n```\n\nYou can convert that to not all caps with one of two functions from the {stringr} package (which is one of the nine that R loads when you run `library(tidyverse)`): `str_to_title()` changes text to title case (where each word is capitalized) while `str_to_sentence()` changes text to sentence case (where the first letter in a sentence is capitalized):\n\n```{r str-case-examples}\nstr_to_title(\"OH NO! RATS IN NEW YORK\")\nstr_to_sentence(\"OH NO! RATS IN NEW YORK\")\n```\n\nYou can use it with `mutate()`:\n\n```{r show-fixed-capitalization}\nrats_clean <- rats_clean %>% \n  mutate(borough = str_to_title(borough))\n\nrats_clean %>% \n  select(created_date, borough)\n```\n\n(I'd use `str_to_title()` here since Staten Island is two words; if you use `str_to_sentence()` it'll turn into \"Staten island\".)\n\nNow your plots will have nicer borough names:\n\n```{r plot-with-better-capitalization}\nrats_summarized <- rats_clean %>% \n  group_by(borough) %>% \n  summarize(total = n())\n\nggplot(rats_summarized, aes(x = borough, y = total)) +\n  geom_col()\n```\n\n\n### Sorting and ordering\n\n> Consider sorting the locations by number of sightings instead of alphabetically\n\nIn the plot above, the boroughs on the x-axis are in alphabetic order. If we want to tell a better story, though, it's helpful to reorder them so that we can more easily see which boroughs have the most and least rats. [See here for more about reordering categories](/news/2023-10-10_faqs-week-07.html#i-want-my-bars-to-be-sorted-in-my-plot.-how-can-i-control-their-order). We can sort the data and then use `fct_inorder()` from the {forcats} package (also one of the nine that gets loaded with `library(tidyverse)`) to lock these borough names in the right order:\n\n```{r plot-better-order}\nrats_summarized <- rats_clean %>% \n  group_by(borough) %>% \n  summarize(total = n()) %>% \n  # Sort by total in descending order\n  arrange(desc(total)) %>% \n  # Lock bhe borough names in place\n  mutate(borough = fct_inorder(borough))\n\nggplot(rats_summarized, aes(x = borough, y = total)) +\n  geom_col()\n```\n\n### Unbalanced facets\n\n> The facets are a little unbalanced given that there are 8 panels. Consider adding… something?… to that empty panel, like explanatory text or information about the data source. Or make it use 4 columns and 2 rows, or 2 columns and 4 rows so there’s no empty space\n\nLots of you used facets to show trends over time. By default R tries to make the grid as square as possible, so here there are 3 rows and 3 columns, but that leaves an empty panel in the bottom right corner.\n\n```{r plot-facets-unbalanced}\nrats_by_year <- rats_clean %>% \n  group_by(borough, sighting_year) %>% \n  summarize(total = n())\n\nggplot(rats_by_year, aes(x = borough, y = total)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year))\n```\n\nFor the sake of balance, you can get rid of that panel by changing the layout. There are 8 panels here, so we could make a rectangle that's 4 wide and 2 tall (or 2 wide and 4 tall if you want a tall rectangle instead) using the `nrow` or `ncol` arguments to `facet_wrap()`:\n\n::: {.panel-tabset}\n### 4 columns\n\n```{r facet-4-cols}\nggplot(rats_by_year, aes(x = borough, y = total)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year), ncol = 4)\n```\n\n### 4 rows\n\n```{r facet-4-rows}\nggplot(rats_by_year, aes(x = borough, y = total)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year), nrow = 4)\n```\n:::\n\nAlternatively you can stick something in that empty panel like your legend (though in this example it's better to not even have a legend because [it's redundant with the x-axis](/news/2023-09-27_faqs_week-05.html#double-encoding-and-excessive-legends)). The `reposition_legend()` function from the {lemon} package makes this really easy:\n\n```{r plot-legend-corner, fig.width=8, fig.height=5, warning=FALSE, message=FALSE}\nlibrary(lemon)\n\np <- ggplot(rats_by_year, aes(x = borough, y = total, fill = borough)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year)) +\n  guides(fill = guide_legend(ncol = 2, title.position = \"top\"))\n\nreposition_legend(p, position = \"bottom left\", panel = \"panel-3-3\")\n```\n\nYou can even be fancy and add some explanatory text to that corner. It takes a big of extra work—you essentially have to create a fake text-only plot using `grid::textGrob()` and then use `inset_element()` from the {patchwork} to place it on top of the main plot:\n\n```{r plot-note-corner}\nlibrary(grid)  # For making custom grid grobs\nlibrary(patchwork)\n\n# Make a little text-only plot\nextra_note <- textGrob(\"Here's some text\\nabout rats. Neato.\", \n                       gp = gpar(fontface = \"bold\"))\n\n# Run this if you want to see it by itself:\n# grid.draw(extra_note)\n\np <- ggplot(rats_by_year, aes(x = borough, y = total)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year))\n\n# Add the text-only plot as an inset plot with patchwork\np + inset_element(extra_note, left = 0.7, bottom = 0.0, right = 1, top = 0.3)\n```\n\n\n### Overlapping text\n\n> The labels along the x-axis are unreadable and overlapping.\n\nThere are lots of ways to fix this—[see this whole blog post for some different options](https://www.andrewheiss.com/blog/2022/06/23/long-labels-ggplot/). Here are some quick examples (none of these are fabulous, but they're a start):\n\n::: {.panel-tabset}\n#### Swap x- and y-axes\n\n```{r overlap-swap}\nggplot(rats_by_year, aes(x = total, y = borough)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year), ncol = 4)\n```\n\n#### Rotate labels\n\n```{r overlap-rotate}\nggplot(rats_by_year, aes(x = borough, y = total)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year), ncol = 4) +\n  theme(axis.text.x = element_text(angle = 30, hjust = 0.5, vjust = 0.5))\n```\n\n#### Dodge labels\n\n```{r overlap-dodge}\nggplot(rats_by_year, aes(x = borough, y = total)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year), ncol = 4) +\n  scale_x_discrete(guide = guide_axis(n.dodge = 3))\n```\n\n:::\n\n\n### Commas\n\n> Consider adding automatic commas to the x-axis by including `library(scales)` and adding `scale_x_continuous(labels = label_comma())`\n\nYou can make nicer labels by formatting them with `label_comma()` (or any of the other `label_*()` functions) from the {scales} package. [See here for a lot more details](/news/2023-09-19_faqs_week-04.html#i-have-numbers-like-20000-and-want-them-formatted-with-commas-like-20000.-can-i-do-that-automatically).\n\n```{r comma-example, message=FALSE, warning=FALSE}\nlibrary(scales)\n\nggplot(rats_summarized, aes(x = borough, y = total)) +\n  geom_col() +\n  scale_y_continuous(labels = label_comma())\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"highlight-style":"monokai","toc-depth":4,"output-file":"2023-11-06_feedback-mini-project-01.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Posted","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["../files/bib/readings.bib"],"csl":"../files/bib/chicago-author-date.csl","_quarto-vars":{"author":"Andrew Heiss","instructor":{"name":"Dr. Andrew Heiss","name_no_title":"Andrew Heiss","email":"aheiss@gsu.edu","url":"https://www.andrewheiss.com","twitter":"andrewheiss","github":"andrewheiss","office":"55 Park Place SE, Room 464","contact_policy":"E-mail and Slack are the best ways to get in contact with me. I will try to respond to all course-related e-mails and Slack messages within 24 hours (*really*), but also remember that life can be busy and chaotic for everyone (including me!), so if I don't respond right away, don't worry!","appointment_url":"https://calendly.com/andrewheiss/"},"course":{"number":"PMAP 8551/4551","semester":"Fall 2023","days":"Any day","time":"Asynchronous","location":"Anywhere","dates":"August 12–December 11, 2023","github":"https://www.github.com/andrewheiss/datavizf23.classes.andrewheiss.com","url":"https://datavizf23.classes.andrewheiss.com","copyright_year":"2023","slack":"https://gsudatavizf2023.slack.com"},"university":{"name":"Georgia State University","url":"https://www.gsu.edu"},"school":{"name":"Andrew Young School of Policy Studies","url":"https://aysps.gsu.edu/"}},"theme":["litera","../html/custom.scss"],"date-format":"dddd MMMM D, YYYY [at] h:mm A","template-partials":["../html/news/title-block.html"],"title":"Mini project 1 feedback","date":"2023-11-06T23:02","categories":["faq","feedback"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}