{"title":"Tips for debugging and cleaning broken code","markdown":{"yaml":{"title":"Tips for debugging and cleaning broken code","date":"2023-10-12T16:30","categories":["advice"],"toc-depth":4,"resources":["video/*"]},"headingText":"Convert Quicktime-created .mov files to .mp4","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  fig.width = 6, \n  fig.height = 6 * 0.618, \n  fig.align = \"center\", \n  out.width = \"90%\",\n  collapse = TRUE\n)\n\nlibrary(tidyverse)\nlibrary(gapminder)\nlibrary(scales)\n```\n\n```{r ffmpeg-note, eval=FALSE, include=FALSE}\n# > ffmpeg -i input.mov output.mp4\n```\n\nLots of the code you run in this class is actually a big long chain of functions or plot layers, like {dplyr} functions that are all connected with `%>%`s or {ggplot2} functions that are all connected with `+`s.\n\nInevitably, something will go wrong at some point in the chain—often a misspelled word or a misplaced comma or a misplaced parenthesis. Tracking down (or debugging) the issue can be often be tricky! \n\nFor example, **four (4)** things are wrong in this code. See if you can spot them without running it—good luck!\n\n```{r gdp-broken, eval=FALSE}\ngapminder_gdp_thing <- gapminder %>% filter(year > 1990) %>% \n  mutate(gdp_total = gdpPercap * pop),\n     is_africa = ifelse(continent == \"Africa\", \n\"Is Africa\", \"Isn't Africa\"))) %>%  \n           group_by(year, continent) %>% \n  mutate(gdp_above_continent_median = \n           ifelse(gdp_total > median(gdp_total)), TRUE, FALSE)) %>%\nungroup() %>% arrange(desc(gdp_total)) %>%\n  mutate(continent = fct_inorder(continent) = country = fct_inorder(country))\n```\n\n::: {.callout-note collapse=\"true\"}\n### Click here for the answers\n\n```{r gdp-broken-answer, eval=FALSE}\ngapminder_gdp_thing <- gapminder %>% filter(year > 1990) %>% \n  mutate(gdp_total = gdpPercap * pop),  # <1>\n     is_africa = ifelse(continent == \"Africa\", \n\"Is Africa\", \"Isn't Africa\"))) %>%  # <2>\n           group_by(year, continent) %>% \n  mutate(gdp_above_continent_median = \n           ifelse(gdp_total > median(gdp_total)), TRUE, FALSE)) %>%  # <3>\nungroup() %>% arrange(desc(gdp_total)) %>%\n  mutate(continent = fct_inorder(continent) = country = fct_inorder(country))  # <4>\n```\n\n1. There's a closing parenthesis after `pop)` that shouldn't be there—it ends the `mutate()` too early and `is_africa = BLAH` ends up not being inside `mutate()`\n2. There's an extra parenthesis at the end of `\"Isn't Africa\")))`\n3. There's an extra parenthesis after `median(gdp_total))`\n4. There's an `=` instead of a comma in between `fct_inorder(continent)` and `country`\n\nHere's what the fixed, reindented version looks like:\n\n```{r gdp-broken-fixed}\ngapminder_gdp_thing <- gapminder %>% \n  filter(year > 1990) %>% \n  mutate(\n    gdp_total = gdpPercap * pop,  # <1>\n    is_africa = ifelse(\n      continent == \"Africa\", \n      \"Is Africa\", \n      \"Isn't Africa\") # <2>\n  ) %>%  # <2>\n  group_by(year, continent) %>% \n  mutate(\n    gdp_above_continent_median = ifelse(\n      gdp_total > median(gdp_total), \n      TRUE, \n      FALSE)  # <3>\n  ) %>%  # <3>\n  ungroup() %>% \n  arrange(desc(gdp_total)) %>%\n  mutate(continent = fct_inorder(continent), \n         country = fct_inorder(country))  # <4>\n```\n\n1. Fixed!\n2. Fixed!\n3. Fixed!\n4. Fixed!\n\n:::\n\nIt's nearly impossible to figure out what's wrong here without running it. And even if you do run it, you'll get somewhat cryptic errors.\n\nI have two important techniques and tips that fix 90% of my debugging problems:\n\n1. Reformat the code by reindenting it and breaking it into multiple lines\n2. Run the code incrementally, line by line\n\nEach of these techniques help track down issues in the code above and are good skills to know in general. I’ll explain each approach and give a little video demonstration below.\n\n\n### Reformat the code\n\nIn the [R style suggestions in the Resources section](/resource/style.qmd#pipes-and-ggplot-layers), it explains that each layer of a `%>%`-chained pipeline or ggplot plot should be on separate lines, with the `%>%` or the `+` at the end of the line, indented with two spaces.\n\n```{r eval=FALSE}\nggplot(data = blah, mapping = aes(x = thing, y = thing2)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  scale_x_continuous() +\n  theme_minimal()\n```\n\nAdditionally, it's often a good idea to add lines in between the arguments inside functions and line them up within the `()`s of the function.\n\nThis makes it so you can clearly see each step of the pipeline or plot, and you can clearly see each of the arguments inside each function.\n\nPeople tend to take one of two approaches to argument alignment—aligning argument names at the same level as the opening `(` of the function like this:\n\n```{r eval=FALSE}\nsome_object <- some_dataset %>%\n  a_function() %>%\n  another_function(argument = 1,\n                   argument = 2,\n                   argument = some_function(thing1 = \"a\", \n                                            thing2 = \"b\")) %>%\n  yet_another_function()\n```\n\n…or aligning argument names two spaces to the right of where the argument starts, like this:\n\n```{r eval=FALSE}\nsome_object <- some_dataset %>%\n  a_function() %>%\n  another_function(\n    argument = 1,\n    argument = 2,\n    argument = some_function(\n      thing1 = \"a\", \n      thing2 = \"b\"\n    )\n  ) %>%\n  yet_another_function()\n```\n\nRStudio can actually reindent code for you automatically, and it can use either of these approaches. If you want the first approach (where argument names align after the opening `(`), check \"Tools > Global Options > Code > Vertically align arguments in auto-indent\"; if you want the second approach (where argument names are all a little indented from where the argument starts), make sure that option is unchecked.\n\nTo have RStudio reindent code for you, select the code you want to be reindented and go to \"Code > Reindent lines\", or use the keyboard shortcut <kbd>⌘I</kbd> on macOS or <kbd>ctrl + I</kbd> on Windows.\n\nHere's what that looks like. Notice how distorted the indentation is initially—RStudio is smart enough to fix it all:\n\n::: {.panel-tabset}\n#### With keyboard shortcut\n\n```{=html}\n<div class=\"ratio ratio-16x9\">\n<video controls width=\"100%\">\n  <source src=\"video/reindent-keyboard.mp4\" type=\"video/mp4\">\n</video>\n</div>\n```\n\n#### With menu\n\n```{=html}\n<div class=\"ratio ratio-16x9\">\n<video controls width=\"100%\">\n  <source src=\"video/reindent-menu.mp4\" type=\"video/mp4\">\n</video>\n</div>\n```\n\n#### Without vertical argument alignment\n\n```{=html}\n<div class=\"ratio ratio-16x9\">\n<video controls width=\"100%\">\n  <source src=\"video/reindent-no-vertical-alignment.mp4\" type=\"video/mp4\">\n</video>\n</div>\n```\n\n:::\n\nNot only does reindentation make it easier to read your code, it can reveal issues with the code. Remember that code from the beginning of this post with four things wrong? If we reindent it, the line that starts with `is_africa = ifelse(` is indented funny—it gets put at the start of the line, when really it should be at the same level as `gdp_total`, since those are both arguments for the `mutate()` function. If you look at the line above, you'll see that there's a `)` after `gdpPercap * pop`, which closes `mutate()` prematurely, so `is_africa` isn't actually inside `mutate()`. If we get rid of the `)` at the end of `pop` and reindent again, `is_africa` shows up in the right place.\n\n```{=html}\n<div class=\"ratio ratio-16x9\">\n<video controls width=\"100%\">\n  <source src=\"video/reindent-gapminder.mp4\" type=\"video/mp4\">\n</video>\n</div>\n```\n\n\\ \n\n::: {.callout-tip}\n### Extra strength formatting\n\nReindenting your code only shifts things around horizontally. If you want more powerful code reformatting, try using \"Code > Reformat Code\" (or use <kbd>⌘⇧A</kbd> on macOS or <kbd>ctrl + shift + A</kbd> on Windows). It's a more aggressive form of reformatting that will add extra line breaks and other things to make the code more readable:\n\n```{=html}\n<div class=\"ratio ratio-16x9\">\n<video controls width=\"100%\">\n  <source src=\"video/code-reformat.mp4\" type=\"video/mp4\">\n</video>\n</div>\n```\n\n\\ \n\nIt doesn't fix everything—there should be a line break after each `%>%` in that example ↑ so you'd need to add your own line break before `filter(year > 1990)` and `arrange(desc(gdp_total))`, but it works well.\n:::\n\nI'd recommend trying to keep things indented consistently as you write your code, and periodically reindenting stuff just to make sure everything is nice and aligned. Ultimately R doesn't care how your code is indented (other languages do, like Python, where one errant space can mess up everything), but humans do care and nicer indentation will help others (and future you!).\n\n\n### Run the code incrementally\n\nYour code is often a series of functions or layers connected with `%>%` or `+`. If something goes wrong at any step in the chain of functions, your code won't work. When that happens, the best strategy for figuring out what went wrong is to *run the code incrementally*. Just run a few layers of it at a time and then check to see how it looks. Run the first two lines, look at the results, make sure it worked, the run the first three lines, look at the results, make sure it worked, and so on.\n\nThis is also a good approach for writing your code initially. That big gapminder-based plot at the beginning of this post? I didn't write that all at once. I started with the initialy `ggplot() + geom_point()`, ran it, then added another layer or two, ran it with those, then added some more layers or changed some settings inside existing layers, then ran it with those, and so on until the whole thing was built.\n\nThere are a couple ways to do this. One way is to select just the code you want to run (like from the beginning of `ggplot()` to *right before* a `+` on some layer), then press <kbd>⌘ + return</kbd> on macOS or <kbd>ctrl + enter</kbd> on Windows to run just that selection. If it worked as expected, select from the beginning again (i.e. at `ggplot()`) and go to *right before* a `+` on some other layer and run that selection:\n\n```{=html}\n<div class=\"ratio ratio-16x9\">\n<video controls width=\"100%\">\n  <source src=\"video/line-by-line-select.mp4\" type=\"video/mp4\">\n</video>\n</div>\n```\n\n\\ \n\nIf you don't want to keep using your mouse and want to keep your hands at your keyboard, you can add a `#` right before a `+` or `%>%` to comment it out. That essentially breaks the chain of functions at that point, so when you type <kbd>⌘ + return</kbd> or <kbd>ctrl + enter</kbd>, R only runs the code up to that point. Then you can remove the `#`, put it before another `+` or `%>%`, and run it again.\n\n```{=html}\n<div class=\"ratio ratio-16x9\">\n<video controls width=\"100%\">\n  <source src=\"video/line-by-line-comments.mp4\" type=\"video/mp4\">\n</video>\n</div>\n```\n\n\\ \n\nHere's what my typical process for dealing with weirdly indented, broken code looks like. I try to run the whole thing initially, then when it breaks, I reindent it to see if anything is obvious from that. Then I start running it incrementally and check the results of each step to make sure it works up to that point. I do that over and over until the whole pipeline works.\n\n```{=html}\n<div class=\"ratio ratio-16x9\">\n<video controls width=\"100%\">\n  <source src=\"video/full-debug-line-by-line.mp4\" type=\"video/mp4\">\n</video>\n</div>\n```\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  fig.width = 6, \n  fig.height = 6 * 0.618, \n  fig.align = \"center\", \n  out.width = \"90%\",\n  collapse = TRUE\n)\n\nlibrary(tidyverse)\nlibrary(gapminder)\nlibrary(scales)\n```\n\n```{r ffmpeg-note, eval=FALSE, include=FALSE}\n# Convert Quicktime-created .mov files to .mp4\n# > ffmpeg -i input.mov output.mp4\n```\n\nLots of the code you run in this class is actually a big long chain of functions or plot layers, like {dplyr} functions that are all connected with `%>%`s or {ggplot2} functions that are all connected with `+`s.\n\nInevitably, something will go wrong at some point in the chain—often a misspelled word or a misplaced comma or a misplaced parenthesis. Tracking down (or debugging) the issue can be often be tricky! \n\nFor example, **four (4)** things are wrong in this code. See if you can spot them without running it—good luck!\n\n```{r gdp-broken, eval=FALSE}\ngapminder_gdp_thing <- gapminder %>% filter(year > 1990) %>% \n  mutate(gdp_total = gdpPercap * pop),\n     is_africa = ifelse(continent == \"Africa\", \n\"Is Africa\", \"Isn't Africa\"))) %>%  \n           group_by(year, continent) %>% \n  mutate(gdp_above_continent_median = \n           ifelse(gdp_total > median(gdp_total)), TRUE, FALSE)) %>%\nungroup() %>% arrange(desc(gdp_total)) %>%\n  mutate(continent = fct_inorder(continent) = country = fct_inorder(country))\n```\n\n::: {.callout-note collapse=\"true\"}\n### Click here for the answers\n\n```{r gdp-broken-answer, eval=FALSE}\ngapminder_gdp_thing <- gapminder %>% filter(year > 1990) %>% \n  mutate(gdp_total = gdpPercap * pop),  # <1>\n     is_africa = ifelse(continent == \"Africa\", \n\"Is Africa\", \"Isn't Africa\"))) %>%  # <2>\n           group_by(year, continent) %>% \n  mutate(gdp_above_continent_median = \n           ifelse(gdp_total > median(gdp_total)), TRUE, FALSE)) %>%  # <3>\nungroup() %>% arrange(desc(gdp_total)) %>%\n  mutate(continent = fct_inorder(continent) = country = fct_inorder(country))  # <4>\n```\n\n1. There's a closing parenthesis after `pop)` that shouldn't be there—it ends the `mutate()` too early and `is_africa = BLAH` ends up not being inside `mutate()`\n2. There's an extra parenthesis at the end of `\"Isn't Africa\")))`\n3. There's an extra parenthesis after `median(gdp_total))`\n4. There's an `=` instead of a comma in between `fct_inorder(continent)` and `country`\n\nHere's what the fixed, reindented version looks like:\n\n```{r gdp-broken-fixed}\ngapminder_gdp_thing <- gapminder %>% \n  filter(year > 1990) %>% \n  mutate(\n    gdp_total = gdpPercap * pop,  # <1>\n    is_africa = ifelse(\n      continent == \"Africa\", \n      \"Is Africa\", \n      \"Isn't Africa\") # <2>\n  ) %>%  # <2>\n  group_by(year, continent) %>% \n  mutate(\n    gdp_above_continent_median = ifelse(\n      gdp_total > median(gdp_total), \n      TRUE, \n      FALSE)  # <3>\n  ) %>%  # <3>\n  ungroup() %>% \n  arrange(desc(gdp_total)) %>%\n  mutate(continent = fct_inorder(continent), \n         country = fct_inorder(country))  # <4>\n```\n\n1. Fixed!\n2. Fixed!\n3. Fixed!\n4. Fixed!\n\n:::\n\nIt's nearly impossible to figure out what's wrong here without running it. And even if you do run it, you'll get somewhat cryptic errors.\n\nI have two important techniques and tips that fix 90% of my debugging problems:\n\n1. Reformat the code by reindenting it and breaking it into multiple lines\n2. Run the code incrementally, line by line\n\nEach of these techniques help track down issues in the code above and are good skills to know in general. I’ll explain each approach and give a little video demonstration below.\n\n\n### Reformat the code\n\nIn the [R style suggestions in the Resources section](/resource/style.qmd#pipes-and-ggplot-layers), it explains that each layer of a `%>%`-chained pipeline or ggplot plot should be on separate lines, with the `%>%` or the `+` at the end of the line, indented with two spaces.\n\n```{r eval=FALSE}\nggplot(data = blah, mapping = aes(x = thing, y = thing2)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  scale_x_continuous() +\n  theme_minimal()\n```\n\nAdditionally, it's often a good idea to add lines in between the arguments inside functions and line them up within the `()`s of the function.\n\nThis makes it so you can clearly see each step of the pipeline or plot, and you can clearly see each of the arguments inside each function.\n\nPeople tend to take one of two approaches to argument alignment—aligning argument names at the same level as the opening `(` of the function like this:\n\n```{r eval=FALSE}\nsome_object <- some_dataset %>%\n  a_function() %>%\n  another_function(argument = 1,\n                   argument = 2,\n                   argument = some_function(thing1 = \"a\", \n                                            thing2 = \"b\")) %>%\n  yet_another_function()\n```\n\n…or aligning argument names two spaces to the right of where the argument starts, like this:\n\n```{r eval=FALSE}\nsome_object <- some_dataset %>%\n  a_function() %>%\n  another_function(\n    argument = 1,\n    argument = 2,\n    argument = some_function(\n      thing1 = \"a\", \n      thing2 = \"b\"\n    )\n  ) %>%\n  yet_another_function()\n```\n\nRStudio can actually reindent code for you automatically, and it can use either of these approaches. If you want the first approach (where argument names align after the opening `(`), check \"Tools > Global Options > Code > Vertically align arguments in auto-indent\"; if you want the second approach (where argument names are all a little indented from where the argument starts), make sure that option is unchecked.\n\nTo have RStudio reindent code for you, select the code you want to be reindented and go to \"Code > Reindent lines\", or use the keyboard shortcut <kbd>⌘I</kbd> on macOS or <kbd>ctrl + I</kbd> on Windows.\n\nHere's what that looks like. Notice how distorted the indentation is initially—RStudio is smart enough to fix it all:\n\n::: {.panel-tabset}\n#### With keyboard shortcut\n\n```{=html}\n<div class=\"ratio ratio-16x9\">\n<video controls width=\"100%\">\n  <source src=\"video/reindent-keyboard.mp4\" type=\"video/mp4\">\n</video>\n</div>\n```\n\n#### With menu\n\n```{=html}\n<div class=\"ratio ratio-16x9\">\n<video controls width=\"100%\">\n  <source src=\"video/reindent-menu.mp4\" type=\"video/mp4\">\n</video>\n</div>\n```\n\n#### Without vertical argument alignment\n\n```{=html}\n<div class=\"ratio ratio-16x9\">\n<video controls width=\"100%\">\n  <source src=\"video/reindent-no-vertical-alignment.mp4\" type=\"video/mp4\">\n</video>\n</div>\n```\n\n:::\n\nNot only does reindentation make it easier to read your code, it can reveal issues with the code. Remember that code from the beginning of this post with four things wrong? If we reindent it, the line that starts with `is_africa = ifelse(` is indented funny—it gets put at the start of the line, when really it should be at the same level as `gdp_total`, since those are both arguments for the `mutate()` function. If you look at the line above, you'll see that there's a `)` after `gdpPercap * pop`, which closes `mutate()` prematurely, so `is_africa` isn't actually inside `mutate()`. If we get rid of the `)` at the end of `pop` and reindent again, `is_africa` shows up in the right place.\n\n```{=html}\n<div class=\"ratio ratio-16x9\">\n<video controls width=\"100%\">\n  <source src=\"video/reindent-gapminder.mp4\" type=\"video/mp4\">\n</video>\n</div>\n```\n\n\\ \n\n::: {.callout-tip}\n### Extra strength formatting\n\nReindenting your code only shifts things around horizontally. If you want more powerful code reformatting, try using \"Code > Reformat Code\" (or use <kbd>⌘⇧A</kbd> on macOS or <kbd>ctrl + shift + A</kbd> on Windows). It's a more aggressive form of reformatting that will add extra line breaks and other things to make the code more readable:\n\n```{=html}\n<div class=\"ratio ratio-16x9\">\n<video controls width=\"100%\">\n  <source src=\"video/code-reformat.mp4\" type=\"video/mp4\">\n</video>\n</div>\n```\n\n\\ \n\nIt doesn't fix everything—there should be a line break after each `%>%` in that example ↑ so you'd need to add your own line break before `filter(year > 1990)` and `arrange(desc(gdp_total))`, but it works well.\n:::\n\nI'd recommend trying to keep things indented consistently as you write your code, and periodically reindenting stuff just to make sure everything is nice and aligned. Ultimately R doesn't care how your code is indented (other languages do, like Python, where one errant space can mess up everything), but humans do care and nicer indentation will help others (and future you!).\n\n\n### Run the code incrementally\n\nYour code is often a series of functions or layers connected with `%>%` or `+`. If something goes wrong at any step in the chain of functions, your code won't work. When that happens, the best strategy for figuring out what went wrong is to *run the code incrementally*. Just run a few layers of it at a time and then check to see how it looks. Run the first two lines, look at the results, make sure it worked, the run the first three lines, look at the results, make sure it worked, and so on.\n\nThis is also a good approach for writing your code initially. That big gapminder-based plot at the beginning of this post? I didn't write that all at once. I started with the initialy `ggplot() + geom_point()`, ran it, then added another layer or two, ran it with those, then added some more layers or changed some settings inside existing layers, then ran it with those, and so on until the whole thing was built.\n\nThere are a couple ways to do this. One way is to select just the code you want to run (like from the beginning of `ggplot()` to *right before* a `+` on some layer), then press <kbd>⌘ + return</kbd> on macOS or <kbd>ctrl + enter</kbd> on Windows to run just that selection. If it worked as expected, select from the beginning again (i.e. at `ggplot()`) and go to *right before* a `+` on some other layer and run that selection:\n\n```{=html}\n<div class=\"ratio ratio-16x9\">\n<video controls width=\"100%\">\n  <source src=\"video/line-by-line-select.mp4\" type=\"video/mp4\">\n</video>\n</div>\n```\n\n\\ \n\nIf you don't want to keep using your mouse and want to keep your hands at your keyboard, you can add a `#` right before a `+` or `%>%` to comment it out. That essentially breaks the chain of functions at that point, so when you type <kbd>⌘ + return</kbd> or <kbd>ctrl + enter</kbd>, R only runs the code up to that point. Then you can remove the `#`, put it before another `+` or `%>%`, and run it again.\n\n```{=html}\n<div class=\"ratio ratio-16x9\">\n<video controls width=\"100%\">\n  <source src=\"video/line-by-line-comments.mp4\" type=\"video/mp4\">\n</video>\n</div>\n```\n\n\\ \n\nHere's what my typical process for dealing with weirdly indented, broken code looks like. I try to run the whole thing initially, then when it breaks, I reindent it to see if anything is obvious from that. Then I start running it incrementally and check the results of each step to make sure it works up to that point. I do that over and over until the whole pipeline works.\n\n```{=html}\n<div class=\"ratio ratio-16x9\">\n<video controls width=\"100%\">\n  <source src=\"video/full-debug-line-by-line.mp4\" type=\"video/mp4\">\n</video>\n</div>\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"highlight-style":"monokai","toc-depth":4,"output-file":"2023-10-12_messy-broken-code-tips.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Posted","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["../files/bib/readings.bib"],"csl":"../files/bib/chicago-author-date.csl","_quarto-vars":{"author":"Andrew Heiss","instructor":{"name":"Dr. Andrew Heiss","name_no_title":"Andrew Heiss","email":"aheiss@gsu.edu","url":"https://www.andrewheiss.com","twitter":"andrewheiss","github":"andrewheiss","office":"55 Park Place SE, Room 464","contact_policy":"E-mail and Slack are the best ways to get in contact with me. I will try to respond to all course-related e-mails and Slack messages within 24 hours (*really*), but also remember that life can be busy and chaotic for everyone (including me!), so if I don't respond right away, don't worry!","appointment_url":"https://calendly.com/andrewheiss/"},"course":{"number":"PMAP 8551/4551","semester":"Fall 2023","days":"Any day","time":"Asynchronous","location":"Anywhere","dates":"August 12–December 11, 2023","github":"https://www.github.com/andrewheiss/datavizf23.classes.andrewheiss.com","url":"https://datavizf23.classes.andrewheiss.com","copyright_year":"2023","slack":"https://gsudatavizf2023.slack.com"},"university":{"name":"Georgia State University","url":"https://www.gsu.edu"},"school":{"name":"Andrew Young School of Policy Studies","url":"https://aysps.gsu.edu/"}},"theme":["litera","../html/custom.scss"],"date-format":"dddd MMMM D, YYYY [at] h:mm A","template-partials":["../html/news/title-block.html"],"title":"Tips for debugging and cleaning broken code","date":"2023-10-12T16:30","categories":["advice"],"resources":["video/*"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}