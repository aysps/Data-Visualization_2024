{"title":"Week 5 FAQs","markdown":{"yaml":{"title":"Week 5 FAQs","date":"2023-09-27T15:16","categories":["FAQs"],"toc-depth":4},"headingText":"I made a bunch of changes to my plot with `theme()` but when I used `ggsave()`, none of them actually saved. Why?","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  fig.width = 6, \n  fig.height = 6 * 0.618, \n  fig.align = \"center\", \n  out.width = \"90%\",\n  collapse = TRUE\n)\n\nlibrary(tidyverse)\n```\n\nHi everyone!\n\nGreat work with your ugly plots last week! Hopefully it gave you good exposure to the power of ggplot themes. In the future, you'll want to *avoid* such awful design sins and follow CRAP for real, but now you know how to make all sorts of adjustments to your plots in the future.\n\nThere are a few good and important FAQs for this week. Here we go!\n\n\nThis is a really common occurrence—don't worry! And it's easy to fix!\n\nIn the code I gave you in exercise 5, you stored the results of `ggplot()` as an object named `ugly_plot`, like this (this isn't the same data as exercise 5, but shows the same general principle): \n\n```{r create-basic-plot}\nugly_plot <- ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point()\n\nugly_plot\n```\n\nThat `ugly_plot` object contains the basic underlying plot that you wanted to adjust. You then used it with {ggThemeAssist} to make modifications, something like this:\n\n```{r basic-plot-with-theme-stuff}\nugly_plot + \n  theme_dark(base_family = \"mono\") +\n  theme(\n    legend.position = c(0.5, 0.5),\n    legend.title = element_text(family = \"Comic Sans MS\", size = rel(3)),\n    panel.grid = element_line(color = \"purple\")\n  )\n```\n\nThat's great and nice and ugly and it displays in your document just fine. If you then use `ggsave()` like this:\n\n```{r ggsave-wrong, eval=FALSE}\nggsave(\"my_ugly_plot.png\", ugly_plot)\n```\n\n…you'll see that it actually *doesn't* save all the `theme()` changes. That's because it's saving the `ugly_plot` object, which is just the underlying base plot before adding theme changes.\n\nIf you want to keep the theme changes you make, you need to store them in an object, either overwriting the original `ugly_plot` object, or creating a new object:\n\n::: {.panel-tabset}\n#### Create new object\n\n```{r store-changes-new, eval=FALSE}\nugly_plot1 <- ugly_plot + \n  theme_dark(base_family = \"mono\") +\n  theme(\n    legend.position = c(0.5, 0.5),\n    legend.title = element_text(family = \"Comic Sans MS\", size = rel(3)),\n    panel.grid = element_line(color = \"purple\")\n  )\n# Show the plot\nugly_plot1\n\n# Save the plot\nggsave(\"my_ugly_plot.png\", ugly_plot1)\n```\n\n#### Overwrite `ugly_plot`\n\n```{r store-changes-overwrite, eval=FALSE}\nugly_plot <- ugly_plot + \n  theme_dark(base_family = \"mono\") +\n  theme(\n    legend.position = c(0.5, 0.5),\n    legend.title = element_text(family = \"Comic Sans MS\", size = rel(3)),\n    panel.grid = element_line(color = \"purple\")\n  )\n# Show the plot\nugly_plot\n\n# Save the plot\nggsave(\"my_ugly_plot.png\", ugly_plot)\n```\n\n:::\n\n\n### In chapter 22, Wilke talks about tables—is there a way to make pretty tables with R?\n\nAbsolutely! We don't have time in this class to cover tables, but there's a whole world of packages for making beautiful tables with R. Three of the more common ones are [{gt}](https://gt.rstudio.com/), [{kableExtra}](https://haozhu233.github.io/kableExtra/), and [{flextable}](https://ardata-fr.github.io/flextable-book/):\n\n```{r table-summary, echo=FALSE}\n#| classes: no-stripe\nlibrary(gt)\n\ntribble(\n  ~`Package`, ~HTML, ~PDF, ~Word, ~` `, ~Notes,\n  \"[**{gt}**](https://gt.rstudio.com/)\", \"**Great**\", \"Okay\", \"Okay\", \"[Examples](https://gt.rstudio.com/articles/case-study-gtcars.html)\", 'Has the goal of becoming the “grammar of tables” (hence “gt”). It is supported by developers at Posit and gets updated and improved regularly. It\\'ll likely become the main table-making package for R.',\n  \"[**{kableExtra}**](https://haozhu233.github.io/kableExtra/)\", \"**Great**\", \"**Great**\", \"Okay\", \"[Examples](https://haozhu233.github.io/kableExtra/awesome_table_in_html.html)\", \"Works really well for HTML output and has the best support for PDF output, but development has stalled for the past couple years and it seems to maybe be abandoned, which is sad.\",\n  \"[**{flextable}**](https://ardata-fr.github.io/flextable-book/)\", \"**Great**\", \"Okay\", \"**Great**\", \"[Examples](https://ardata-fr.github.io/flextable-book/index.html#walkthrough-simple-example)\", \"Works really well for HTML output and has the best support for Word output. It's not abandoned and gets regular updates.\"\n) %>% \n  gt() %>% \n  cols_width(\n    Package ~ pct(13),\n    one_of(c(\"HTML\", \"PDF\", \"Word\")) ~ pct(6),\n    ` ` ~ pct(10),\n    Notes ~ pct(59)\n  ) %>% \n  fmt_markdown(\n    columns = everything()\n  ) %>% \n  tab_spanner(\n    label = \"Output support\",\n    columns = c(HTML, PDF, Word)\n  ) %>% \n  opt_table_font(font = \"Barlow\") %>% \n  tab_options(column_labels.font.weight = \"bold\",\n              row_group.font.weight = \"bold\") %>% \n  tab_style(\n    style = \"vertical-align: top;\",\n    locations = cells_body()\n  )\n```\n\nHere's a quick illustration of these three packages. All three are incredibly powerful and let you do all sorts of really neat formatting things ([{gt} even makes interactive HTML tables!](https://gt.rstudio.com/reference/opt_interactive.html)), so make sure you check out the documentation and examples. I personally use all three, depending on which output I'm working with. When knitting to HTML, I use {gt}; when knitting to PDF I use {gt} or {kableExtra}; when knitting to Word I use {flextable}.\n\n::: {.panel-tabset}\n### Dataset to table-ify\n\n```{r create-table-data, warning=FALSE, message=FALSE}\nlibrary(tidyverse)\n\ncars_summary <- mpg %>% \n  group_by(year, drv) %>%\n  summarize(\n    n = n(),\n    avg_mpg = mean(hwy),\n    median_mpg = median(hwy),\n    min_mpg = min(hwy),\n    max_mpg = max(hwy)\n  )\n```\n\n### {gt}\n\n```{r gt-example}\n#| classes: no-stripe\nlibrary(gt)\n\ncars_summary %>% \n  gt() %>% \n  cols_label(\n    drv = \"Drive\",\n    n = \"N\",\n    avg_mpg = \"Average\",\n    median_mpg = \"Median\",\n    min_mpg = \"Minimum\",\n    max_mpg = \"Maximum\"\n  ) %>% \n  tab_spanner(\n    label = \"Highway MPG\",\n    columns = c(avg_mpg, median_mpg, min_mpg, max_mpg)\n  ) %>% \n  fmt_number(\n    columns = avg_mpg,\n    decimals = 2\n  ) %>% \n  tab_options(\n    row_group.as_column = TRUE\n  )\n```\n\n### {kableExtra}\n\n```{r kableExtra-example, warning=FALSE, message=FALSE}\n#| classes: no-stripe\nlibrary(kableExtra)\n\ncars_summary %>% \n  ungroup() %>% \n  select(-year) %>% \n  kbl(\n    col.names = c(\"Drive\", \"N\", \"Average\", \"Median\", \"Minimum\", \"Maximum\"),\n    digits = 2\n  ) %>% \n  kable_styling() %>% \n  pack_rows(\"1999\", 1, 3) %>% \n  pack_rows(\"2008\", 4, 6) %>% \n  add_header_above(c(\" \" = 2, \"Highway MPG\" = 4))\n```\n\n\n### {flextable}\n\n```{r flextable-example, message=FALSE}\n#| tbl-cap: Flextable example\nlibrary(flextable)\n\ncars_summary %>% \n  rename(\n    \"Year\" = year,\n    \"Drive\" = drv,\n    \"N\" = n,\n    \"Average\" = avg_mpg,\n    \"Median\" = median_mpg,\n    \"Minimum\" = min_mpg,\n    \"Maximum\" = max_mpg\n    ) %>% \n  mutate(Year = as.character(Year)) %>% \n  flextable() %>% \n  colformat_double(j = \"Average\", digits = 2) %>%\n  add_header_row(values = c(\" \", \"Highway MPG\"), colwidths = c(3, 4)) %>% \n  align(i = 1, part = \"header\", align = \"center\") %>% \n  merge_v(j = ~ Year) %>% \n  valign(j = 1, valign = \"top\")\n```\n\n:::\n\nYou can also create more specialized tables for specific situations, like side-by-side regression results tables with [{modelsummary}](https://vincentarelbundock.github.io/modelsummary/) (which uses {gt}, {kableExtra}, or {flextable} behind the scenes)\n\n```{r modelsummary-example}\n#| classes: no-stripe\nlibrary(modelsummary)\n\nmodel1 <- lm(hwy ~ displ, data = mpg)\nmodel2 <- lm(hwy ~ displ + drv, data = mpg)\n\nmodelsummary(\n  list(model1, model2),\n  stars = TRUE,\n  # Rename the coefficients\n  coef_rename = c(\n    \"(Intercept)\" = \"Intercept\",\n    \"displ\" = \"Displacement\",\n    \"drvf\" = \"Drive (front)\",\n    \"drvr\" = \"Drive (rear)\"),\n  # Get rid of some of the extra goodness-of-fit statistics\n  gof_omit = \"IC|RMSE|F|Log\",\n  # Use {gt}\n  output = \"gt\"\n)\n```\n\n\n### Double encoding and excessive legends\n\nAs you've read, double encoding aesthetics can be helpful for accessibility and printing reasons—for instance, if points have colors and shapes, they're still readable by people who are colorblind or if the image is printed in black and white:\n\n```{r double-encoding-example}\nggplot(mpg, aes(x = displ, y = hwy, color = drv, shape = drv)) +\n  geom_point()\n```\n\nSometimes the double encoding can be excessive though, and you can safely remove legends. For example, in exercises 3 and 4, you made bar charts showing counts of different things (words spoken in *The Lord of the Rings*; pandemic-era construction projects in New York City), and lots of you colored the bars, which is great!\n\n```{r car-example-legend}\ncar_counts <- mpg %>% \n  group_by(drv) %>% \n  summarize(n = n())\n\nggplot(car_counts, aes(x = drv, y = n, fill = drv)) +\n  geom_col()\n```\n\nCar drive here is double encoded: it's on the x-axis and it's the fill. That's great, but having the legend here is actually a little excessive. Both the x-axis and the legend tell us what the different colors of drives are (four-, front-, and rear-wheeled drives), so we can safely remove the legend and get a little more space in the plot area:\n\n```{r car-example-no-legend}\nggplot(car_counts, aes(x = drv, y = n, fill = drv)) +\n  geom_col() +\n  guides(fill = \"none\")\n```\n\n\n### Legends are cool, but I've read that directly labeling things can be better. Is there a way to label things without a legend?\n\nYes! Later in the semester we'll cover [annotations](/content/09-content.qmd), but in the meantime, you can check out a couple packages that let you directly label geoms that have been mapped to aesthetics. \n\n#### {geomtextpath}\n\nThe [{geomtextpath}](https://allancameron.github.io/geomtextpath/) package lets you add labels directly to paths and lines with functions like `geom_textline()` and `geom_labelline()` and `geom_labelsmooth()`.\n\nLike, here's the relationship between penguin bill lengths and penguin weights across three different species:\n\n```{r penguin-textpath, message=FALSE}\n# This isn't on CRAN, so you need to install it by running this:\n# remotes::install_github(\"AllanCameron/geomtextpath\")\nlibrary(geomtextpath)\nlibrary(palmerpenguins)  # Penguin data\n\n# Get rid of the rows that are missing sex\npenguins <- penguins %>% drop_na(sex)\n\nggplot(\n  penguins, \n  aes(x = bill_length_mm, y = body_mass_g, color = species)\n) +\n  geom_point(alpha = 0.5) +  # Make the points a little bit transparent\n  geom_labelsmooth(\n    aes(label = species), \n    # This spreads the letters out a bit\n    text_smoothing = 80\n  ) +\n  # Turn off the legend bc we don't need it now\n  guides(color = \"none\")\n```\n\nAnd the average continent-level life expectancy across time: \n\n```{r gapminder-textpath, message=FALSE}\nlibrary(gapminder)\n\ngapminder_lifeexp <- gapminder %>% \n  group_by(continent, year) %>% \n  summarize(avg_lifeexp = mean(lifeExp))\n\nggplot(\n  gapminder_lifeexp, \n  aes(x = year, y = avg_lifeexp, color = continent)\n) +\n  geom_textline(\n    aes(label = continent, hjust = continent),\n    linewidth = 1, size = 4\n  ) +\n  guides(color = \"none\")\n```\n\n#### {ggdirectlabel}\n\nA new package named [{ggdirectlabel}](https://github.com/MattCowgill/ggdirectlabel) lets you add legends directly to your plot area:\n\n```{r penguins-directlabel, message=FALSE}\n# This also isn't on CRAN, so you need to install it by running this:\n# remotes::install_github(\"MattCowgill/ggdirectlabel\")\nlibrary(ggdirectlabel)\n\nggplot(\n  penguins, \n  aes(x = bill_length_mm, y = body_mass_g, color = species)\n) +\n  geom_point(alpha = 0.5) +\n  geom_smooth() +\n  geom_richlegend(\n    aes(label = species),  # Use the species as the fake legend labels\n    legend.position = \"topleft\",  # Put it in the top left\n    hjust = 0  # Make the text left-aligned (horizontal adjustment, or hjust)\n  ) +\n  guides(color = \"none\")\n```\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  fig.width = 6, \n  fig.height = 6 * 0.618, \n  fig.align = \"center\", \n  out.width = \"90%\",\n  collapse = TRUE\n)\n\nlibrary(tidyverse)\n```\n\nHi everyone!\n\nGreat work with your ugly plots last week! Hopefully it gave you good exposure to the power of ggplot themes. In the future, you'll want to *avoid* such awful design sins and follow CRAP for real, but now you know how to make all sorts of adjustments to your plots in the future.\n\nThere are a few good and important FAQs for this week. Here we go!\n\n### I made a bunch of changes to my plot with `theme()` but when I used `ggsave()`, none of them actually saved. Why?\n\nThis is a really common occurrence—don't worry! And it's easy to fix!\n\nIn the code I gave you in exercise 5, you stored the results of `ggplot()` as an object named `ugly_plot`, like this (this isn't the same data as exercise 5, but shows the same general principle): \n\n```{r create-basic-plot}\nugly_plot <- ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point()\n\nugly_plot\n```\n\nThat `ugly_plot` object contains the basic underlying plot that you wanted to adjust. You then used it with {ggThemeAssist} to make modifications, something like this:\n\n```{r basic-plot-with-theme-stuff}\nugly_plot + \n  theme_dark(base_family = \"mono\") +\n  theme(\n    legend.position = c(0.5, 0.5),\n    legend.title = element_text(family = \"Comic Sans MS\", size = rel(3)),\n    panel.grid = element_line(color = \"purple\")\n  )\n```\n\nThat's great and nice and ugly and it displays in your document just fine. If you then use `ggsave()` like this:\n\n```{r ggsave-wrong, eval=FALSE}\nggsave(\"my_ugly_plot.png\", ugly_plot)\n```\n\n…you'll see that it actually *doesn't* save all the `theme()` changes. That's because it's saving the `ugly_plot` object, which is just the underlying base plot before adding theme changes.\n\nIf you want to keep the theme changes you make, you need to store them in an object, either overwriting the original `ugly_plot` object, or creating a new object:\n\n::: {.panel-tabset}\n#### Create new object\n\n```{r store-changes-new, eval=FALSE}\nugly_plot1 <- ugly_plot + \n  theme_dark(base_family = \"mono\") +\n  theme(\n    legend.position = c(0.5, 0.5),\n    legend.title = element_text(family = \"Comic Sans MS\", size = rel(3)),\n    panel.grid = element_line(color = \"purple\")\n  )\n# Show the plot\nugly_plot1\n\n# Save the plot\nggsave(\"my_ugly_plot.png\", ugly_plot1)\n```\n\n#### Overwrite `ugly_plot`\n\n```{r store-changes-overwrite, eval=FALSE}\nugly_plot <- ugly_plot + \n  theme_dark(base_family = \"mono\") +\n  theme(\n    legend.position = c(0.5, 0.5),\n    legend.title = element_text(family = \"Comic Sans MS\", size = rel(3)),\n    panel.grid = element_line(color = \"purple\")\n  )\n# Show the plot\nugly_plot\n\n# Save the plot\nggsave(\"my_ugly_plot.png\", ugly_plot)\n```\n\n:::\n\n\n### In chapter 22, Wilke talks about tables—is there a way to make pretty tables with R?\n\nAbsolutely! We don't have time in this class to cover tables, but there's a whole world of packages for making beautiful tables with R. Three of the more common ones are [{gt}](https://gt.rstudio.com/), [{kableExtra}](https://haozhu233.github.io/kableExtra/), and [{flextable}](https://ardata-fr.github.io/flextable-book/):\n\n```{r table-summary, echo=FALSE}\n#| classes: no-stripe\nlibrary(gt)\n\ntribble(\n  ~`Package`, ~HTML, ~PDF, ~Word, ~` `, ~Notes,\n  \"[**{gt}**](https://gt.rstudio.com/)\", \"**Great**\", \"Okay\", \"Okay\", \"[Examples](https://gt.rstudio.com/articles/case-study-gtcars.html)\", 'Has the goal of becoming the “grammar of tables” (hence “gt”). It is supported by developers at Posit and gets updated and improved regularly. It\\'ll likely become the main table-making package for R.',\n  \"[**{kableExtra}**](https://haozhu233.github.io/kableExtra/)\", \"**Great**\", \"**Great**\", \"Okay\", \"[Examples](https://haozhu233.github.io/kableExtra/awesome_table_in_html.html)\", \"Works really well for HTML output and has the best support for PDF output, but development has stalled for the past couple years and it seems to maybe be abandoned, which is sad.\",\n  \"[**{flextable}**](https://ardata-fr.github.io/flextable-book/)\", \"**Great**\", \"Okay\", \"**Great**\", \"[Examples](https://ardata-fr.github.io/flextable-book/index.html#walkthrough-simple-example)\", \"Works really well for HTML output and has the best support for Word output. It's not abandoned and gets regular updates.\"\n) %>% \n  gt() %>% \n  cols_width(\n    Package ~ pct(13),\n    one_of(c(\"HTML\", \"PDF\", \"Word\")) ~ pct(6),\n    ` ` ~ pct(10),\n    Notes ~ pct(59)\n  ) %>% \n  fmt_markdown(\n    columns = everything()\n  ) %>% \n  tab_spanner(\n    label = \"Output support\",\n    columns = c(HTML, PDF, Word)\n  ) %>% \n  opt_table_font(font = \"Barlow\") %>% \n  tab_options(column_labels.font.weight = \"bold\",\n              row_group.font.weight = \"bold\") %>% \n  tab_style(\n    style = \"vertical-align: top;\",\n    locations = cells_body()\n  )\n```\n\nHere's a quick illustration of these three packages. All three are incredibly powerful and let you do all sorts of really neat formatting things ([{gt} even makes interactive HTML tables!](https://gt.rstudio.com/reference/opt_interactive.html)), so make sure you check out the documentation and examples. I personally use all three, depending on which output I'm working with. When knitting to HTML, I use {gt}; when knitting to PDF I use {gt} or {kableExtra}; when knitting to Word I use {flextable}.\n\n::: {.panel-tabset}\n### Dataset to table-ify\n\n```{r create-table-data, warning=FALSE, message=FALSE}\nlibrary(tidyverse)\n\ncars_summary <- mpg %>% \n  group_by(year, drv) %>%\n  summarize(\n    n = n(),\n    avg_mpg = mean(hwy),\n    median_mpg = median(hwy),\n    min_mpg = min(hwy),\n    max_mpg = max(hwy)\n  )\n```\n\n### {gt}\n\n```{r gt-example}\n#| classes: no-stripe\nlibrary(gt)\n\ncars_summary %>% \n  gt() %>% \n  cols_label(\n    drv = \"Drive\",\n    n = \"N\",\n    avg_mpg = \"Average\",\n    median_mpg = \"Median\",\n    min_mpg = \"Minimum\",\n    max_mpg = \"Maximum\"\n  ) %>% \n  tab_spanner(\n    label = \"Highway MPG\",\n    columns = c(avg_mpg, median_mpg, min_mpg, max_mpg)\n  ) %>% \n  fmt_number(\n    columns = avg_mpg,\n    decimals = 2\n  ) %>% \n  tab_options(\n    row_group.as_column = TRUE\n  )\n```\n\n### {kableExtra}\n\n```{r kableExtra-example, warning=FALSE, message=FALSE}\n#| classes: no-stripe\nlibrary(kableExtra)\n\ncars_summary %>% \n  ungroup() %>% \n  select(-year) %>% \n  kbl(\n    col.names = c(\"Drive\", \"N\", \"Average\", \"Median\", \"Minimum\", \"Maximum\"),\n    digits = 2\n  ) %>% \n  kable_styling() %>% \n  pack_rows(\"1999\", 1, 3) %>% \n  pack_rows(\"2008\", 4, 6) %>% \n  add_header_above(c(\" \" = 2, \"Highway MPG\" = 4))\n```\n\n\n### {flextable}\n\n```{r flextable-example, message=FALSE}\n#| tbl-cap: Flextable example\nlibrary(flextable)\n\ncars_summary %>% \n  rename(\n    \"Year\" = year,\n    \"Drive\" = drv,\n    \"N\" = n,\n    \"Average\" = avg_mpg,\n    \"Median\" = median_mpg,\n    \"Minimum\" = min_mpg,\n    \"Maximum\" = max_mpg\n    ) %>% \n  mutate(Year = as.character(Year)) %>% \n  flextable() %>% \n  colformat_double(j = \"Average\", digits = 2) %>%\n  add_header_row(values = c(\" \", \"Highway MPG\"), colwidths = c(3, 4)) %>% \n  align(i = 1, part = \"header\", align = \"center\") %>% \n  merge_v(j = ~ Year) %>% \n  valign(j = 1, valign = \"top\")\n```\n\n:::\n\nYou can also create more specialized tables for specific situations, like side-by-side regression results tables with [{modelsummary}](https://vincentarelbundock.github.io/modelsummary/) (which uses {gt}, {kableExtra}, or {flextable} behind the scenes)\n\n```{r modelsummary-example}\n#| classes: no-stripe\nlibrary(modelsummary)\n\nmodel1 <- lm(hwy ~ displ, data = mpg)\nmodel2 <- lm(hwy ~ displ + drv, data = mpg)\n\nmodelsummary(\n  list(model1, model2),\n  stars = TRUE,\n  # Rename the coefficients\n  coef_rename = c(\n    \"(Intercept)\" = \"Intercept\",\n    \"displ\" = \"Displacement\",\n    \"drvf\" = \"Drive (front)\",\n    \"drvr\" = \"Drive (rear)\"),\n  # Get rid of some of the extra goodness-of-fit statistics\n  gof_omit = \"IC|RMSE|F|Log\",\n  # Use {gt}\n  output = \"gt\"\n)\n```\n\n\n### Double encoding and excessive legends\n\nAs you've read, double encoding aesthetics can be helpful for accessibility and printing reasons—for instance, if points have colors and shapes, they're still readable by people who are colorblind or if the image is printed in black and white:\n\n```{r double-encoding-example}\nggplot(mpg, aes(x = displ, y = hwy, color = drv, shape = drv)) +\n  geom_point()\n```\n\nSometimes the double encoding can be excessive though, and you can safely remove legends. For example, in exercises 3 and 4, you made bar charts showing counts of different things (words spoken in *The Lord of the Rings*; pandemic-era construction projects in New York City), and lots of you colored the bars, which is great!\n\n```{r car-example-legend}\ncar_counts <- mpg %>% \n  group_by(drv) %>% \n  summarize(n = n())\n\nggplot(car_counts, aes(x = drv, y = n, fill = drv)) +\n  geom_col()\n```\n\nCar drive here is double encoded: it's on the x-axis and it's the fill. That's great, but having the legend here is actually a little excessive. Both the x-axis and the legend tell us what the different colors of drives are (four-, front-, and rear-wheeled drives), so we can safely remove the legend and get a little more space in the plot area:\n\n```{r car-example-no-legend}\nggplot(car_counts, aes(x = drv, y = n, fill = drv)) +\n  geom_col() +\n  guides(fill = \"none\")\n```\n\n\n### Legends are cool, but I've read that directly labeling things can be better. Is there a way to label things without a legend?\n\nYes! Later in the semester we'll cover [annotations](/content/09-content.qmd), but in the meantime, you can check out a couple packages that let you directly label geoms that have been mapped to aesthetics. \n\n#### {geomtextpath}\n\nThe [{geomtextpath}](https://allancameron.github.io/geomtextpath/) package lets you add labels directly to paths and lines with functions like `geom_textline()` and `geom_labelline()` and `geom_labelsmooth()`.\n\nLike, here's the relationship between penguin bill lengths and penguin weights across three different species:\n\n```{r penguin-textpath, message=FALSE}\n# This isn't on CRAN, so you need to install it by running this:\n# remotes::install_github(\"AllanCameron/geomtextpath\")\nlibrary(geomtextpath)\nlibrary(palmerpenguins)  # Penguin data\n\n# Get rid of the rows that are missing sex\npenguins <- penguins %>% drop_na(sex)\n\nggplot(\n  penguins, \n  aes(x = bill_length_mm, y = body_mass_g, color = species)\n) +\n  geom_point(alpha = 0.5) +  # Make the points a little bit transparent\n  geom_labelsmooth(\n    aes(label = species), \n    # This spreads the letters out a bit\n    text_smoothing = 80\n  ) +\n  # Turn off the legend bc we don't need it now\n  guides(color = \"none\")\n```\n\nAnd the average continent-level life expectancy across time: \n\n```{r gapminder-textpath, message=FALSE}\nlibrary(gapminder)\n\ngapminder_lifeexp <- gapminder %>% \n  group_by(continent, year) %>% \n  summarize(avg_lifeexp = mean(lifeExp))\n\nggplot(\n  gapminder_lifeexp, \n  aes(x = year, y = avg_lifeexp, color = continent)\n) +\n  geom_textline(\n    aes(label = continent, hjust = continent),\n    linewidth = 1, size = 4\n  ) +\n  guides(color = \"none\")\n```\n\n#### {ggdirectlabel}\n\nA new package named [{ggdirectlabel}](https://github.com/MattCowgill/ggdirectlabel) lets you add legends directly to your plot area:\n\n```{r penguins-directlabel, message=FALSE}\n# This also isn't on CRAN, so you need to install it by running this:\n# remotes::install_github(\"MattCowgill/ggdirectlabel\")\nlibrary(ggdirectlabel)\n\nggplot(\n  penguins, \n  aes(x = bill_length_mm, y = body_mass_g, color = species)\n) +\n  geom_point(alpha = 0.5) +\n  geom_smooth() +\n  geom_richlegend(\n    aes(label = species),  # Use the species as the fake legend labels\n    legend.position = \"topleft\",  # Put it in the top left\n    hjust = 0  # Make the text left-aligned (horizontal adjustment, or hjust)\n  ) +\n  guides(color = \"none\")\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"highlight-style":"monokai","toc-depth":4,"output-file":"2023-09-27_faqs_week-05.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Posted","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["../files/bib/readings.bib"],"csl":"../files/bib/chicago-author-date.csl","_quarto-vars":{"author":"Andrew Heiss","instructor":{"name":"Dr. Andrew Heiss","name_no_title":"Andrew Heiss","email":"aheiss@gsu.edu","url":"https://www.andrewheiss.com","twitter":"andrewheiss","github":"andrewheiss","office":"55 Park Place SE, Room 464","contact_policy":"E-mail and Slack are the best ways to get in contact with me. I will try to respond to all course-related e-mails and Slack messages within 24 hours (*really*), but also remember that life can be busy and chaotic for everyone (including me!), so if I don't respond right away, don't worry!","appointment_url":"https://calendly.com/andrewheiss/"},"course":{"number":"PMAP 8551/4551","semester":"Fall 2023","days":"Any day","time":"Asynchronous","location":"Anywhere","dates":"August 12–December 11, 2023","github":"https://www.github.com/andrewheiss/datavizf23.classes.andrewheiss.com","url":"https://datavizf23.classes.andrewheiss.com","copyright_year":"2023","slack":"https://gsudatavizf2023.slack.com"},"university":{"name":"Georgia State University","url":"https://www.gsu.edu"},"school":{"name":"Andrew Young School of Policy Studies","url":"https://aysps.gsu.edu/"}},"theme":["litera","../html/custom.scss"],"date-format":"dddd MMMM D, YYYY [at] h:mm A","template-partials":["../html/news/title-block.html"],"title":"Week 5 FAQs","date":"2023-09-27T15:16","categories":["FAQs"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}