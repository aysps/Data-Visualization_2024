{"title":"Weeks 8, 9, and 10 tips and FAQs","markdown":{"yaml":{"title":"Weeks 8, 9, and 10 tips and FAQs","date":"2023-11-06T22:54","categories":["FAQs"],"toc-depth":4},"headingText":"In my coefficient plot, the coefficient for `per_capita_income` didn’t have error bars around it. Why?","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  fig.width = 6, \n  fig.height = 6 * 0.618, \n  fig.align = \"center\", \n  out.width = \"90%\",\n  collapse = TRUE\n)\n```\n\nHi everyone!\n\nApologies for the delay on FAQ posts! I've got some extra good tips here, though, to make up for the past couple weeks!\n\n\n(Technically this was from week 7, but I got a lot of questions about it after I posted the FAQs for week 7, so here it is.)\n\nIn [exercise 7](/assignment/07-exercise.qmd) you created a coefficient plot for a regression model predicting Democratic vote share in the 2016 presidential election based on a bunch of county-level characteristics:\n\n```{r load-data-fake, eval=FALSE}\nlibrary(tidyverse)\nresults_2016 <- read_csv(\"https://datavizf23.classes.andrewheiss.com/files/data/external_data/results_2016.csv\")\n```\n\n```{r load-data-real, include=FALSE, message=FALSE}\nlibrary(tidyverse)\nresults_2016 <- read_csv(here::here(\"files\", \"data\", \"external_data\", \"results_2016.csv\"))\n```\n\n```{r model-original}\nlibrary(broom)\n\nmodel <- lm(percent_dem ~ median_age + percent_white + \n              per_capita_income + median_rent + state,\n            data = results_2016)\n\nresults <- tidy(model, conf.int = TRUE) %>% \n  filter(!str_detect(term, \"state\"))\n\nresults\n```\n\nThe point ranges in the plot show the coefficient and the confidence interval around the coefficient. Median rent and per capita income here are just dots, though. Did something go wrong? Why is there no confidence interval?\n\n```{r plot-model-original}\nggplot(filter(results, term != \"(Intercept)\"), \n       aes(x = estimate, y = term)) +\n  geom_pointrange(aes(xmin = conf.low, xmax = conf.high))\n```\n\nThere is a confidence interval, it’s just really tiny! That’s because of how these variables are measured in the data. Each county has a dollar amount recorded for rent and income:\n\n```{r show-big-columns}\nresults_2016 %>% \n  select(state, county, per_capita_income, median_rent)\n```\n\n\nWhen looking at the regression coefficient, we interpret then using single dollars. We’d say something like “A \\$1 increase in per capita income is associated with a 0.00027 percentage point increase in Democratic vote share, on average.”\n\nTalking about \\$1 changes, though, is weird because that kind of change in income really isn’t detectable. That’d be like looking at what happens to voting patterns if income in a county goes from \\$30,000 to \\$30,001 or \\$65,000 to \\$65,001. Nothing’s going to happen to voting patterns! If the original democratic vote share was 60%, a \\$1 increase in income would increase that by 0.00027 percentage points to 60.00027%. \n\nTo make that coefficient more interpretable we can scale down the income column and think of it as hundreds or thousands of dollars instead. We can do that by making a new column in the data…\n\n```{r adjust-big-income}\nresults_2016 <- results_2016 %>% \n  mutate(per_capita_income_1000 = per_capita_income / 1000)\n\nresults_2016 %>% \n  select(state, county, per_capita_income_1000, per_capita_income)\n```\n\n…and then using that new `per_capita_income_1000` in the model instead:\n\n```{r model-new}\nmodel <- lm(percent_dem ~ median_age + percent_white + \n              per_capita_income_1000 + median_rent + state,\n            data = results_2016)\n\nresults <- tidy(model, conf.int = TRUE) %>% \n  filter(!str_detect(term, \"state\"))\n\nresults\n```\n\nNow the coefficient is bigger and we have a more visible confidence interval:\n\n```{r plot-model-new}\nggplot(filter(results, term != \"(Intercept)\"), \n       aes(x = estimate, y = term)) +\n  geom_pointrange(aes(xmin = conf.low, xmax = conf.high))\n```\n\nNow we can say something like “A $1,000 increase in per capita income is associated with a 0.27 percentage point increase in Democratic vote share, on average\" (or going from something like 60% to 60.27%)\n\n\n### The importance of layer order\n\nSo far this semester, most of your plots have involved one or two `geom_*` layers. At one point in some video (I think), I mentioned that layer order doesn’t matter with ggplot. These two chunks of code create identical plots:\n\n```r\nggplot(...) +\n  geom_point(...) +\n  theme_minimal(...) +\n  scale_fill_viridis_c(...) +\n  facet_wrap(...) +\n  labs(...)\n\nggplot(...) +\n  geom_point(...) +\n  labs(...) +\n  theme_minimal(...) +\n  facet_wrap(...) +\n  scale_fill_viridis_c(...)\n```\n\nAll those functions can happen in whatever order you want, **with one exception**. The order of the geom layers matters. The first geom layer you specify will be plotted first, the second will go on top of it, and so on.\n\nLet’s say you want to have a violin plot with jittered points on top. If you put `geom_point()` first, the points will be hidden by the violins:\n\n```{r plot-violin-top}\nlibrary(palmerpenguins)\npenguins <- penguins %>% drop_na(sex)\n\nggplot(penguins, aes(x = species, y = body_mass_g)) +\n  geom_point(position = position_jitter(seed = 1234), size = 0.5) +\n  geom_violin(aes(fill = species))\n```\n\nTo fix it, make sure `geom_violin()` comes first:\n\n```{r plot-violin-bottom}\nggplot(penguins, aes(x = species, y = body_mass_g)) +\n  geom_violin(aes(fill = species)) +\n  geom_point(position = position_jitter(seed = 1234), size = 0.5)\n```\n\nYou saw this back in exercise 7 too when you plotted the predicted values of your regression model with `geom_line()` and a confidence interval with `geom_ribbon()`. If you put the line first, then the ribbon, the ribbon covers up the line—here that line should be bright red, but the grey of the ribbon makes it darker:\n\n```{r plot-ribbon-top}\nlibrary(marginaleffects)\n\nmy_predictions <- predictions(\n  model,\n  newdata = datagrid(median_age = seq(21, 60, by = 1),\n                     state = \"Georgia\"))\n\nggplot(my_predictions, aes(x = median_age, y = estimate)) +\n  geom_line(linewidth = 1, color = \"red\") +\n  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.5)\n```\n\nIf you put the ribbon first and then the line, the line is the correct shade of red:\n\n```{r plot-ribbon-bottom}\nggplot(my_predictions, aes(x = median_age, y = estimate)) +\n  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.5) +\n  geom_line(linewidth = 1, color = \"red\")\n```\n\nThis layer order applies to annotation layers too. If you want to highlight an area of the plot (or highlight a recession, like in session 11), adding a rectangle after the geom layers will cover things up, like this ugly yellow rectangle here:\n\n```{r plot-rect-top}\nggplot(penguins, aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() +\n  annotate(geom = \"rect\", xmin = 40, xmax = 60, ymin = 5000, ymax = 6100,\n           fill = \"yellow\", alpha = 0.75)\n```\n\nTo fix that, put that `annotate()` layer first, then add other geoms on top:\n\n```{r plot-rect-bottom}\nggplot(penguins, aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  annotate(geom = \"rect\", xmin = 40, xmax = 60, ymin = 5000, ymax = 6100,\n           fill = \"yellow\", alpha = 0.75) +\n  geom_point()\n```\n\nThis doesn’t mean *all* `annotate()` layers should come first—if you want an extra label on top of a geom, make sure it comes after:\n\n```{r plot-rect-bottom-label-top}\nggplot(penguins, aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  # Yellow rectangle behind everything\n  annotate(geom = \"rect\", xmin = 40, xmax = 60, ymin = 5000, ymax = 6100,\n           fill = \"yellow\", alpha = 0.75) +\n  # Points\n  geom_point() +\n  # Label on top of the points and the rectangle\n  annotate(geom = \"label\", x = 50, y = 5500, label = \"chonky birds\")\n```\n\n::: {.callout-tip}\n### My personal preferred general layer order\n\nWhen I make my plots, I try to keep my layers in logical groups. I'll do my geoms and annotations first, then scale adjustments, then guide adjustments, then labels, then facets (if any), and end with theme adjustments, like this:\n\n```{r example-ordering, warning=FALSE, message=FALSE}\nlibrary(scales)\n\nggplot(penguins, aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  # Annotations and geoms\n  annotate(geom = \"rect\", xmin = 40, xmax = 60, ymin = 5000, ymax = 6100,\n           fill = \"yellow\", alpha = 0.75) +\n  geom_point() +\n  annotate(geom = \"label\", x = 50, y = 5500, label = \"chonky birds\") +\n  # Scale adjustments\n  scale_x_continuous(labels = label_comma(scale_cut = cut_si(\"mm\"))) +\n  scale_y_continuous(labels = label_comma(scale_cut = cut_si(\"g\"))) +\n  scale_color_viridis_d(option = \"plasma\", end = 0.6) +\n  # Guide adjustments\n  guides(color = guide_legend(title.position = \"left\")) +\n  # Labels\n  labs(x = \"Bill length\", y = \"Body mass\", color = \"Species:\",\n       title = \"Some title\", subtitle = \"Penguins!\", caption = \"Blah\") +\n  # Facets\n  facet_wrap(vars(sex)) +\n  # Theme stuff\n  theme_minimal() +\n  theme(plot.title = element_text(face = \"bold\", size = rel(1.4)),\n        plot.caption = element_text(color = \"grey50\", hjust = 0),\n        axis.title.x = element_text(hjust = 0),\n        axis.title.y = element_text(hjust = 1),\n        strip.text = element_text(hjust = 0, face = \"bold\"),\n        legend.position = \"bottom\",\n        legend.justification = c(-0.04, 0),\n        legend.title = element_text(size = rel(0.9)))\n```\n\nThis is totally arbitrary though! All that really matters is that the geoms and annotations are in the right order and that any theme adjustments you make with `theme()` come after a more general theme like `theme_grey()` or `theme_minimal()`, etc.. I'd recommend you figure out your own preferred style and try to stay consistent—it'll make your life easier and more predictable.\n:::\n\n\n### My plot didn’t translate perfectly to ggplotly—why?\n\nIn session 10 you used `ggplotly()` to convert a ggplot object into an interactive plot, which I think is magical:\n\n```{r basic-plotly, warning=FALSE, message=FALSE}\nlibrary(plotly)\n\nbasic_plot <- ggplot(penguins, aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point()\n\nggplotly(basic_plot)\n```\n\n\\ \n\nHowever, lots of you discovered that Plotly does not translate everything perfectly. Plotly is a separate Javascript library and it doesn’t support every option ggplot does. `ggplotly()` tries its best to translate between R and Javascript, but it can’t get everything. For instance, subtitles, captions, and labels disappear:\n\n```{r fancy-plotly-stuff-missing, warning=FALSE}\nfancy_plot <- ggplot(penguins, aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() +\n  annotate(geom = \"label\", x = 50, y = 5500, label = \"chonky birds\") +\n  labs(title = \"Penguin bill length and weight\",\n       subtitle = \"Neato\", \n       caption = \"Here's a caption\")\n\nggplotly(fancy_plot)\n```\n\n\\ \n\nThat’s just a limitation with ggplot and plotly. If you want a perfect translation, you’ll need to hack into the guts of the translated Javascript and HTML and edit it manually to add those things.\n\nAlternatively, you can check out other interactive plot packages. [{ggiraph}](https://davidgohel.github.io/ggiraph/) makes really great and customizable interactive plots (and it supports things like subtitles and captions and labels and other annotations ggplotly can't), but with slightly different syntax:\n\n```{r ggiraph-thing}\nlibrary(ggiraph)\n\nplot_thing <- ggplot(data = penguins) +\n  geom_point_interactive(aes(x = bill_length_mm, y = body_mass_g, color = species,\n                             tooltip = species, data_id = species)) +\n  annotate(geom = \"label\", x = 50, y = 5500, label = \"chonky birds\") +\n  labs(title = \"Penguin bill length and weight\",\n       subtitle = \"Neato\", \n       caption = \"Here's a caption\")\n\ngirafe(ggobj = plot_thing)\n```\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  fig.width = 6, \n  fig.height = 6 * 0.618, \n  fig.align = \"center\", \n  out.width = \"90%\",\n  collapse = TRUE\n)\n```\n\nHi everyone!\n\nApologies for the delay on FAQ posts! I've got some extra good tips here, though, to make up for the past couple weeks!\n\n### In my coefficient plot, the coefficient for `per_capita_income` didn’t have error bars around it. Why?\n\n(Technically this was from week 7, but I got a lot of questions about it after I posted the FAQs for week 7, so here it is.)\n\nIn [exercise 7](/assignment/07-exercise.qmd) you created a coefficient plot for a regression model predicting Democratic vote share in the 2016 presidential election based on a bunch of county-level characteristics:\n\n```{r load-data-fake, eval=FALSE}\nlibrary(tidyverse)\nresults_2016 <- read_csv(\"https://datavizf23.classes.andrewheiss.com/files/data/external_data/results_2016.csv\")\n```\n\n```{r load-data-real, include=FALSE, message=FALSE}\nlibrary(tidyverse)\nresults_2016 <- read_csv(here::here(\"files\", \"data\", \"external_data\", \"results_2016.csv\"))\n```\n\n```{r model-original}\nlibrary(broom)\n\nmodel <- lm(percent_dem ~ median_age + percent_white + \n              per_capita_income + median_rent + state,\n            data = results_2016)\n\nresults <- tidy(model, conf.int = TRUE) %>% \n  filter(!str_detect(term, \"state\"))\n\nresults\n```\n\nThe point ranges in the plot show the coefficient and the confidence interval around the coefficient. Median rent and per capita income here are just dots, though. Did something go wrong? Why is there no confidence interval?\n\n```{r plot-model-original}\nggplot(filter(results, term != \"(Intercept)\"), \n       aes(x = estimate, y = term)) +\n  geom_pointrange(aes(xmin = conf.low, xmax = conf.high))\n```\n\nThere is a confidence interval, it’s just really tiny! That’s because of how these variables are measured in the data. Each county has a dollar amount recorded for rent and income:\n\n```{r show-big-columns}\nresults_2016 %>% \n  select(state, county, per_capita_income, median_rent)\n```\n\n\nWhen looking at the regression coefficient, we interpret then using single dollars. We’d say something like “A \\$1 increase in per capita income is associated with a 0.00027 percentage point increase in Democratic vote share, on average.”\n\nTalking about \\$1 changes, though, is weird because that kind of change in income really isn’t detectable. That’d be like looking at what happens to voting patterns if income in a county goes from \\$30,000 to \\$30,001 or \\$65,000 to \\$65,001. Nothing’s going to happen to voting patterns! If the original democratic vote share was 60%, a \\$1 increase in income would increase that by 0.00027 percentage points to 60.00027%. \n\nTo make that coefficient more interpretable we can scale down the income column and think of it as hundreds or thousands of dollars instead. We can do that by making a new column in the data…\n\n```{r adjust-big-income}\nresults_2016 <- results_2016 %>% \n  mutate(per_capita_income_1000 = per_capita_income / 1000)\n\nresults_2016 %>% \n  select(state, county, per_capita_income_1000, per_capita_income)\n```\n\n…and then using that new `per_capita_income_1000` in the model instead:\n\n```{r model-new}\nmodel <- lm(percent_dem ~ median_age + percent_white + \n              per_capita_income_1000 + median_rent + state,\n            data = results_2016)\n\nresults <- tidy(model, conf.int = TRUE) %>% \n  filter(!str_detect(term, \"state\"))\n\nresults\n```\n\nNow the coefficient is bigger and we have a more visible confidence interval:\n\n```{r plot-model-new}\nggplot(filter(results, term != \"(Intercept)\"), \n       aes(x = estimate, y = term)) +\n  geom_pointrange(aes(xmin = conf.low, xmax = conf.high))\n```\n\nNow we can say something like “A $1,000 increase in per capita income is associated with a 0.27 percentage point increase in Democratic vote share, on average\" (or going from something like 60% to 60.27%)\n\n\n### The importance of layer order\n\nSo far this semester, most of your plots have involved one or two `geom_*` layers. At one point in some video (I think), I mentioned that layer order doesn’t matter with ggplot. These two chunks of code create identical plots:\n\n```r\nggplot(...) +\n  geom_point(...) +\n  theme_minimal(...) +\n  scale_fill_viridis_c(...) +\n  facet_wrap(...) +\n  labs(...)\n\nggplot(...) +\n  geom_point(...) +\n  labs(...) +\n  theme_minimal(...) +\n  facet_wrap(...) +\n  scale_fill_viridis_c(...)\n```\n\nAll those functions can happen in whatever order you want, **with one exception**. The order of the geom layers matters. The first geom layer you specify will be plotted first, the second will go on top of it, and so on.\n\nLet’s say you want to have a violin plot with jittered points on top. If you put `geom_point()` first, the points will be hidden by the violins:\n\n```{r plot-violin-top}\nlibrary(palmerpenguins)\npenguins <- penguins %>% drop_na(sex)\n\nggplot(penguins, aes(x = species, y = body_mass_g)) +\n  geom_point(position = position_jitter(seed = 1234), size = 0.5) +\n  geom_violin(aes(fill = species))\n```\n\nTo fix it, make sure `geom_violin()` comes first:\n\n```{r plot-violin-bottom}\nggplot(penguins, aes(x = species, y = body_mass_g)) +\n  geom_violin(aes(fill = species)) +\n  geom_point(position = position_jitter(seed = 1234), size = 0.5)\n```\n\nYou saw this back in exercise 7 too when you plotted the predicted values of your regression model with `geom_line()` and a confidence interval with `geom_ribbon()`. If you put the line first, then the ribbon, the ribbon covers up the line—here that line should be bright red, but the grey of the ribbon makes it darker:\n\n```{r plot-ribbon-top}\nlibrary(marginaleffects)\n\nmy_predictions <- predictions(\n  model,\n  newdata = datagrid(median_age = seq(21, 60, by = 1),\n                     state = \"Georgia\"))\n\nggplot(my_predictions, aes(x = median_age, y = estimate)) +\n  geom_line(linewidth = 1, color = \"red\") +\n  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.5)\n```\n\nIf you put the ribbon first and then the line, the line is the correct shade of red:\n\n```{r plot-ribbon-bottom}\nggplot(my_predictions, aes(x = median_age, y = estimate)) +\n  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.5) +\n  geom_line(linewidth = 1, color = \"red\")\n```\n\nThis layer order applies to annotation layers too. If you want to highlight an area of the plot (or highlight a recession, like in session 11), adding a rectangle after the geom layers will cover things up, like this ugly yellow rectangle here:\n\n```{r plot-rect-top}\nggplot(penguins, aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() +\n  annotate(geom = \"rect\", xmin = 40, xmax = 60, ymin = 5000, ymax = 6100,\n           fill = \"yellow\", alpha = 0.75)\n```\n\nTo fix that, put that `annotate()` layer first, then add other geoms on top:\n\n```{r plot-rect-bottom}\nggplot(penguins, aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  annotate(geom = \"rect\", xmin = 40, xmax = 60, ymin = 5000, ymax = 6100,\n           fill = \"yellow\", alpha = 0.75) +\n  geom_point()\n```\n\nThis doesn’t mean *all* `annotate()` layers should come first—if you want an extra label on top of a geom, make sure it comes after:\n\n```{r plot-rect-bottom-label-top}\nggplot(penguins, aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  # Yellow rectangle behind everything\n  annotate(geom = \"rect\", xmin = 40, xmax = 60, ymin = 5000, ymax = 6100,\n           fill = \"yellow\", alpha = 0.75) +\n  # Points\n  geom_point() +\n  # Label on top of the points and the rectangle\n  annotate(geom = \"label\", x = 50, y = 5500, label = \"chonky birds\")\n```\n\n::: {.callout-tip}\n### My personal preferred general layer order\n\nWhen I make my plots, I try to keep my layers in logical groups. I'll do my geoms and annotations first, then scale adjustments, then guide adjustments, then labels, then facets (if any), and end with theme adjustments, like this:\n\n```{r example-ordering, warning=FALSE, message=FALSE}\nlibrary(scales)\n\nggplot(penguins, aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  # Annotations and geoms\n  annotate(geom = \"rect\", xmin = 40, xmax = 60, ymin = 5000, ymax = 6100,\n           fill = \"yellow\", alpha = 0.75) +\n  geom_point() +\n  annotate(geom = \"label\", x = 50, y = 5500, label = \"chonky birds\") +\n  # Scale adjustments\n  scale_x_continuous(labels = label_comma(scale_cut = cut_si(\"mm\"))) +\n  scale_y_continuous(labels = label_comma(scale_cut = cut_si(\"g\"))) +\n  scale_color_viridis_d(option = \"plasma\", end = 0.6) +\n  # Guide adjustments\n  guides(color = guide_legend(title.position = \"left\")) +\n  # Labels\n  labs(x = \"Bill length\", y = \"Body mass\", color = \"Species:\",\n       title = \"Some title\", subtitle = \"Penguins!\", caption = \"Blah\") +\n  # Facets\n  facet_wrap(vars(sex)) +\n  # Theme stuff\n  theme_minimal() +\n  theme(plot.title = element_text(face = \"bold\", size = rel(1.4)),\n        plot.caption = element_text(color = \"grey50\", hjust = 0),\n        axis.title.x = element_text(hjust = 0),\n        axis.title.y = element_text(hjust = 1),\n        strip.text = element_text(hjust = 0, face = \"bold\"),\n        legend.position = \"bottom\",\n        legend.justification = c(-0.04, 0),\n        legend.title = element_text(size = rel(0.9)))\n```\n\nThis is totally arbitrary though! All that really matters is that the geoms and annotations are in the right order and that any theme adjustments you make with `theme()` come after a more general theme like `theme_grey()` or `theme_minimal()`, etc.. I'd recommend you figure out your own preferred style and try to stay consistent—it'll make your life easier and more predictable.\n:::\n\n\n### My plot didn’t translate perfectly to ggplotly—why?\n\nIn session 10 you used `ggplotly()` to convert a ggplot object into an interactive plot, which I think is magical:\n\n```{r basic-plotly, warning=FALSE, message=FALSE}\nlibrary(plotly)\n\nbasic_plot <- ggplot(penguins, aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point()\n\nggplotly(basic_plot)\n```\n\n\\ \n\nHowever, lots of you discovered that Plotly does not translate everything perfectly. Plotly is a separate Javascript library and it doesn’t support every option ggplot does. `ggplotly()` tries its best to translate between R and Javascript, but it can’t get everything. For instance, subtitles, captions, and labels disappear:\n\n```{r fancy-plotly-stuff-missing, warning=FALSE}\nfancy_plot <- ggplot(penguins, aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() +\n  annotate(geom = \"label\", x = 50, y = 5500, label = \"chonky birds\") +\n  labs(title = \"Penguin bill length and weight\",\n       subtitle = \"Neato\", \n       caption = \"Here's a caption\")\n\nggplotly(fancy_plot)\n```\n\n\\ \n\nThat’s just a limitation with ggplot and plotly. If you want a perfect translation, you’ll need to hack into the guts of the translated Javascript and HTML and edit it manually to add those things.\n\nAlternatively, you can check out other interactive plot packages. [{ggiraph}](https://davidgohel.github.io/ggiraph/) makes really great and customizable interactive plots (and it supports things like subtitles and captions and labels and other annotations ggplotly can't), but with slightly different syntax:\n\n```{r ggiraph-thing}\nlibrary(ggiraph)\n\nplot_thing <- ggplot(data = penguins) +\n  geom_point_interactive(aes(x = bill_length_mm, y = body_mass_g, color = species,\n                             tooltip = species, data_id = species)) +\n  annotate(geom = \"label\", x = 50, y = 5500, label = \"chonky birds\") +\n  labs(title = \"Penguin bill length and weight\",\n       subtitle = \"Neato\", \n       caption = \"Here's a caption\")\n\ngirafe(ggobj = plot_thing)\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"highlight-style":"monokai","toc-depth":4,"output-file":"2023-11-06_faqs-weeks-08-09-10.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Posted","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["../files/bib/readings.bib"],"csl":"../files/bib/chicago-author-date.csl","_quarto-vars":{"author":"Andrew Heiss","instructor":{"name":"Dr. Andrew Heiss","name_no_title":"Andrew Heiss","email":"aheiss@gsu.edu","url":"https://www.andrewheiss.com","twitter":"andrewheiss","github":"andrewheiss","office":"55 Park Place SE, Room 464","contact_policy":"E-mail and Slack are the best ways to get in contact with me. I will try to respond to all course-related e-mails and Slack messages within 24 hours (*really*), but also remember that life can be busy and chaotic for everyone (including me!), so if I don't respond right away, don't worry!","appointment_url":"https://calendly.com/andrewheiss/"},"course":{"number":"PMAP 8551/4551","semester":"Fall 2023","days":"Any day","time":"Asynchronous","location":"Anywhere","dates":"August 12–December 11, 2023","github":"https://www.github.com/andrewheiss/datavizf23.classes.andrewheiss.com","url":"https://datavizf23.classes.andrewheiss.com","copyright_year":"2023","slack":"https://gsudatavizf2023.slack.com"},"university":{"name":"Georgia State University","url":"https://www.gsu.edu"},"school":{"name":"Andrew Young School of Policy Studies","url":"https://aysps.gsu.edu/"}},"theme":["litera","../html/custom.scss"],"date-format":"dddd MMMM D, YYYY [at] h:mm A","template-partials":["../html/news/title-block.html"],"title":"Weeks 8, 9, and 10 tips and FAQs","date":"2023-11-06T22:54","categories":["FAQs"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}