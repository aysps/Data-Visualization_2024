{
  "hash": "3ea819ad652218101622f52cd8a8acf4",
  "result": {
    "markdown": "---\ntitle: \"Mini project 1 feedback\"\ndate: \"2023-11-06T23:02\"\ncategories: [faq, feedback]\ntoc-depth: 4\n---\n\n\n\n\nHi everyone!\n\nGreat work with your first mini projects! You successfully took real world data, cleaned it up, made a plot with it, and told a story about rats in New York!\n\nI left some similar comments for a lot of you, so I figured I’d compile those here along with examples of how to address them.\n\nFirst, I'll load and clean the data so I can illustrate stuff below:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nrats_raw <- read_csv(\n  \"https://datavizf23.classes.andrewheiss.com/files/data/external_data/Rat_Sightings.csv\", \n  na = c(\"\", \"NA\", \"N/A\")\n)\n\nrats_clean <- rats_raw %>%\n  rename(created_date = `Created Date`,\n         location_type = `Location Type`,\n         borough = Borough) %>%\n  mutate(created_date = mdy_hms(created_date)) %>%\n  mutate(sighting_year = year(created_date),\n         sighting_month = month(created_date),\n         sighting_day = day(created_date),\n         sighting_weekday = wday(created_date, label = TRUE, abbr = FALSE)) %>%\n  filter(borough != \"Unspecified\")\n```\n:::\n\n\n\n\n\n### Warnings and messages\n\n> Your knitted document has warnings and package loading messages.\n\nYou should turn off those warnings and messages. See [this](/news/2023-09-12_faqs_week-03.html#how-can-i-hide-warnings-and-messages) and  [this](/news/2023-10-03_cleaner-nicer-rmd-output.html#clean-up-warnings-and-messages) for more about how.\n\n### ALL CAPS\n\n> Consider converting the borough names to NOT ALL CAPS, since you don’t repeat all caps anywhere else\n\nIn the data, the borough names are all spelled with ALL CAPS:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrats_clean %>% \n  select(created_date, borough)\n## # A tibble: 101,913 × 2\n##    created_date        borough      \n##    <dttm>              <chr>        \n##  1 2015-09-04 00:00:00 MANHATTAN    \n##  2 2015-09-04 00:00:00 STATEN ISLAND\n##  3 2015-09-04 00:00:00 STATEN ISLAND\n##  4 2015-09-04 00:00:00 BROOKLYN     \n##  5 2015-09-04 00:00:00 BRONX        \n##  6 2015-09-04 00:00:00 BROOKLYN     \n##  7 2015-09-04 00:00:00 QUEENS       \n##  8 2015-09-04 00:00:00 BROOKLYN     \n##  9 2015-09-04 00:00:00 MANHATTAN    \n## 10 2015-09-04 00:00:00 STATEN ISLAND\n## # ℹ 101,903 more rows\n```\n:::\n\n\nYou can convert that to not all caps with one of two functions from the {stringr} package (which is one of the nine that R loads when you run `library(tidyverse)`): `str_to_title()` changes text to title case (where each word is capitalized) while `str_to_sentence()` changes text to sentence case (where the first letter in a sentence is capitalized):\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstr_to_title(\"OH NO! RATS IN NEW YORK\")\n## [1] \"Oh No! Rats In New York\"\nstr_to_sentence(\"OH NO! RATS IN NEW YORK\")\n## [1] \"Oh no! Rats in new york\"\n```\n:::\n\n\nYou can use it with `mutate()`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrats_clean <- rats_clean %>% \n  mutate(borough = str_to_title(borough))\n\nrats_clean %>% \n  select(created_date, borough)\n## # A tibble: 101,913 × 2\n##    created_date        borough      \n##    <dttm>              <chr>        \n##  1 2015-09-04 00:00:00 Manhattan    \n##  2 2015-09-04 00:00:00 Staten Island\n##  3 2015-09-04 00:00:00 Staten Island\n##  4 2015-09-04 00:00:00 Brooklyn     \n##  5 2015-09-04 00:00:00 Bronx        \n##  6 2015-09-04 00:00:00 Brooklyn     \n##  7 2015-09-04 00:00:00 Queens       \n##  8 2015-09-04 00:00:00 Brooklyn     \n##  9 2015-09-04 00:00:00 Manhattan    \n## 10 2015-09-04 00:00:00 Staten Island\n## # ℹ 101,903 more rows\n```\n:::\n\n\n(I'd use `str_to_title()` here since Staten Island is two words; if you use `str_to_sentence()` it'll turn into \"Staten island\".)\n\nNow your plots will have nicer borough names:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrats_summarized <- rats_clean %>% \n  group_by(borough) %>% \n  summarize(total = n())\n\nggplot(rats_summarized, aes(x = borough, y = total)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](2023-11-06_feedback-mini-project-01_files/figure-html/plot-with-better-capitalization-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n\n### Sorting and ordering\n\n> Consider sorting the locations by number of sightings instead of alphabetically\n\nIn the plot above, the boroughs on the x-axis are in alphabetic order. If we want to tell a better story, though, it's helpful to reorder them so that we can more easily see which boroughs have the most and least rats. [See here for more about reordering categories](/news/2023-10-10_faqs-week-07.html#i-want-my-bars-to-be-sorted-in-my-plot.-how-can-i-control-their-order). We can sort the data and then use `fct_inorder()` from the {forcats} package (also one of the nine that gets loaded with `library(tidyverse)`) to lock these borough names in the right order:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrats_summarized <- rats_clean %>% \n  group_by(borough) %>% \n  summarize(total = n()) %>% \n  # Sort by total in descending order\n  arrange(desc(total)) %>% \n  # Lock bhe borough names in place\n  mutate(borough = fct_inorder(borough))\n\nggplot(rats_summarized, aes(x = borough, y = total)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](2023-11-06_feedback-mini-project-01_files/figure-html/plot-better-order-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n### Unbalanced facets\n\n> The facets are a little unbalanced given that there are 8 panels. Consider adding… something?… to that empty panel, like explanatory text or information about the data source. Or make it use 4 columns and 2 rows, or 2 columns and 4 rows so there’s no empty space\n\nLots of you used facets to show trends over time. By default R tries to make the grid as square as possible, so here there are 3 rows and 3 columns, but that leaves an empty panel in the bottom right corner.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrats_by_year <- rats_clean %>% \n  group_by(borough, sighting_year) %>% \n  summarize(total = n())\n## `summarise()` has grouped output by 'borough'. You can override using the\n## `.groups` argument.\n\nggplot(rats_by_year, aes(x = borough, y = total)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year))\n```\n\n::: {.cell-output-display}\n![](2023-11-06_feedback-mini-project-01_files/figure-html/plot-facets-unbalanced-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nFor the sake of balance, you can get rid of that panel by changing the layout. There are 8 panels here, so we could make a rectangle that's 4 wide and 2 tall (or 2 wide and 4 tall if you want a tall rectangle instead) using the `nrow` or `ncol` arguments to `facet_wrap()`:\n\n::: {.panel-tabset}\n### 4 columns\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(rats_by_year, aes(x = borough, y = total)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year), ncol = 4)\n```\n\n::: {.cell-output-display}\n![](2023-11-06_feedback-mini-project-01_files/figure-html/facet-4-cols-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n### 4 rows\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(rats_by_year, aes(x = borough, y = total)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year), nrow = 4)\n```\n\n::: {.cell-output-display}\n![](2023-11-06_feedback-mini-project-01_files/figure-html/facet-4-rows-1.png){fig-align='center' width=90%}\n:::\n:::\n\n:::\n\nAlternatively you can stick something in that empty panel like your legend (though in this example it's better to not even have a legend because [it's redundant with the x-axis](/news/2023-09-27_faqs_week-05.html#double-encoding-and-excessive-legends)). The `reposition_legend()` function from the {lemon} package makes this really easy:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(lemon)\n\np <- ggplot(rats_by_year, aes(x = borough, y = total, fill = borough)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year)) +\n  guides(fill = guide_legend(ncol = 2, title.position = \"top\"))\n\nreposition_legend(p, position = \"bottom left\", panel = \"panel-3-3\")\n```\n\n::: {.cell-output-display}\n![](2023-11-06_feedback-mini-project-01_files/figure-html/plot-legend-corner-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nYou can even be fancy and add some explanatory text to that corner. It takes a big of extra work—you essentially have to create a fake text-only plot using `grid::textGrob()` and then use `inset_element()` from the {patchwork} to place it on top of the main plot:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(grid)  # For making custom grid grobs\nlibrary(patchwork)\n## Warning: package 'patchwork' was built under R version 4.2.3\n\n# Make a little text-only plot\nextra_note <- textGrob(\"Here's some text\\nabout rats. Neato.\", \n                       gp = gpar(fontface = \"bold\"))\n\n# Run this if you want to see it by itself:\n# grid.draw(extra_note)\n\np <- ggplot(rats_by_year, aes(x = borough, y = total)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year))\n\n# Add the text-only plot as an inset plot with patchwork\np + inset_element(extra_note, left = 0.7, bottom = 0.0, right = 1, top = 0.3)\n```\n\n::: {.cell-output-display}\n![](2023-11-06_feedback-mini-project-01_files/figure-html/plot-note-corner-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n\n### Overlapping text\n\n> The labels along the x-axis are unreadable and overlapping.\n\nThere are lots of ways to fix this—[see this whole blog post for some different options](https://www.andrewheiss.com/blog/2022/06/23/long-labels-ggplot/). Here are some quick examples (none of these are fabulous, but they're a start):\n\n::: {.panel-tabset}\n#### Swap x- and y-axes\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(rats_by_year, aes(x = total, y = borough)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year), ncol = 4)\n```\n\n::: {.cell-output-display}\n![](2023-11-06_feedback-mini-project-01_files/figure-html/overlap-swap-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n#### Rotate labels\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(rats_by_year, aes(x = borough, y = total)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year), ncol = 4) +\n  theme(axis.text.x = element_text(angle = 30, hjust = 0.5, vjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](2023-11-06_feedback-mini-project-01_files/figure-html/overlap-rotate-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n#### Dodge labels\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(rats_by_year, aes(x = borough, y = total)) +\n  geom_col() +\n  facet_wrap(vars(sighting_year), ncol = 4) +\n  scale_x_discrete(guide = guide_axis(n.dodge = 3))\n```\n\n::: {.cell-output-display}\n![](2023-11-06_feedback-mini-project-01_files/figure-html/overlap-dodge-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n:::\n\n\n### Commas\n\n> Consider adding automatic commas to the x-axis by including `library(scales)` and adding `scale_x_continuous(labels = label_comma())`\n\nYou can make nicer labels by formatting them with `label_comma()` (or any of the other `label_*()` functions) from the {scales} package. [See here for a lot more details](/news/2023-09-19_faqs_week-04.html#i-have-numbers-like-20000-and-want-them-formatted-with-commas-like-20000.-can-i-do-that-automatically).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(scales)\n\nggplot(rats_summarized, aes(x = borough, y = total)) +\n  geom_col() +\n  scale_y_continuous(labels = label_comma())\n```\n\n::: {.cell-output-display}\n![](2023-11-06_feedback-mini-project-01_files/figure-html/comma-example-1.png){fig-align='center' width=90%}\n:::\n:::\n",
    "supporting": [
      "2023-11-06_feedback-mini-project-01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}