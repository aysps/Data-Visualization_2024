{
  "hash": "18944f4d95e710d4aec00c51fea8d71e",
  "result": {
    "markdown": "---\ntitle: \"Week 1 FAQs\"\ndate: \"2023-08-30T21:08\"\ncategories: [FAQs]\n---\n\n\n\n\nHi everyone!\n\nI just finished grading everything you've turned in so far and you're doing great work! I've also been happy to see activity on Slack. Please keep commenting and discussing stuff there!\n\nI have just a few quick FAQs and tips I've been giving as feedback to many of you:\n\n\n### Slack in public\n\nOne reminder regarding Slack: lots of you have been sending me private messages there for assistance, and that's great and I'm happy to respond like that. However, one way to help build a stronger community for this class is to ask questions in public in the various `#help` channels instead. There are a couple reasons for this:\n\n1. **It reduces duplication**: Many of you have had almost identical questions and I've been able to copy/paste screenshots between different private conversations asking for help. Having those questions and answers in `#help` instead will let you get answers to common questions faster\n2. **It allows *you* to help**: Some of you have R experience already, and even if you don't, as the summer goes on, you'll get more comfortable with it and will start being able to answer your classmates' questions. You might have just fixed a similar issue in a past exercise, or you might be able to spot a typo in their code, or you might otherwise know how to help. Step in and help! Slack is for building a community, not just for getting assistance from me.\n\n\n### Load libraries and data just once\n\nWhen working with the Posit Primers, you ran code in little text boxes in your browser and often reloaded libraries and data in each of the little text boxes, like this to make a scatterplot:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(gampinder)\n\ngapminder_2007 <- gapminder %>% \n  filter(year == 2007)\n\nggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, color = continent)) +\n  geom_point()\n```\n:::\n\n\nOr this to make a histogram:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(gampinder)\n\ngapminder_2007 <- gapminder %>% \n  filter(year == 2007)\n\nggplot(gapminder_2007, aes(y = lifeExp)) +\n  geom_histogram()\n```\n:::\n\n\nWhen you're working in a document in RStudio, though, you **do not and should not** need to keep reloading the different libraries and datasets. Instead, do it once at the beginning of your document—all the chunks in the rest of the document will have access to the libraries and datasets that you've loaded.\n\n::: {.panel-tabset}\n\n### Do this\n\n````default\nHere I'll load the data first\n\n```{{r}}\nlibrary(tidyverse)\nlibrary(gampinder)\n\ngapminder_2007 <- gapminder %>% \n  filter(year == 2007)\n```\n\nHere's a scatterplot: \n\n```{{r}}\nggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, color = continent)) +\n  geom_point()\n```\n\nAnd here's a histogram:\n\n```{{r}}\nggplot(gapminder_2007, aes(y = lifeExp)) +\n  geom_histogram()\n```\n````\n\n### Don't do this\n\n````default\nHere's a scatterplot: \n\n```{{r}}\nlibrary(tidyverse)\nlibrary(gampinder)\n\ngapminder_2007 <- gapminder %>% \n  filter(year == 2007)\n\nggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, color = continent)) +\n  geom_point()\n```\n\nAnd here's a histogram:\n\n```{{r}}\nlibrary(tidyverse)\nlibrary(gampinder)\n\ngapminder_2007 <- gapminder %>% \n  filter(year == 2007)\n\nggplot(gapminder_2007, aes(y = lifeExp)) +\n  geom_histogram()\n```\n````\n\n:::\n\n### Knitted document format\n\nR Markdown is great and wonderful in part because you can write a document in one .Rmd file and have it magically turn into an HTML file, a Word file, or a PDF (or if you want to get extra fancy later, a slideshow, a dashboard, or even a full website).\n\niCollege doesn't like HTML files, though. It won't show images that get uploaded because of weird server restrictions or something. So when you submit your exercises, make sure you knit to PDF or Word:\n\n![Knit to either Word or PDF when submitting to iCollege](img/knitr-formats.png){width=60%}\n\nI'd recommend knitting to HTML often as you work on the exercise. Knitting to PDF takes a few extra seconds, and knitting to Word is a hassle because Word gets mad if you have a previous version of the document open when knitting. HTML is pretty instantaneous. When I work on R Markdown files, I put a browser window on one of my monitors and RStudio on the other and knit and reknit often to HTML while working. Once I'm done and the document all works and the images, tables, text, etc. are all working, I'll knit to PDF or Word or whatever final format I want.\n\n\n### Column names and the hyperliterality of computers\n\nComputers are incredibly literal and they cannot read your mind! As humans we're good at figuring out information when data is missing or distorted—if someone sends you a text saying that they're \"running 5 minutes latte\", you know that they're not running with some weird time-based coffee but are instead running late. Computers can't figure that out.\n\nFor example, in Exercise 1 if you want to make a plot showing the relationship between highway MPG and cylinders, if you type anything like this, *it won't work*. \n\n\n\n\n\nHere there's an error because there are no columns named `cylinders` or `highway`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = cars, mapping = aes(x = cylinders, y = highway)) +\n  geom_point()\n## Error in `geom_point()`:\n## ! Problem while computing aesthetics.\n## ℹ Error occurred in the 1st layer.\n## Caused by error in `FUN()`:\n## ! object 'cylinders' not found\n```\n:::\n\n\nHere there's an error because there is no column named `Cyl`. It's `cyl` with a lowercase `c`. R is case sensitive.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = cars, mapping = aes(x = Cyl, y = hwy)) +\n  geom_point()\n## Error in `geom_point()`:\n## ! Problem while computing aesthetics.\n## ℹ Error occurred in the 1st layer.\n## Caused by error in `FUN()`:\n## ! object 'Cyl' not found\n```\n:::\n\n\nThe easiest way to make sure you're using the right column names is to look at them. RStudio gives you a couple easy ways to do this. After you've loaded your data, you should see it in your environment panel:\n\n![The `cars` dataset in the environment panel](img/environment-df.png){width=60%}\n\nIf you click on the little blue arrow next to the name of the dataset, RStudio will show you the column names and the first few values in each:\n\n![Column names in the `cars` dataset](img/environment-df-toggle.png){width=80%}\n\nIf you click on the name of the dataset (`cars` here), RStudio will open a new tab with a read-only view of the data. You can click on the column names to sort and filter things too, which is convenient.\n\n![The `cars` dataset in a viewer tab](img/environment-df-view.png){width=90%}\n\nI constantly have to refer back to the list of column names to make sure I'm spelling things correctly and using the right capitalization.\n\n\n### The magic of `labs()`\n\nA few years ago, if you wanted to add labels to a plot with ggplot, you had to use specific functions, like `xlab()` and `ylab()` for the axis labels and `ggtitle()` for the plot title, like this:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n# The old way; don't do this!\nggplot(mpg, aes(x = cyl, y = displ, color = drv)) +\n  geom_point() +\n  xlab(\"Cylinders\") +\n  ylab(\"Displacement\") +\n  ggtitle(\"A plot showing stuff\")\n```\n\n::: {.cell-output-display}\n![](2023-08-30_faqs_week-01_files/figure-html/labs-old-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nLots of older code examples on the internet will still use these functions. However, those have all been replaced with a newer, nicer [`labs()` function](https://ggplot2.tidyverse.org/reference/labs.html) that lets you control all the different plot labels in one layer. Here's how to make that same plot above with `labs()` instead:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# The better way; do this!\nggplot(mpg, aes(x = cyl, y = displ, color = drv)) +\n  geom_point() +\n  labs(\n    x = \"Cylinders\",\n    y = \"Displacement\",\n    title = \"A plot showing stuff\"\n  )\n```\n\n::: {.cell-output-display}\n![](2023-08-30_faqs_week-01_files/figure-html/labs-new-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nThe `labs()` function also lets you do subtitles and captions and lets you control the legend titles too. Here we mapped `drv` to the color aesthetic, so we can change its title by using `color` in `labs()`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# The better way; do this!\nggplot(mpg, aes(x = cyl, y = displ, color = drv)) +\n  geom_point() +\n  labs(\n    x = \"Cylinders\",\n    y = \"Displacement\",\n    title = \"A plot showing stuff\",\n    subtitle = \"Super neat\",\n    caption = \"I still have no idea what displacement is\",\n    color = \"Drive\"\n  )\n```\n\n::: {.cell-output-display}\n![](2023-08-30_faqs_week-01_files/figure-html/labs-new-lots-1.png){fig-align='center' width=90%}\n:::\n:::\n",
    "supporting": [
      "2023-08-30_faqs_week-01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}